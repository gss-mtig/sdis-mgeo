{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Infraestructuras de datos espaciales y est\u00e1ndares de geoservicios 2020-2021 Materiales para el curso sobre Infraestructuras de datos espaciales y est\u00e1ndares de geoservicios (SDIS) del M\u00e0ster en Geoinformaci\u00f3 de la UAB Temario: https://gss-mtig.github.io/sdis-mgeo-20-21/ Introducci\u00f3n a las IDE's Antecedentes Qu\u00e9 es una IDE? Componentes de una IDE IDEC IDEE INSPIRE Otras IDES Est\u00e1ndares OCG Est\u00e1ndares ISO Visualizaci\u00f3n con Kepler.gl Herramientas de visualizaci\u00f3n de datos Conceptos b\u00e1sicos de Geoservicios Ejemplo servicio WMS Consideraciones sobre servicios Open data Ejemplo servicio bicing Barcelona Ejemplo servicio bicing Barcelona (VectorTiles) Consideraciones sobre servicios de Sensores Ejemplo Sentilo ACA Geoservicios realtime Herramientas de visualizaci\u00f3n geoservicios Ejemplo Mobility Ejemplo servicio realtime para compartir la ubicaci\u00f3n Ejemplo GTFS Autores Wladimir Szczerban (alias Bolo) @bolosig , geostarter (ICGC) Victor Pascual Ayats @sfggeogis , geostarter (ICGC) Ignacio Ferrero (Departamento de Geograf\u00eda UAB) Condiciones de reutilizaci\u00f3n de estos apuntes Estos materiales est\u00e1n publicados bajo licencia CreativeCommons (by-sa) 4.0 internacional Usted es libre de: * Compartir \u2014 copiar y redistribuir el material en cualquier medio o formato * Adaptar \u2014 remezclar, transformar y crear a partir del material para cualquier finalidad, incluso comercial. Bajo las condiciones siguientes: Reconocimiento \u2014 Debe reconocer adecuadamente la autor\u00eda, proporcionar un enlace a la licencia e indicar si se han realizado cambios. Puede hacerlo de cualquier manera razonable, pero no de una manera que sugiera que tiene el apoyo del licenciador o lo recibe por el uso que hace. CompartirIgual \u2014 Si remezcla, transforma o crea a partir del material, deber\u00e1 difundir sus contribuciones bajo la misma licencia que el original. No hay restricciones adicionales \u2014 No puede aplicar t\u00e9rminos legales o medidas tecnol\u00f3gicas que legalmente restrinjan realizar aquello que la licencia permite.","title":"Home"},{"location":"#infraestructuras-de-datos-espaciales-y-estandares-de-geoservicios-2020-2021","text":"Materiales para el curso sobre Infraestructuras de datos espaciales y est\u00e1ndares de geoservicios (SDIS) del M\u00e0ster en Geoinformaci\u00f3 de la UAB Temario:","title":"Infraestructuras de datos espaciales y est\u00e1ndares de geoservicios 2020-2021"},{"location":"#httpsgss-mtiggithubiosdis-mgeo-20-21","text":"Introducci\u00f3n a las IDE's Antecedentes Qu\u00e9 es una IDE? Componentes de una IDE IDEC IDEE INSPIRE Otras IDES Est\u00e1ndares OCG Est\u00e1ndares ISO Visualizaci\u00f3n con Kepler.gl Herramientas de visualizaci\u00f3n de datos Conceptos b\u00e1sicos de Geoservicios Ejemplo servicio WMS Consideraciones sobre servicios Open data Ejemplo servicio bicing Barcelona Ejemplo servicio bicing Barcelona (VectorTiles) Consideraciones sobre servicios de Sensores Ejemplo Sentilo ACA Geoservicios realtime Herramientas de visualizaci\u00f3n geoservicios Ejemplo Mobility Ejemplo servicio realtime para compartir la ubicaci\u00f3n Ejemplo GTFS","title":"https://gss-mtig.github.io/sdis-mgeo-20-21/"},{"location":"#autores","text":"Wladimir Szczerban (alias Bolo) @bolosig , geostarter (ICGC) Victor Pascual Ayats @sfggeogis , geostarter (ICGC) Ignacio Ferrero (Departamento de Geograf\u00eda UAB) Condiciones de reutilizaci\u00f3n de estos apuntes Estos materiales est\u00e1n publicados bajo licencia CreativeCommons (by-sa) 4.0 internacional Usted es libre de: * Compartir \u2014 copiar y redistribuir el material en cualquier medio o formato * Adaptar \u2014 remezclar, transformar y crear a partir del material para cualquier finalidad, incluso comercial. Bajo las condiciones siguientes: Reconocimiento \u2014 Debe reconocer adecuadamente la autor\u00eda, proporcionar un enlace a la licencia e indicar si se han realizado cambios. Puede hacerlo de cualquier manera razonable, pero no de una manera que sugiera que tiene el apoyo del licenciador o lo recibe por el uso que hace. CompartirIgual \u2014 Si remezcla, transforma o crea a partir del material, deber\u00e1 difundir sus contribuciones bajo la misma licencia que el original. No hay restricciones adicionales \u2014 No puede aplicar t\u00e9rminos legales o medidas tecnol\u00f3gicas que legalmente restrinjan realizar aquello que la licencia permite.","title":"Autores"},{"location":"10_ejemplo_servicio_bicing_bcn_vt/","text":"Ejemplo servicio bicing Barcelona VectorTiles Acceso al servicio de datos del Bicing de Barcelona En el portal Open data del Ayuntamiento de Barcelona podemos encontrar un dataset (conjunto de datos) que contiene las estaciones del servicio de Bicing Anteriormente ten\u00edan un servicio donde daban toda la informaci\u00f3n de la estaci\u00f3n en tiempo real http://wservice.viabicing.cat/v2/stations . Actualmente lo han separado en dos servicios unos con la informaci\u00f3n de las estaciones (identificador, nombre, coordenadas, etc.) y otro con estado de las estaciones (n\u00famero de bicis disponibles, tipos de bicis, etc) Si bien el Ayuntamiento de Barcelona no ofrece explicitamente el acceso a los datos del Bicing como un servicio, si que tiene un servicio de datos en tiempo real. La url la podemos encontrar presionando el bot\u00f3n de Descargar del recurso json url servicio de bicing Al abrir la url https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information en nuestro navegador observaremos que la respuesta es un archivo json con un conjunto de elementos que tienen las coordenadas de la localizaci\u00f3n de la estaci\u00f3n de bicing, la direcci\u00f3n, la capacidad, etc. Mapa que utiliza este servicio, https://www.bicing.barcelona/es/mapa-de-disponibilidad-provisional El archivo json que retorna el servicio tiene coordenadas pero no es un fichero GeoJSON. 1 Para ver estos datos sobre un mapa crearemos un visor utilizando Mapbox GL JS. 2 Creaci\u00f3n de un visor Crer una carpeta con el nombre de visor-bicing-vt . Crer una carpeta con el nombre de public dentro de la carpeta visor-bicing-vt. Crear un archivo con el nombre de index.html dentro de la carpeta public. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime VectorTiles </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js' ></ script > < link href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css' rel = 'stylesheet' /> < style > body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } </ style > </ head > < body > < div id = \"map\" ></ div > < script type = \"text/javascript\" > var map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc.json' , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para ver que carga un mapa centrado en Barcelona. Creaci\u00f3n del proxy Crearemos un proxy que nos permita Instalar Node.js 3 . Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 12.13.1 LTS) y lo instalaremos con las opciones por defecto. Una vez instalado el Node abrir la consola para verificar que se ha instalado correctamente. Escribir node -v Navegar hasta nuestra carpeta visor-bicing-vt y escribir: npm init Con este comando estaremos creando el archivo package.json . Este comando solicita varios elementos como, por ejemplo, el nombre y la versi\u00f3n de la aplicaci\u00f3n. Por ahora, s\u00f3lo hay que pulsar ENTER para aceptar los valores predeterminados. Instalar las dependencias para crear nuestro servicio de proxy 4 . En este caso utilizaremos Express 5 como servidor web y el m\u00f3dulo axios 6 . Instalar el express y guardarlo en la lista de dependencias npm install express --save Instalar el axios y guardarlo en la lista de dependencias npm install axios --save Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que servir\u00e1 de proxy con el servicio de Bicing. Copiar lo siguiente en este archivo. var express = require ( 'express' ); var app = express (); var axios = require ( 'axios' ); var serverBicing = 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information' ; app . use ( express . static ( 'public' )); app . all ( \"/bicingjson/*\" , function ( req , res ) { console . log ( 'redirecting to Server2' ); var geojson = { type : 'FeatureCollection' , features : [] }; axios . get ( serverBicing ). then ( function ( response ){ // handle success var stations = response . data . data . stations ; for ( var i = stations . length - 1 ; i >= 0 ; i -- ) { var station = stations [ i ]; var feature = { type : 'Feature' , properties : { altitude : station . altitude , id : station . station_id , address : station . address , post_code : station . post_code , capacity : station . capacity }, geometry : { type : 'Point' , coordinates : [ station . lon , station . lat ] } }; geojson . features . push ( feature ); } res . send ( geojson ); }). catch ( function ( error ) { console . log ( error ); res . send ( error ); }); }); app . listen ( 3000 ); Probar que nuestro proxy est\u00e1 funcionando, escribiendo: node app.js Abrir la url de nuestro proxy http://localhost:3000/bicingjson/ en el navegador. Escribir en el navegador http://localhost:3000 para ver nuestro mapa. Modificar el visor Modificar el archivo index.html para que llame al proxy que hemos creado y cargue la capa de bicing. Escribir justo despues de la declaraci\u00f3n del mapa. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime VectorTiles </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js' ></ script > < link href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css' rel = 'stylesheet' /> < style > body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } </ style > </ head > < body > < div id = \"map\" ></ div > < script type = \"text/javascript\" > var map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc.json' , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( \"load\" , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( 'bicing-source' , { type : 'geojson' , data : 'http://localhost:3000/bicingjson/' }); //agregamos la capa con su estilo al mapa map . addLayer ({ \"id\" : \"bicing\" , \"type\" : \"circle\" , \"source\" : \"bicing-source\" , \"paint\" : { \"circle-radius\" : 6 , \"circle-color\" : \"#B42222\" }, }); }); </ script > </ body > </ html > Recargar la aplicaci\u00f3n y veremos los puntos de las estaciones de bicing. Actualizar los datos del mapa. Para actualizar los datos del mapa se debe recargar la capa de estaciones de bicing cada X tiempo. Para recargar la capa cada 3 segundos escribir los siguiente al final de la funci\u00f3n que se llama al terminar de cargar el estilo del mapa. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime VectorTiles </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js' ></ script > < link href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css' rel = 'stylesheet' /> < style > body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } </ style > </ head > < body > < div id = \"map\" ></ div > < script type = \"text/javascript\" > var map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc.json' , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( \"load\" , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( 'bicing-source' , { type : 'geojson' , data : 'http://localhost:3000/bicingjson/' }); //agregamos la capa con su estilo al mapa map . addLayer ({ \"id\" : \"bicing\" , \"type\" : \"circle\" , \"source\" : \"bicing-source\" , \"paint\" : { \"circle-radius\" : 6 , \"circle-color\" : \"#B42222\" }, }); window . setInterval ( function () { map . getSource ( 'bicing-source' ). setData ( 'http://localhost:3000/bicingjson/' ); }, 3000 ); }); </ script > </ body > </ html > Recargar la aplicaci\u00f3n y veremos los puntos de las estaciones de bicing. Si vamos a la pesta\u00f1a de red (network) en la consola de desarrollador del navegador podremos ver que cada 3 segundos se hace una llamada a nuestro proxy. Cambiar el estilo de la capa de estaciones de bicing. Para representar las estaciones con un estilo basado en los valores de algunos de sus atributos utilizar el data-driven style siguiendo la especificaci\u00f3n de estilo de Mapbox 7 . Modificar la propiedad paint de la capa y escribir <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime VectorTiles </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js' ></ script > < link href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css' rel = 'stylesheet' /> < style > body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } </ style > </ head > < body > < div id = \"map\" ></ div > < script type = \"text/javascript\" > var map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc.json' , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( \"load\" , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( 'bicing-source' , { type : 'geojson' , data : 'http://localhost:3000/bicingjson/' }); //agregamos la capa con su estilo al mapa map . addLayer ({ \"id\" : \"bicing\" , \"type\" : \"circle\" , \"source\" : \"bicing-source\" , \"paint\" : { \"circle-radius\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ 'get' , 'capacity' ]], 15 , 5 , 50 , 33 ], \"circle-color\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ \"get\" , \"altitude\" ]], 0 , \"hsl(0, 88%, 55%)\" , 50 , \"hsl(108, 93%, 59%)\" ], \"circle-opacity\" : 0.86 }, }); window . setInterval ( function () { map . getSource ( 'bicing-source' ). setData ( 'http://localhost:3000/bicingjson/' ); }, 3000 ); }); </ script > </ body > </ html > Recargar la aplicaci\u00f3n y veremos el cambio de estilo de los puntos de las estaciones de bicing. Crear un popup para ver la informaci\u00f3n de la estaci\u00f3n al seleccionarla. Escribir despu\u00e9s de donde definimos el onload <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime VectorTiles </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js' ></ script > < link href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css' rel = 'stylesheet' /> < style > body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } </ style > </ head > < body > < div id = \"map\" ></ div > < script type = \"text/javascript\" > var map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc.json' , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( \"load\" , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( 'bicing-source' , { type : 'geojson' , data : 'http://localhost:3000/bicingjson/' }); //agregamos la capa con su estilo al mapa map . addLayer ({ \"id\" : \"bicing\" , \"type\" : \"circle\" , \"source\" : \"bicing-source\" , \"paint\" : { \"circle-radius\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ 'get' , 'capacity' ]], 15 , 5 , 50 , 33 ], \"circle-color\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ \"get\" , \"altitude\" ]], 0 , \"hsl(0, 88%, 55%)\" , 50 , \"hsl(108, 93%, 59%)\" ], \"circle-opacity\" : 0.86 }, }); window . setInterval ( function () { map . getSource ( 'bicing-source' ). setData ( 'http://localhost:3000/bicingjson/' ); }, 3000 ); }); map . on ( 'click' , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ 'bicing' ] }); // if the features have no info, return nothing if ( ! features . length ) { return ; } var feature = features [ 0 ]; // Populate the popup and set its coordinates // based on the feature found var popup = new mapboxgl . Popup () . setLngLat ( feature . geometry . coordinates ) . setHTML ( '<div id=\\'popup\\' class=\\'popup\\' style=\\'z-index: 10;\\'> <h5> ' + feature . properties . id + ' </h5>' + '<ul class=\\'list-group\\'>' + '<li class=\\'list-group-item\\'> ' + feature . properties . address + ' </li>' + '<li class=\\'list-group-item\\'> Altitud: ' + feature . properties . altitude + ' </li>' + '<li class=\\'list-group-item\\'> Capacidad: ' + feature . properties . capacity + ' </li></ul></div>' ) . addTo ( map ); }); </ script > </ body > </ html > Recargar la p\u00e1gina y hacer click sobre alguna estaci\u00f3n para ver su informaci\u00f3n en tiempo real. Cambiar el tipo de cursor al pasar sobre una estaci\u00f3n. Escribir despu\u00e9s de donde definimos el onload <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime VectorTiles </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js' ></ script > < link href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css' rel = 'stylesheet' /> < style > body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } </ style > </ head > < body > < div id = \"map\" ></ div > < script type = \"text/javascript\" > var map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc.json' , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( \"load\" , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( 'bicing-source' , { type : 'geojson' , data : 'http://localhost:3000/bicingjson/' }); //agregamos la capa con su estilo al mapa map . addLayer ({ \"id\" : \"bicing\" , \"type\" : \"circle\" , \"source\" : \"bicing-source\" , \"paint\" : { \"circle-radius\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ 'get' , 'capacity' ]], 15 , 5 , 50 , 33 ], \"circle-color\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ \"get\" , \"altitude\" ]], 0 , \"hsl(0, 88%, 55%)\" , 50 , \"hsl(108, 93%, 59%)\" ], \"circle-opacity\" : 0.86 }, }); window . setInterval ( function () { map . getSource ( 'bicing-source' ). setData ( 'http://localhost:3000/bicingjson/' ); }, 3000 ); }); map . on ( 'click' , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ 'bicing' ] }); // if the features have no info, return nothing if ( ! features . length ) { return ; } var feature = features [ 0 ]; // Populate the popup and set its coordinates // based on the feature found var popup = new mapboxgl . Popup () . setLngLat ( feature . geometry . coordinates ) . setHTML ( '<div id=\\'popup\\' class=\\'popup\\' style=\\'z-index: 10;\\'> <h5> ' + feature . properties . id + ' </h5>' + '<ul class=\\'list-group\\'>' + '<li class=\\'list-group-item\\'> ' + feature . properties . streetName + ' </li>' + '<li class=\\'list-group-item\\'> Bikes: ' + feature . properties . bikes + ' </li>' + '<li class=\\'list-group-item\\'> slots: ' + feature . properties . slots + ' </li></ul></div>' ) . addTo ( map ); }); // Use the same approach as above to indicate that the symbols are clickable // by changing the cursor style to 'pointer' map . on ( 'mousemove' , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ 'bicing' ] }); map . getCanvas (). style . cursor = features . length ? 'pointer' : '' ; }); </ script > </ body > </ html > Recargar la p\u00e1gina y pasar sobre alguna estaci\u00f3n para ver el cambio del cursor. mapa de servicio de bicing Modificar el proxy Modificaremos el proxy para agregar los datos de disponibilidad de bicis en las estaciones. Para ello debemos llamar al servicio de estado de estaciones . Al abrir la url del servicio podemos ver que est\u00e1 el listado de las estaciones con una serie de datos. En este caso no hay datos de posici\u00f3n, ni de descripci\u00f3n s\u00f3lo datos del estado de la estaci\u00f3n. Podemos ver que tambi\u00e9n hay un campo con el station_id que nos servir\u00e1 para vincular los datos de estado de la estaci\u00f3n con la estaci\u00f3n correspondiente. Agregar la url del servicio de estado de estaciones var express = require ( 'express' ); var app = express (); var axios = require ( 'axios' ); var serverBicing = 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information' ; var statusBicing = 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_status' ; app . use ( express . static ( 'public' )); app . all ( \"/bicingjson/*\" , function ( req , res ) { console . log ( 'redirecting to Server2' ); var geojson = { type : 'FeatureCollection' , features : [] }; axios . get ( serverBicing ). then ( function ( response ){ // handle success var stations = response . data . data . stations ; for ( var i = stations . length - 1 ; i >= 0 ; i -- ) { var station = stations [ i ]; var feature = { type : 'Feature' , properties : { altitude : station . altitude , id : station . station_id , address : station . address , post_code : station . post_code , capacity : station . capacity }, geometry : { type : 'Point' , coordinates : [ station . lon , station . lat ] } }; geojson . features . push ( feature ); } res . send ( geojson ); }). catch ( function ( error ) { console . log ( error ); res . send ( error ); }); }); app . listen ( 3000 ); Combinar la informaci\u00f3n del estado de estaciones con la informaci\u00f3n de la estaci\u00f3n var express = require ( 'express' ); var app = express (); var axios = require ( 'axios' ); var serverBicing = 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information' ; var statusBicing = 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_status' ; app . use ( express . static ( 'public' )); app . all ( \"/bicingjson/*\" , function ( req , res ) { console . log ( 'redirecting to Server2' ); var geojson = { type : 'FeatureCollection' , features : [] }; Promise . all ([ axios . get ( serverBicing ), axios . get ( statusBicing )]). then (( responses ) => { var stations = responses [ 0 ]. data . data . stations ; for ( var i = stations . length - 1 ; i >= 0 ; i -- ) { var station = stations [ i ]; var feature = { type : 'Feature' , properties : { altitude : station . altitude , id : station . station_id , address : station . address , post_code : station . post_code , capacity : station . capacity }, geometry : { type : 'Point' , coordinates : [ station . lon , station . lat ] } }; geojson . features . push ( feature ); } var status = responses [ 1 ]. data . data . stations ; for ( var i = status . length - 1 ; i >= 0 ; i -- ) { var stat = status [ i ]; for ( var j = geojson . features . length - 1 ; j >= 0 ; j -- ) { var feat = geojson . features [ j ]; if ( feat . properties . id === stat . station_id ) { feat . properties . num_bikes_available = stat . num_bikes_available ; feat . properties . num_bikes_available_types = stat . num_bikes_available_types ; feat . properties . num_docks_available = stat . num_docks_available ; } } } res . send ( geojson ); }). catch ( function ( error ) { console . log ( error ); res . send ( error ); }); }); app . listen ( 3000 ); Modificar el visor Modificaremos el visor para cambiar el color del c\u00edrculo dependiendo del n\u00famere de bicis disponibles en la estaci\u00f3n <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime VectorTiles </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js' ></ script > < link href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css' rel = 'stylesheet' /> < style > body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } </ style > </ head > < body > < div id = \"map\" ></ div > < script type = \"text/javascript\" > var map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc.json' , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( \"load\" , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( 'bicing-source' , { type : 'geojson' , data : 'http://localhost:3000/bicingjson/' }); //agregamos la capa con su estilo al mapa map . addLayer ({ \"id\" : \"bicing\" , \"type\" : \"circle\" , \"source\" : \"bicing-source\" , \"paint\" : { \"circle-radius\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ 'get' , 'capacity' ]], 15 , 5 , 50 , 33 ], \"circle-color\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ \"get\" , \"num_bikes_available\" ]], 0 , \"#ff0000\" , 15 , \"#00ff00\" ], \"circle-opacity\" : 0.86 }, }); window . setInterval ( function () { map . getSource ( 'bicing-source' ). setData ( 'http://localhost:3000/bicingjson/' ); }, 3000 ); }); map . on ( 'click' , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ 'bicing' ] }); // if the features have no info, return nothing if ( ! features . length ) { return ; } var feature = features [ 0 ]; // Populate the popup and set its coordinates // based on the feature found var popup = new mapboxgl . Popup () . setLngLat ( feature . geometry . coordinates ) . setHTML ( '<div id=\\'popup\\' class=\\'popup\\' style=\\'z-index: 10;\\'> <h5> ' + feature . properties . id + ' </h5>' + '<ul class=\\'list-group\\'>' + '<li class=\\'list-group-item\\'> ' + feature . properties . streetName + ' </li>' + '<li class=\\'list-group-item\\'> Bikes: ' + feature . properties . bikes + ' </li>' + '<li class=\\'list-group-item\\'> slots: ' + feature . properties . slots + ' </li></ul></div>' ) . addTo ( map ); }); // Use the same approach as above to indicate that the symbols are clickable // by changing the cursor style to 'pointer' map . on ( 'mousemove' , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ 'bicing' ] }); map . getCanvas (). style . cursor = features . length ? 'pointer' : '' ; }); </ script > </ body > </ html > Ejercicio Cambiar el estilo de los puntos de las estaciones. Cambiar los rangos del tama\u00f1o del punto y cambiar el rango de colores. Referencias https://es.wikipedia.org/wiki/GeoJSON \u21a9 https://www.mapbox.com/mapbox-gl-js/api/ \u21a9 https://nodejs.org/es/ \u21a9 https://es.wikipedia.org/wiki/Servidor_proxy \u21a9 http://expressjs.com/ \u21a9 https://github.com/axios/axios \u21a9 https://www.mapbox.com/mapbox-gl-js/style-spec \u21a9","title":"10. Ejemplo servicio bicing Barcelona (VectorTiles)"},{"location":"10_ejemplo_servicio_bicing_bcn_vt/#ejemplo-servicio-bicing-barcelona-vectortiles","text":"","title":"Ejemplo servicio bicing Barcelona VectorTiles"},{"location":"10_ejemplo_servicio_bicing_bcn_vt/#acceso-al-servicio-de-datos-del-bicing-de-barcelona","text":"En el portal Open data del Ayuntamiento de Barcelona podemos encontrar un dataset (conjunto de datos) que contiene las estaciones del servicio de Bicing Anteriormente ten\u00edan un servicio donde daban toda la informaci\u00f3n de la estaci\u00f3n en tiempo real http://wservice.viabicing.cat/v2/stations . Actualmente lo han separado en dos servicios unos con la informaci\u00f3n de las estaciones (identificador, nombre, coordenadas, etc.) y otro con estado de las estaciones (n\u00famero de bicis disponibles, tipos de bicis, etc) Si bien el Ayuntamiento de Barcelona no ofrece explicitamente el acceso a los datos del Bicing como un servicio, si que tiene un servicio de datos en tiempo real. La url la podemos encontrar presionando el bot\u00f3n de Descargar del recurso json url servicio de bicing Al abrir la url https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information en nuestro navegador observaremos que la respuesta es un archivo json con un conjunto de elementos que tienen las coordenadas de la localizaci\u00f3n de la estaci\u00f3n de bicing, la direcci\u00f3n, la capacidad, etc. Mapa que utiliza este servicio, https://www.bicing.barcelona/es/mapa-de-disponibilidad-provisional El archivo json que retorna el servicio tiene coordenadas pero no es un fichero GeoJSON. 1 Para ver estos datos sobre un mapa crearemos un visor utilizando Mapbox GL JS. 2","title":"Acceso al servicio de datos del Bicing de Barcelona"},{"location":"10_ejemplo_servicio_bicing_bcn_vt/#creacion-de-un-visor","text":"Crer una carpeta con el nombre de visor-bicing-vt . Crer una carpeta con el nombre de public dentro de la carpeta visor-bicing-vt. Crear un archivo con el nombre de index.html dentro de la carpeta public. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime VectorTiles </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js' ></ script > < link href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css' rel = 'stylesheet' /> < style > body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } </ style > </ head > < body > < div id = \"map\" ></ div > < script type = \"text/javascript\" > var map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc.json' , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para ver que carga un mapa centrado en Barcelona.","title":"Creaci\u00f3n de un visor"},{"location":"10_ejemplo_servicio_bicing_bcn_vt/#creacion-del-proxy","text":"Crearemos un proxy que nos permita Instalar Node.js 3 . Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 12.13.1 LTS) y lo instalaremos con las opciones por defecto. Una vez instalado el Node abrir la consola para verificar que se ha instalado correctamente. Escribir node -v Navegar hasta nuestra carpeta visor-bicing-vt y escribir: npm init Con este comando estaremos creando el archivo package.json . Este comando solicita varios elementos como, por ejemplo, el nombre y la versi\u00f3n de la aplicaci\u00f3n. Por ahora, s\u00f3lo hay que pulsar ENTER para aceptar los valores predeterminados. Instalar las dependencias para crear nuestro servicio de proxy 4 . En este caso utilizaremos Express 5 como servidor web y el m\u00f3dulo axios 6 . Instalar el express y guardarlo en la lista de dependencias npm install express --save Instalar el axios y guardarlo en la lista de dependencias npm install axios --save Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que servir\u00e1 de proxy con el servicio de Bicing. Copiar lo siguiente en este archivo. var express = require ( 'express' ); var app = express (); var axios = require ( 'axios' ); var serverBicing = 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information' ; app . use ( express . static ( 'public' )); app . all ( \"/bicingjson/*\" , function ( req , res ) { console . log ( 'redirecting to Server2' ); var geojson = { type : 'FeatureCollection' , features : [] }; axios . get ( serverBicing ). then ( function ( response ){ // handle success var stations = response . data . data . stations ; for ( var i = stations . length - 1 ; i >= 0 ; i -- ) { var station = stations [ i ]; var feature = { type : 'Feature' , properties : { altitude : station . altitude , id : station . station_id , address : station . address , post_code : station . post_code , capacity : station . capacity }, geometry : { type : 'Point' , coordinates : [ station . lon , station . lat ] } }; geojson . features . push ( feature ); } res . send ( geojson ); }). catch ( function ( error ) { console . log ( error ); res . send ( error ); }); }); app . listen ( 3000 ); Probar que nuestro proxy est\u00e1 funcionando, escribiendo: node app.js Abrir la url de nuestro proxy http://localhost:3000/bicingjson/ en el navegador. Escribir en el navegador http://localhost:3000 para ver nuestro mapa.","title":"Creaci\u00f3n del proxy"},{"location":"10_ejemplo_servicio_bicing_bcn_vt/#modificar-el-visor","text":"Modificar el archivo index.html para que llame al proxy que hemos creado y cargue la capa de bicing. Escribir justo despues de la declaraci\u00f3n del mapa. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime VectorTiles </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js' ></ script > < link href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css' rel = 'stylesheet' /> < style > body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } </ style > </ head > < body > < div id = \"map\" ></ div > < script type = \"text/javascript\" > var map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc.json' , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( \"load\" , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( 'bicing-source' , { type : 'geojson' , data : 'http://localhost:3000/bicingjson/' }); //agregamos la capa con su estilo al mapa map . addLayer ({ \"id\" : \"bicing\" , \"type\" : \"circle\" , \"source\" : \"bicing-source\" , \"paint\" : { \"circle-radius\" : 6 , \"circle-color\" : \"#B42222\" }, }); }); </ script > </ body > </ html > Recargar la aplicaci\u00f3n y veremos los puntos de las estaciones de bicing. Actualizar los datos del mapa. Para actualizar los datos del mapa se debe recargar la capa de estaciones de bicing cada X tiempo. Para recargar la capa cada 3 segundos escribir los siguiente al final de la funci\u00f3n que se llama al terminar de cargar el estilo del mapa. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime VectorTiles </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js' ></ script > < link href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css' rel = 'stylesheet' /> < style > body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } </ style > </ head > < body > < div id = \"map\" ></ div > < script type = \"text/javascript\" > var map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc.json' , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( \"load\" , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( 'bicing-source' , { type : 'geojson' , data : 'http://localhost:3000/bicingjson/' }); //agregamos la capa con su estilo al mapa map . addLayer ({ \"id\" : \"bicing\" , \"type\" : \"circle\" , \"source\" : \"bicing-source\" , \"paint\" : { \"circle-radius\" : 6 , \"circle-color\" : \"#B42222\" }, }); window . setInterval ( function () { map . getSource ( 'bicing-source' ). setData ( 'http://localhost:3000/bicingjson/' ); }, 3000 ); }); </ script > </ body > </ html > Recargar la aplicaci\u00f3n y veremos los puntos de las estaciones de bicing. Si vamos a la pesta\u00f1a de red (network) en la consola de desarrollador del navegador podremos ver que cada 3 segundos se hace una llamada a nuestro proxy. Cambiar el estilo de la capa de estaciones de bicing. Para representar las estaciones con un estilo basado en los valores de algunos de sus atributos utilizar el data-driven style siguiendo la especificaci\u00f3n de estilo de Mapbox 7 . Modificar la propiedad paint de la capa y escribir <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime VectorTiles </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js' ></ script > < link href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css' rel = 'stylesheet' /> < style > body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } </ style > </ head > < body > < div id = \"map\" ></ div > < script type = \"text/javascript\" > var map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc.json' , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( \"load\" , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( 'bicing-source' , { type : 'geojson' , data : 'http://localhost:3000/bicingjson/' }); //agregamos la capa con su estilo al mapa map . addLayer ({ \"id\" : \"bicing\" , \"type\" : \"circle\" , \"source\" : \"bicing-source\" , \"paint\" : { \"circle-radius\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ 'get' , 'capacity' ]], 15 , 5 , 50 , 33 ], \"circle-color\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ \"get\" , \"altitude\" ]], 0 , \"hsl(0, 88%, 55%)\" , 50 , \"hsl(108, 93%, 59%)\" ], \"circle-opacity\" : 0.86 }, }); window . setInterval ( function () { map . getSource ( 'bicing-source' ). setData ( 'http://localhost:3000/bicingjson/' ); }, 3000 ); }); </ script > </ body > </ html > Recargar la aplicaci\u00f3n y veremos el cambio de estilo de los puntos de las estaciones de bicing. Crear un popup para ver la informaci\u00f3n de la estaci\u00f3n al seleccionarla. Escribir despu\u00e9s de donde definimos el onload <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime VectorTiles </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js' ></ script > < link href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css' rel = 'stylesheet' /> < style > body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } </ style > </ head > < body > < div id = \"map\" ></ div > < script type = \"text/javascript\" > var map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc.json' , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( \"load\" , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( 'bicing-source' , { type : 'geojson' , data : 'http://localhost:3000/bicingjson/' }); //agregamos la capa con su estilo al mapa map . addLayer ({ \"id\" : \"bicing\" , \"type\" : \"circle\" , \"source\" : \"bicing-source\" , \"paint\" : { \"circle-radius\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ 'get' , 'capacity' ]], 15 , 5 , 50 , 33 ], \"circle-color\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ \"get\" , \"altitude\" ]], 0 , \"hsl(0, 88%, 55%)\" , 50 , \"hsl(108, 93%, 59%)\" ], \"circle-opacity\" : 0.86 }, }); window . setInterval ( function () { map . getSource ( 'bicing-source' ). setData ( 'http://localhost:3000/bicingjson/' ); }, 3000 ); }); map . on ( 'click' , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ 'bicing' ] }); // if the features have no info, return nothing if ( ! features . length ) { return ; } var feature = features [ 0 ]; // Populate the popup and set its coordinates // based on the feature found var popup = new mapboxgl . Popup () . setLngLat ( feature . geometry . coordinates ) . setHTML ( '<div id=\\'popup\\' class=\\'popup\\' style=\\'z-index: 10;\\'> <h5> ' + feature . properties . id + ' </h5>' + '<ul class=\\'list-group\\'>' + '<li class=\\'list-group-item\\'> ' + feature . properties . address + ' </li>' + '<li class=\\'list-group-item\\'> Altitud: ' + feature . properties . altitude + ' </li>' + '<li class=\\'list-group-item\\'> Capacidad: ' + feature . properties . capacity + ' </li></ul></div>' ) . addTo ( map ); }); </ script > </ body > </ html > Recargar la p\u00e1gina y hacer click sobre alguna estaci\u00f3n para ver su informaci\u00f3n en tiempo real. Cambiar el tipo de cursor al pasar sobre una estaci\u00f3n. Escribir despu\u00e9s de donde definimos el onload <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime VectorTiles </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js' ></ script > < link href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css' rel = 'stylesheet' /> < style > body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } </ style > </ head > < body > < div id = \"map\" ></ div > < script type = \"text/javascript\" > var map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc.json' , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( \"load\" , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( 'bicing-source' , { type : 'geojson' , data : 'http://localhost:3000/bicingjson/' }); //agregamos la capa con su estilo al mapa map . addLayer ({ \"id\" : \"bicing\" , \"type\" : \"circle\" , \"source\" : \"bicing-source\" , \"paint\" : { \"circle-radius\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ 'get' , 'capacity' ]], 15 , 5 , 50 , 33 ], \"circle-color\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ \"get\" , \"altitude\" ]], 0 , \"hsl(0, 88%, 55%)\" , 50 , \"hsl(108, 93%, 59%)\" ], \"circle-opacity\" : 0.86 }, }); window . setInterval ( function () { map . getSource ( 'bicing-source' ). setData ( 'http://localhost:3000/bicingjson/' ); }, 3000 ); }); map . on ( 'click' , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ 'bicing' ] }); // if the features have no info, return nothing if ( ! features . length ) { return ; } var feature = features [ 0 ]; // Populate the popup and set its coordinates // based on the feature found var popup = new mapboxgl . Popup () . setLngLat ( feature . geometry . coordinates ) . setHTML ( '<div id=\\'popup\\' class=\\'popup\\' style=\\'z-index: 10;\\'> <h5> ' + feature . properties . id + ' </h5>' + '<ul class=\\'list-group\\'>' + '<li class=\\'list-group-item\\'> ' + feature . properties . streetName + ' </li>' + '<li class=\\'list-group-item\\'> Bikes: ' + feature . properties . bikes + ' </li>' + '<li class=\\'list-group-item\\'> slots: ' + feature . properties . slots + ' </li></ul></div>' ) . addTo ( map ); }); // Use the same approach as above to indicate that the symbols are clickable // by changing the cursor style to 'pointer' map . on ( 'mousemove' , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ 'bicing' ] }); map . getCanvas (). style . cursor = features . length ? 'pointer' : '' ; }); </ script > </ body > </ html > Recargar la p\u00e1gina y pasar sobre alguna estaci\u00f3n para ver el cambio del cursor. mapa de servicio de bicing","title":"Modificar el visor"},{"location":"10_ejemplo_servicio_bicing_bcn_vt/#modificar-el-proxy","text":"Modificaremos el proxy para agregar los datos de disponibilidad de bicis en las estaciones. Para ello debemos llamar al servicio de estado de estaciones . Al abrir la url del servicio podemos ver que est\u00e1 el listado de las estaciones con una serie de datos. En este caso no hay datos de posici\u00f3n, ni de descripci\u00f3n s\u00f3lo datos del estado de la estaci\u00f3n. Podemos ver que tambi\u00e9n hay un campo con el station_id que nos servir\u00e1 para vincular los datos de estado de la estaci\u00f3n con la estaci\u00f3n correspondiente. Agregar la url del servicio de estado de estaciones var express = require ( 'express' ); var app = express (); var axios = require ( 'axios' ); var serverBicing = 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information' ; var statusBicing = 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_status' ; app . use ( express . static ( 'public' )); app . all ( \"/bicingjson/*\" , function ( req , res ) { console . log ( 'redirecting to Server2' ); var geojson = { type : 'FeatureCollection' , features : [] }; axios . get ( serverBicing ). then ( function ( response ){ // handle success var stations = response . data . data . stations ; for ( var i = stations . length - 1 ; i >= 0 ; i -- ) { var station = stations [ i ]; var feature = { type : 'Feature' , properties : { altitude : station . altitude , id : station . station_id , address : station . address , post_code : station . post_code , capacity : station . capacity }, geometry : { type : 'Point' , coordinates : [ station . lon , station . lat ] } }; geojson . features . push ( feature ); } res . send ( geojson ); }). catch ( function ( error ) { console . log ( error ); res . send ( error ); }); }); app . listen ( 3000 ); Combinar la informaci\u00f3n del estado de estaciones con la informaci\u00f3n de la estaci\u00f3n var express = require ( 'express' ); var app = express (); var axios = require ( 'axios' ); var serverBicing = 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information' ; var statusBicing = 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_status' ; app . use ( express . static ( 'public' )); app . all ( \"/bicingjson/*\" , function ( req , res ) { console . log ( 'redirecting to Server2' ); var geojson = { type : 'FeatureCollection' , features : [] }; Promise . all ([ axios . get ( serverBicing ), axios . get ( statusBicing )]). then (( responses ) => { var stations = responses [ 0 ]. data . data . stations ; for ( var i = stations . length - 1 ; i >= 0 ; i -- ) { var station = stations [ i ]; var feature = { type : 'Feature' , properties : { altitude : station . altitude , id : station . station_id , address : station . address , post_code : station . post_code , capacity : station . capacity }, geometry : { type : 'Point' , coordinates : [ station . lon , station . lat ] } }; geojson . features . push ( feature ); } var status = responses [ 1 ]. data . data . stations ; for ( var i = status . length - 1 ; i >= 0 ; i -- ) { var stat = status [ i ]; for ( var j = geojson . features . length - 1 ; j >= 0 ; j -- ) { var feat = geojson . features [ j ]; if ( feat . properties . id === stat . station_id ) { feat . properties . num_bikes_available = stat . num_bikes_available ; feat . properties . num_bikes_available_types = stat . num_bikes_available_types ; feat . properties . num_docks_available = stat . num_docks_available ; } } } res . send ( geojson ); }). catch ( function ( error ) { console . log ( error ); res . send ( error ); }); }); app . listen ( 3000 );","title":"Modificar el proxy"},{"location":"10_ejemplo_servicio_bicing_bcn_vt/#modificar-el-visor_1","text":"Modificaremos el visor para cambiar el color del c\u00edrculo dependiendo del n\u00famere de bicis disponibles en la estaci\u00f3n <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime VectorTiles </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js' ></ script > < link href = 'https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css' rel = 'stylesheet' /> < style > body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } </ style > </ head > < body > < div id = \"map\" ></ div > < script type = \"text/javascript\" > var map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc.json' , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( \"load\" , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( 'bicing-source' , { type : 'geojson' , data : 'http://localhost:3000/bicingjson/' }); //agregamos la capa con su estilo al mapa map . addLayer ({ \"id\" : \"bicing\" , \"type\" : \"circle\" , \"source\" : \"bicing-source\" , \"paint\" : { \"circle-radius\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ 'get' , 'capacity' ]], 15 , 5 , 50 , 33 ], \"circle-color\" : [ \"interpolate\" , [ \"linear\" ], [ \"to-number\" , [ \"get\" , \"num_bikes_available\" ]], 0 , \"#ff0000\" , 15 , \"#00ff00\" ], \"circle-opacity\" : 0.86 }, }); window . setInterval ( function () { map . getSource ( 'bicing-source' ). setData ( 'http://localhost:3000/bicingjson/' ); }, 3000 ); }); map . on ( 'click' , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ 'bicing' ] }); // if the features have no info, return nothing if ( ! features . length ) { return ; } var feature = features [ 0 ]; // Populate the popup and set its coordinates // based on the feature found var popup = new mapboxgl . Popup () . setLngLat ( feature . geometry . coordinates ) . setHTML ( '<div id=\\'popup\\' class=\\'popup\\' style=\\'z-index: 10;\\'> <h5> ' + feature . properties . id + ' </h5>' + '<ul class=\\'list-group\\'>' + '<li class=\\'list-group-item\\'> ' + feature . properties . streetName + ' </li>' + '<li class=\\'list-group-item\\'> Bikes: ' + feature . properties . bikes + ' </li>' + '<li class=\\'list-group-item\\'> slots: ' + feature . properties . slots + ' </li></ul></div>' ) . addTo ( map ); }); // Use the same approach as above to indicate that the symbols are clickable // by changing the cursor style to 'pointer' map . on ( 'mousemove' , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ 'bicing' ] }); map . getCanvas (). style . cursor = features . length ? 'pointer' : '' ; }); </ script > </ body > </ html > Ejercicio Cambiar el estilo de los puntos de las estaciones. Cambiar los rangos del tama\u00f1o del punto y cambiar el rango de colores.","title":"Modificar el visor"},{"location":"10_ejemplo_servicio_bicing_bcn_vt/#referencias","text":"https://es.wikipedia.org/wiki/GeoJSON \u21a9 https://www.mapbox.com/mapbox-gl-js/api/ \u21a9 https://nodejs.org/es/ \u21a9 https://es.wikipedia.org/wiki/Servidor_proxy \u21a9 http://expressjs.com/ \u21a9 https://github.com/axios/axios \u21a9 https://www.mapbox.com/mapbox-gl-js/style-spec \u21a9","title":"Referencias"},{"location":"11_consideraciones_servicios_realtime_sensores/","text":"Consideraciones sobre servicios de Sensores Problemas frecuentes al trabajar con sensores Existe el estandar SOS de la OGC 1 , pero tiene poca implementaci\u00f3n, debido a que algunos de los fabricantes de sensores utilizan formatos propios, lo que dificulta la integraci\u00f3n de sensores de diferentes provedores en un s\u00f3lo sistema. Datos err\u00f3neos y falsos, ya sea por una mala lectura \u00f3 porque el sensor no est\u00e1 funcionando correctamente. No tenemos forma de saber si el dato es correcto. Ejemplo Ejemplo de buenas pr\u00e1cticas El servicio de datos sobre embalses ofrecidos por la ACA (Agencia Catalana del Agua) http://aca.gencat.cat/ca/laigua/consulta-de-dades/dades-obertes/ . Es un ejemplo de buenas pr\u00e1cticas porque est\u00e1 bien documentado y contiene ejemplos. El acceso es libre y gratuito y tiene salida en un mapa para los ususarios que no sean desarrolladores. Ejemplo de salida http://aca-web.gencat.cat/sdim2/apirest/catalog?componentType=embassament Si bien el formato de salida es un JSON donde tiene una propiedad location no es un formato geogr\u00e1fico que podamos utilizar directamente para poner en un mapa, para ello tendr\u00edamos que hacer una transformaci\u00f3n hacia alg\u00fan formato geogr\u00e1fico tipo GeoJSON. Ejemplo de \"malas\" pr\u00e1cticas El servicio de la DIBA https://www.diba.cat/es/web/smartregion/premis-apps-iot-for-citizens/obtenir-acces-a-sentilo-diba ya que para acceder a los servicios es necesaria una API Key y para obtenerla hay que enviar un email con nuestros datos y el motivo de uso. El simple hecho de tener que registrarse ya es una barrera. El acceso a la aplicaci\u00f3n http://sentilo.diba.cat/sentilo-catalog-web/ no es f\u00e1cil de encontrar y no hay ninguna documentaci\u00f3n. Referencias http://www.opengeospatial.org/standards/sos \u21a9","title":"11. Consideraciones sobre servicios de Sensores"},{"location":"11_consideraciones_servicios_realtime_sensores/#consideraciones-sobre-servicios-de-sensores","text":"","title":"Consideraciones sobre servicios de Sensores"},{"location":"11_consideraciones_servicios_realtime_sensores/#problemas-frecuentes-al-trabajar-con-sensores","text":"Existe el estandar SOS de la OGC 1 , pero tiene poca implementaci\u00f3n, debido a que algunos de los fabricantes de sensores utilizan formatos propios, lo que dificulta la integraci\u00f3n de sensores de diferentes provedores en un s\u00f3lo sistema. Datos err\u00f3neos y falsos, ya sea por una mala lectura \u00f3 porque el sensor no est\u00e1 funcionando correctamente. No tenemos forma de saber si el dato es correcto. Ejemplo","title":"Problemas frecuentes al trabajar con sensores"},{"location":"11_consideraciones_servicios_realtime_sensores/#ejemplo-de-buenas-practicas","text":"El servicio de datos sobre embalses ofrecidos por la ACA (Agencia Catalana del Agua) http://aca.gencat.cat/ca/laigua/consulta-de-dades/dades-obertes/ . Es un ejemplo de buenas pr\u00e1cticas porque est\u00e1 bien documentado y contiene ejemplos. El acceso es libre y gratuito y tiene salida en un mapa para los ususarios que no sean desarrolladores. Ejemplo de salida http://aca-web.gencat.cat/sdim2/apirest/catalog?componentType=embassament Si bien el formato de salida es un JSON donde tiene una propiedad location no es un formato geogr\u00e1fico que podamos utilizar directamente para poner en un mapa, para ello tendr\u00edamos que hacer una transformaci\u00f3n hacia alg\u00fan formato geogr\u00e1fico tipo GeoJSON.","title":"Ejemplo de buenas pr\u00e1cticas"},{"location":"11_consideraciones_servicios_realtime_sensores/#ejemplo-de-malas-practicas","text":"El servicio de la DIBA https://www.diba.cat/es/web/smartregion/premis-apps-iot-for-citizens/obtenir-acces-a-sentilo-diba ya que para acceder a los servicios es necesaria una API Key y para obtenerla hay que enviar un email con nuestros datos y el motivo de uso. El simple hecho de tener que registrarse ya es una barrera. El acceso a la aplicaci\u00f3n http://sentilo.diba.cat/sentilo-catalog-web/ no es f\u00e1cil de encontrar y no hay ninguna documentaci\u00f3n.","title":"Ejemplo de \"malas\" pr\u00e1cticas"},{"location":"11_consideraciones_servicios_realtime_sensores/#referencias","text":"http://www.opengeospatial.org/standards/sos \u21a9","title":"Referencias"},{"location":"12_ejemplo_sensores_port_bcn/","text":"Ejemplo sensores port Barcelona Acceso al servicio de datos de sensores del Port de Barcelona En el portal de sensores del Port de Barcelona 1 podemos encontrar una serie de componentes gr\u00e1ficos o widgets que permiten acceder a los datos de los diferentes sensores SOS 2 . Tambi\u00e9n podemos acceder directamente al servicio http://sensors.portdebarcelona.cat/sos/json si queremos implementar nuestros propios componentes o procesar los datos directamente. En la documentaci\u00f3n del servicio vemos que estos widgets implementan un cliente SOS que soporta la versi\u00f3n 2.0 de est\u00e1ndard. Los widgets necesitan un endpoint en formato JSON. Lo cual resulta no ser un requisito del est\u00e1ndar si no una funcionalidad opcional que proporciona la implementaci\u00f3n del servidor SOS de 52 north en su versi\u00f3n 4.0.0 o superior. La ventaja de utilizar los widgets es que proporcionan una capa de abstracci\u00f3n que hace el \"trabajo sucio\" y evita trabajar directamente con el servicio. La implementaci\u00f3n de los widgets es open source 3 y extensible, lo que permite poder desarrollar nuestros propios widgets. Creaci\u00f3n de un visor Para crear un visor de mapas utilizaremos el widget de Mapa 4 que est\u00e1 basado en la librer\u00eda de mapas Leaflet. 5 Crear una carpeta con el nombre de visor-port . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [], \"properties\" : [] }, document . getElementById ( 'map-container' )); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para confirmar que carga un mapa del mundo. Este mapa no contiene ninguna informaci\u00f3n. Agregar algunas features (sensores) en la matriz de features. Para obtenter las features tendr\u00edamos que hacer una petici\u00f3n de GetFeatureOfInterest 6 . Para agregar algunos elementos en el mapa reemplazar la propiedad features por lo siguiente: <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [] }, document . getElementById ( 'map-container' )); </ script > </ body > </ html > Recargar el mapa y confirmar que aparecen unos puntos en el puerto de Barcelona. Agregar propiedades a los sensores. Ya tenemos algunos sensores en nuestro mapa pero no tenemos datos asociados a los mismos. Para ello indicar que propiedades queremos observar. Esto lo indicaremos en la matriz de properties de nuestro mapa. Agregar las siguientes propiedades para ver la temperatura <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], }, document . getElementById ( 'map-container' )); </ script > </ body > </ html > Recargar el mapa y pasar el cursor sobre alg\u00fan elemento para ver que se despliega un panel con las temperaturas. Combinar varios widgets en la aplicaci\u00f3n. Mostar un popup con un widget al hacer click sobre un elemento. Utilizar la opci\u00f3n popup_widget del mapa. Cargar un widget de tipo serie de tiempo con las temperaturas. Escribir justo debajo de las propertities lo siguiente: <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"popup_widget\" : { \"name\" : \"timechart\" , \"title\" : \"Temperatures\" , \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"time_start\" : \"2015-09-03T05:05:40Z\" , \"time_end\" : \"2015-09-03T08:05:40Z\" } }, document . getElementById ( 'map-container' )); </ script > </ body > </ html > Recargar la p\u00e1gina y clicar sobre un elemento para ver un popup con la serie temporal de las temperaturas. Mostrar un widget en un div fuera del mapa al hacer click sobre un elemento. Escribir justo debajo de donde declaramos el div del mapa lo siguiente <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map-container\" ></ div > < div id = \"info-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"popup_widget\" : { \"name\" : \"timechart\" , \"title\" : \"Temperatures\" , \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"time_start\" : \"2015-09-03T05:05:40Z\" , \"time_end\" : \"2015-09-03T08:05:40Z\" } }, document . getElementById ( 'map-container' )); </ script > </ body > </ html > Crear un nuevo estilo para este div. Escibir en nuestro apartado de estilo css <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : \"200px\" ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } </ style > </ head > < body > < div id = \"map-container\" ></ div > < div id = \"info-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"popup_widget\" : { \"name\" : \"timechart\" , \"title\" : \"Temperatures\" , \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"time_start\" : \"2015-09-03T05:05:40Z\" , \"time_end\" : \"2015-09-03T08:05:40Z\" } }, document . getElementById ( 'map-container' )); </ script > </ body > </ html > Quitar la opci\u00f3n de popup_widget del mapa. <!DOCTYPE html> <html> <head> <title>Sensores Port de Barcelona</title> <style> #map-container { position: absolute; top: 0; left: 0; bottom: 0; right: 0; } #info-container { position: absolute; top: 0; left: 0; width: \"200px\"; z-index: 9000; background-color: rgba(255,255,255,0.7); } </style> </head> <body> <div id=\"map-container\"></div> <div id=\"info-container\"></div> <script src=\"http://sensors.fonts.cat/js/SensorWidgets.js\"></script> <script type=\"text/javascript\"> SensorWidget('map', { \"service\": \"http://sensors.portdebarcelona.cat/sos/json\", \"offering\": \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\", \"swap_axis\": true, \"features\": [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\", \"http://sensors.portdebarcelona.cat/def/weather/features#02\", \"http://sensors.portdebarcelona.cat/def/weather/features#03\", \"http://sensors.portdebarcelona.cat/def/weather/features#P4\", \"http://sensors.portdebarcelona.cat/def/weather/features#10\", \"http://sensors.portdebarcelona.cat/def/weather/features#P5\", \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\": [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\", \"http://sensors.portdebarcelona.cat/def/weather/properties#32\", \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], - \"popup_widget\": { - \"name\": \"timechart\", - \"title\": \"Temperatures\", - \"properties\": [ - \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\", - \"http://sensors.portdebarcelona.cat/def/weather/properties#32\", - \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" - ], - \"time_start\": \"2015-09-03T05:05:40Z\", - \"time_end\": \"2015-09-03T08:05:40Z\" - } }, document.getElementById('map-container')); </script> </body> </html> Utilizar la opci\u00f3n de on_click del mapa. Esta opci\u00f3n permite definir una funci\u00f3n que se ejecuta al hacer click sobre un elemento del mapa. Copiar debajo de las properties lo siguiente: <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : \"200px\" ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } </ style > </ head > < body > < div id = \"map-container\" ></ div > < div id = \"info-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"on_click\" : function ( el ){ console . log ( el ); } }, document . getElementById ( 'map-container' )); </ script > </ body > </ html > Recargar la p\u00e1gina y clicar sobre un elemento. Abrir la consola de desarrollador para ver que aparece la informaci\u00f3n del elemento clicado. Crear una funci\u00f3n que recibe como par\u00e1metro el id de un elemento y crea un widget de tipo term\u00f3metro. Escribir antes de donde se cierra el tag de script <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : \"200px\" ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } </ style > </ head > < body > < div id = \"map-container\" ></ div > < div id = \"info-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"on_click\" : function ( el ){ console . log ( el ); } }, document . getElementById ( 'map-container' )); function showTermometro ( feature_id ){ SensorWidget ( 'thermometer' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"feature\" : feature_id , \"property\" : \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"refresh_interval\" : 120 , \"footnote\" : \"A sample footnote for Thermometer widget\" }, document . getElementById ( 'info-container' )); } </ script > </ body > </ html > Llamar a la nueva funci\u00f3n showTermometro dentro de la funci\u00f3n del on_click . Escribir luego del console.log <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : \"200px\" ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } </ style > </ head > < body > < div id = \"map-container\" ></ div > < div id = \"info-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"on_click\" : function ( el ){ console . log ( el ); showTermometro ( el . feature . id ); } }, document . getElementById ( 'map-container' )); function showTermometro ( feature_id ){ SensorWidget ( 'thermometer' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"feature\" : feature_id , \"property\" : \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"refresh_interval\" : 120 , \"footnote\" : \"A sample footnote for Thermometer widget\" }, document . getElementById ( 'info-container' )); } </ script > </ body > </ html > Recargar el mapa y clicar sobre un elemento para ver como se desplega el widget del term\u00f3metro con la temperatura actual. mapa de sensores del port de barcelona Ejercicio Crear una funci\u00f3n para mostrar el widget de man\u00f3metro en lugar del term\u00f3metro. Llamar esta nueva funci\u00f3n al hacer click sobre un sensor. En el siguiente enlace se pueden ver las diferentes opciones http://sensors.portdebarcelona.cat/?lang=es#gauge Referencias http://sensors.portdebarcelona.cat/?lang=es \u21a9 http://sensor-widgets.readthedocs.io/es/latest/sos.html \u21a9 https://github.com/oscarfonts/sensor-widgets \u21a9 http://sensor-widgets.readthedocs.io/es/latest/widgets.html#mapa-map \u21a9 http://leafletjs.com/ \u21a9 http://sensor-widgets.readthedocs.io/es/latest/sos.html#getfeatureofinterest \u21a9","title":"Ejemplo sensores port Barcelona"},{"location":"12_ejemplo_sensores_port_bcn/#ejemplo-sensores-port-barcelona","text":"","title":"Ejemplo sensores port Barcelona"},{"location":"12_ejemplo_sensores_port_bcn/#acceso-al-servicio-de-datos-de-sensores-del-port-de-barcelona","text":"En el portal de sensores del Port de Barcelona 1 podemos encontrar una serie de componentes gr\u00e1ficos o widgets que permiten acceder a los datos de los diferentes sensores SOS 2 . Tambi\u00e9n podemos acceder directamente al servicio http://sensors.portdebarcelona.cat/sos/json si queremos implementar nuestros propios componentes o procesar los datos directamente. En la documentaci\u00f3n del servicio vemos que estos widgets implementan un cliente SOS que soporta la versi\u00f3n 2.0 de est\u00e1ndard. Los widgets necesitan un endpoint en formato JSON. Lo cual resulta no ser un requisito del est\u00e1ndar si no una funcionalidad opcional que proporciona la implementaci\u00f3n del servidor SOS de 52 north en su versi\u00f3n 4.0.0 o superior. La ventaja de utilizar los widgets es que proporcionan una capa de abstracci\u00f3n que hace el \"trabajo sucio\" y evita trabajar directamente con el servicio. La implementaci\u00f3n de los widgets es open source 3 y extensible, lo que permite poder desarrollar nuestros propios widgets.","title":"Acceso al servicio de datos de sensores del Port de Barcelona"},{"location":"12_ejemplo_sensores_port_bcn/#creacion-de-un-visor","text":"Para crear un visor de mapas utilizaremos el widget de Mapa 4 que est\u00e1 basado en la librer\u00eda de mapas Leaflet. 5 Crear una carpeta con el nombre de visor-port . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [], \"properties\" : [] }, document . getElementById ( 'map-container' )); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para confirmar que carga un mapa del mundo. Este mapa no contiene ninguna informaci\u00f3n. Agregar algunas features (sensores) en la matriz de features. Para obtenter las features tendr\u00edamos que hacer una petici\u00f3n de GetFeatureOfInterest 6 . Para agregar algunos elementos en el mapa reemplazar la propiedad features por lo siguiente: <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [] }, document . getElementById ( 'map-container' )); </ script > </ body > </ html > Recargar el mapa y confirmar que aparecen unos puntos en el puerto de Barcelona. Agregar propiedades a los sensores. Ya tenemos algunos sensores en nuestro mapa pero no tenemos datos asociados a los mismos. Para ello indicar que propiedades queremos observar. Esto lo indicaremos en la matriz de properties de nuestro mapa. Agregar las siguientes propiedades para ver la temperatura <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], }, document . getElementById ( 'map-container' )); </ script > </ body > </ html > Recargar el mapa y pasar el cursor sobre alg\u00fan elemento para ver que se despliega un panel con las temperaturas. Combinar varios widgets en la aplicaci\u00f3n. Mostar un popup con un widget al hacer click sobre un elemento. Utilizar la opci\u00f3n popup_widget del mapa. Cargar un widget de tipo serie de tiempo con las temperaturas. Escribir justo debajo de las propertities lo siguiente: <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"popup_widget\" : { \"name\" : \"timechart\" , \"title\" : \"Temperatures\" , \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"time_start\" : \"2015-09-03T05:05:40Z\" , \"time_end\" : \"2015-09-03T08:05:40Z\" } }, document . getElementById ( 'map-container' )); </ script > </ body > </ html > Recargar la p\u00e1gina y clicar sobre un elemento para ver un popup con la serie temporal de las temperaturas. Mostrar un widget en un div fuera del mapa al hacer click sobre un elemento. Escribir justo debajo de donde declaramos el div del mapa lo siguiente <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map-container\" ></ div > < div id = \"info-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"popup_widget\" : { \"name\" : \"timechart\" , \"title\" : \"Temperatures\" , \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"time_start\" : \"2015-09-03T05:05:40Z\" , \"time_end\" : \"2015-09-03T08:05:40Z\" } }, document . getElementById ( 'map-container' )); </ script > </ body > </ html > Crear un nuevo estilo para este div. Escibir en nuestro apartado de estilo css <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : \"200px\" ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } </ style > </ head > < body > < div id = \"map-container\" ></ div > < div id = \"info-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"popup_widget\" : { \"name\" : \"timechart\" , \"title\" : \"Temperatures\" , \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"time_start\" : \"2015-09-03T05:05:40Z\" , \"time_end\" : \"2015-09-03T08:05:40Z\" } }, document . getElementById ( 'map-container' )); </ script > </ body > </ html > Quitar la opci\u00f3n de popup_widget del mapa. <!DOCTYPE html> <html> <head> <title>Sensores Port de Barcelona</title> <style> #map-container { position: absolute; top: 0; left: 0; bottom: 0; right: 0; } #info-container { position: absolute; top: 0; left: 0; width: \"200px\"; z-index: 9000; background-color: rgba(255,255,255,0.7); } </style> </head> <body> <div id=\"map-container\"></div> <div id=\"info-container\"></div> <script src=\"http://sensors.fonts.cat/js/SensorWidgets.js\"></script> <script type=\"text/javascript\"> SensorWidget('map', { \"service\": \"http://sensors.portdebarcelona.cat/sos/json\", \"offering\": \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\", \"swap_axis\": true, \"features\": [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\", \"http://sensors.portdebarcelona.cat/def/weather/features#02\", \"http://sensors.portdebarcelona.cat/def/weather/features#03\", \"http://sensors.portdebarcelona.cat/def/weather/features#P4\", \"http://sensors.portdebarcelona.cat/def/weather/features#10\", \"http://sensors.portdebarcelona.cat/def/weather/features#P5\", \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\": [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\", \"http://sensors.portdebarcelona.cat/def/weather/properties#32\", \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], - \"popup_widget\": { - \"name\": \"timechart\", - \"title\": \"Temperatures\", - \"properties\": [ - \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\", - \"http://sensors.portdebarcelona.cat/def/weather/properties#32\", - \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" - ], - \"time_start\": \"2015-09-03T05:05:40Z\", - \"time_end\": \"2015-09-03T08:05:40Z\" - } }, document.getElementById('map-container')); </script> </body> </html> Utilizar la opci\u00f3n de on_click del mapa. Esta opci\u00f3n permite definir una funci\u00f3n que se ejecuta al hacer click sobre un elemento del mapa. Copiar debajo de las properties lo siguiente: <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : \"200px\" ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } </ style > </ head > < body > < div id = \"map-container\" ></ div > < div id = \"info-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"on_click\" : function ( el ){ console . log ( el ); } }, document . getElementById ( 'map-container' )); </ script > </ body > </ html > Recargar la p\u00e1gina y clicar sobre un elemento. Abrir la consola de desarrollador para ver que aparece la informaci\u00f3n del elemento clicado. Crear una funci\u00f3n que recibe como par\u00e1metro el id de un elemento y crea un widget de tipo term\u00f3metro. Escribir antes de donde se cierra el tag de script <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : \"200px\" ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } </ style > </ head > < body > < div id = \"map-container\" ></ div > < div id = \"info-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"on_click\" : function ( el ){ console . log ( el ); } }, document . getElementById ( 'map-container' )); function showTermometro ( feature_id ){ SensorWidget ( 'thermometer' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"feature\" : feature_id , \"property\" : \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"refresh_interval\" : 120 , \"footnote\" : \"A sample footnote for Thermometer widget\" }, document . getElementById ( 'info-container' )); } </ script > </ body > </ html > Llamar a la nueva funci\u00f3n showTermometro dentro de la funci\u00f3n del on_click . Escribir luego del console.log <!DOCTYPE html> < html > < head > < title > Sensores Port de Barcelona </ title > < style > # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : \"200px\" ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } </ style > </ head > < body > < div id = \"map-container\" ></ div > < div id = \"info-container\" ></ div > < script src = \"http://sensors.fonts.cat/js/SensorWidgets.js\" ></ script > < script type = \"text/javascript\" > SensorWidget ( 'map' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"swap_axis\" : true , \"features\" : [ \"http://sensors.portdebarcelona.cat/def/weather/features#01\" , \"http://sensors.portdebarcelona.cat/def/weather/features#02\" , \"http://sensors.portdebarcelona.cat/def/weather/features#03\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P4\" , \"http://sensors.portdebarcelona.cat/def/weather/features#10\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P5\" , \"http://sensors.portdebarcelona.cat/def/weather/features#P6\" ], \"properties\" : [ \"http://sensors.portdebarcelona.cat/def/weather/properties#32M\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"http://sensors.portdebarcelona.cat/def/weather/properties#32N\" ], \"on_click\" : function ( el ){ console . log ( el ); showTermometro ( el . feature . id ); } }, document . getElementById ( 'map-container' )); function showTermometro ( feature_id ){ SensorWidget ( 'thermometer' , { \"service\" : \"http://sensors.portdebarcelona.cat/sos/json\" , \"offering\" : \"http://sensors.portdebarcelona.cat/def/weather/offerings#30m\" , \"feature\" : feature_id , \"property\" : \"http://sensors.portdebarcelona.cat/def/weather/properties#32\" , \"refresh_interval\" : 120 , \"footnote\" : \"A sample footnote for Thermometer widget\" }, document . getElementById ( 'info-container' )); } </ script > </ body > </ html > Recargar el mapa y clicar sobre un elemento para ver como se desplega el widget del term\u00f3metro con la temperatura actual. mapa de sensores del port de barcelona Ejercicio Crear una funci\u00f3n para mostrar el widget de man\u00f3metro en lugar del term\u00f3metro. Llamar esta nueva funci\u00f3n al hacer click sobre un sensor. En el siguiente enlace se pueden ver las diferentes opciones http://sensors.portdebarcelona.cat/?lang=es#gauge","title":"Creaci\u00f3n de un visor"},{"location":"12_ejemplo_sensores_port_bcn/#referencias","text":"http://sensors.portdebarcelona.cat/?lang=es \u21a9 http://sensor-widgets.readthedocs.io/es/latest/sos.html \u21a9 https://github.com/oscarfonts/sensor-widgets \u21a9 http://sensor-widgets.readthedocs.io/es/latest/widgets.html#mapa-map \u21a9 http://leafletjs.com/ \u21a9 http://sensor-widgets.readthedocs.io/es/latest/sos.html#getfeatureofinterest \u21a9","title":"Referencias"},{"location":"13_ejemplo_sentilo_aca/","text":"Ejemplo Sentilo ACA Acceso al servicio de sensores Sentilo de la ACA En el apartado de consulta de datos de la p\u00e1gina de la ACA 1 encontraremos un subapartado de datos en tiempo real, estos datos los sirven utilizando la plataforma de sensores Sentilo 2 . Los sensores dan informaci\u00f3n sobre los diferentes embalses/pantanos que hay en Catalu\u00f1a. La p\u00e1gina tiene un acceso a un mapa con los datos de los diferentes sensores 3 este mapa es el que ofrece la plataforma de Sentilo y est\u00e1 basado en tecnolog\u00eda de Google Maps. Tambi\u00e9n encontraremos la documentaci\u00f3n 4 para usar la API, lo que nos permite acceder a los datos y generar nuestro propio visor. Creaci\u00f3n de un visor Para crear un visor de mapas utilizaremos la librer\u00eda de mapas Leaflet 5 . Crear una carpeta con el nombre de visor-aca . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para confirmar que se carga un mapa centrado en Catalu\u00f1a. Consultar la documentaci\u00f3n de la API y buscar la url de descripci\u00f3n del servicio que es http://aca-web.gencat.cat/sdim2/apirest/catalog . Abrir esta url en el navegador y confirmar que responde un JSON con la informaci\u00f3n de los diferentes sensores. Revisar el JSON de salida y buscar la propiedad location que indica las coordenadas de la ubicaci\u00f3n del sensor. A pesar de que el JSON tiene coordenadas no es un GeoJSON y por lo tanto no lo podemos pintar autom\u00e1ticamente en nuestro mapa. Cargar este JSON en nuestro mapa utilizando un plugin de Leaflet llamado leaflet-ajax 6 . Este plugin permite hacer una llamada AJAX a un servicio que retorne un JSON y cargar la respuesta en un mapa. Para cargar este plugin debemos agregar lo siguiente justo despu\u00e9s de donde hemos cargado el leaflet <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Utilizar el plugin para agregar la capa al mapa llamando a la API de la ACA. Agregar lo siguiente al final de nuestro c\u00f3digo: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://aca-web.gencat.cat/sdim2/apirest/catalog' ). addTo ( map ); </ script > </ body > </ html > Recargar la p\u00e1gina y confirmar que no aparece ninguna informaci\u00f3n en el mapa. Abrir la consola de desarrollador del navegador (Ctrl+F12) para ver que aparece un mensaje de error XMLHttpRequest cannot load ... ello es debido a que estamos llamando a un servicio que no est\u00e1 en nuestro dominio y por lo tanto da un error de CORS 7 . Para evitar el error de CORS necesitamos un proxy 8 en nuestro servidor web que pueda hacer la llamada al servicio de la ACA y que nos devuelva el contenido. Creaci\u00f3n del proxy Instalar Node.js 9 . Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 12.13.1 LTS) y lo instalaremos con las opciones por defecto. Abrir la consola para verificar que se ha instalado correctamente y escribir node -v Navegar hasta nuestra carpeta visor-aca y escribir: npm init Con este comando estaremos creando el archivo package.json , el cual solicita varios elementos como por ejemplo; el nombre y la versi\u00f3n de la aplicaci\u00f3n. Por ahora, s\u00f3lo hay que pulsar ENTER para aceptar los valores predeterminados. Instalar las dependencias para crear nuestro servicio de proxy. En este caso utilizaremos Express 10 como servidor web y el m\u00f3dulo http-proxy 11 . Instalar el express y guardarlo en la lista de dependencias npm install express --save Instalar el http-proxy y guardarlo en la lista de dependencias npm install http-proxy --save Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que servir\u00e1 de proxy con el servicio de la ACA. Copiar lo siguiente en este archivo. var express = require ( 'express' ); var app = express (); var httpProxy = require ( 'http-proxy' ); var apiProxy = httpProxy . createProxyServer (); var serverAca = 'http://aca-web.gencat.cat/sdim2/apirest/catalog' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . all ( \"/aca/*\" , function ( req , res ) { console . log ( 'redirecting to Server1' ); apiProxy . web ( req , res , { target : serverAca , changeOrigin : false , ignorePath : true }); }); app . listen ( 3000 ); Probar que nuestro proxy est\u00e1 funcionando, escribir: node app.js Abrir la url de nuestro proxy http://localhost:3000/aca/ en el navegador. Escribir en el navegador http://localhost:3000 y ver nuestro mapa. Modificar el mapa Modificar el archivo index.html para que llame al proxy que hemos creado. Cambiar la url de la capa geojsonLayer http://aca-web.gencat.cat/sdim2/apirest/catalog por nuestro proxy http://localhost:3000/aca/ (como el proxy y la aplicaci\u00f3n est\u00e1n en el mismo servidor podr\u00edamos usar /aca/ ). <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' ). addTo ( map ); </ script > </ body > </ html > Recargar la aplicaci\u00f3n con Ctrl+F5 y vemos que el error ha desaparecido. Continuaremos sin ver ning\u00fan dato en nuestro mapa. Esto es debido a lo que ya mencionamos; que la API no retorna un GeoJSON. Por lo tanto tendremos que convertir la respuesta de la API en un GeoJSON. Convertir la respuesta en un GeoJSON utilizando la opci\u00f3n middleware que ofrece la capa GeoJSON.AJAX. Esta opci\u00f3n permite crear una funcion donde se pueden manipular los datos antes de agregarlos al mapa. Crear la funci\u00f3n que transforma los datos de Sentilo de la ACA en un GeoJSON. Escribir al final de nuestro c\u00f3digo <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' ). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : \"FeatureCollection\" , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i >= 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( \" \" ); var feature = { type : 'Feature' , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : 'Point' , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } </ script > </ body > </ html > Modficar la capa geojsonLayer para que el middleware llame a nuestra funci\u00f3n de transformaci\u00f3n. Cambiar el c\u00f3digo de la capa por lo siguiente: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : \"FeatureCollection\" , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i >= 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( \" \" ); var feature = { type : 'Feature' , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : 'Point' , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } </ script > </ body > </ html > Recargar el mapa y ver los puntos de los embalses en el mapa. Mostrar la informaci\u00f3n del punto. Agregar el evento click en cada unos de los puntos. Utilizar la opci\u00f3n de onEachFeature que ofrece las capa GeoJSON de Leaflet. Esta opci\u00f3n permite ejecutar una funci\u00f3n en la creaci\u00f3n de cada uno de los elementos de la capa. Es muy \u00fatil para agregar popups a los elementos \u00f3 para agregar eventos en los elementos. Crear una funci\u00f3n llamada eachFeature que recibe como par\u00e1metros un feature (elemento del GeoJSON) y un layer (elemento de Leaflet). La funci\u00f3n ser\u00eda la siguiente <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : \"FeatureCollection\" , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i >= 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( \" \" ); var feature = { type : 'Feature' , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : 'Point' , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( 'click' , function ( ev ){ console . log ( f ); console . log ( l ); }); } </ script > </ body > </ html > Llamar a la funcion eachFeature en la opci\u00f3n onEachFeature de la capa geojsonLayer. Escribir lo siguiente luego de la opci\u00f3n del middleware <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : \"FeatureCollection\" , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i >= 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( \" \" ); var feature = { type : 'Feature' , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : 'Point' , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( 'click' , function ( ev ){ console . log ( f ); console . log ( l ); }); } </ script > </ body > </ html > Recargar el mapa y hacer click sobre un elemento. En la consola de desarrollador ver que aparecen 2 entradas una que corresponde al feature y otra al layer. Llamar a la API de la ACA para pedir la \u00faltima lectura del sensor y as\u00ed obtener la informaci\u00f3n. La url para obtener la \u00faltima lectura es http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST . . /lastOb/. Por ejemplo: http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST.082687-001/lastOb/ Como estamos llamando una url que est\u00e1 fuera de nuestro dominio tenemos el mismo problema de CORS. Modificar el proxy Modificar nuestro proxy para obtener la informaci\u00f3n de un sensor. Escribir en nuestro archivo app.js justo debajo de la declaraci\u00f3n de la variable serverAca var express = require ( 'express' ); var app = express (); var httpProxy = require ( 'http-proxy' ); var apiProxy = httpProxy . createProxyServer (); var serverAca = 'http://aca-web.gencat.cat/sdim2/apirest/catalog' ; var serverAcaLastOb = 'http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST.' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . all ( \"/aca/*\" , function ( req , res ) { console . log ( 'redirecting to Server1' ); apiProxy . web ( req , res , { target : serverAca , changeOrigin : false , ignorePath : true }); }); app . listen ( 3000 ); Agregar justo antes del app.listen el c\u00f3digo que nos va a ser de proxy. var express = require ( 'express' ); var app = express (); var httpProxy = require ( 'http-proxy' ); var apiProxy = httpProxy . createProxyServer (); var serverAca = 'http://aca-web.gencat.cat/sdim2/apirest/catalog' ; var serverAcaLastOb = 'http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST.' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . all ( \"/aca/*\" , function ( req , res ) { console . log ( 'redirecting to Server1' ); apiProxy . web ( req , res , { target : serverAca , changeOrigin : false , ignorePath : true }); }); app . all ( \"/acalast/:id\" , function ( req , res ){ console . log ( 'redirecting to Server2' + req . params . id ); apiProxy . web ( req , res , { target : serverAcaLastOb + req . params . id + '/lastOb/' , changeOrigin : false , ignorePath : true }); }); app . listen ( 3000 ); Reiniciar nuestro servidor de node, ir a la consola y presionar Crtl+c. Escribir node app.js. Abrir la url http://localhost:3000/acalast/082687-001 en el navegador para comprobar que el proxy est\u00e1 funcionando correctamente. Modificar la funci\u00f3n que se llama al hacer click sobre un elemento del mapa para que llame a nuestro proxy. Esta funci\u00f3n ejecutar\u00e1 una llamada ajax al proxy. Modificar la funci\u00f3n eachFeature con el siguiente c\u00f3digo <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : \"FeatureCollection\" , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i >= 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( \" \" ); var feature = { type : 'Feature' , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : 'Point' , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( 'click' , function ( ev ){ var url = 'http://localhost:3000/acalast/' + f . properties . id ; fetch ( url ) . then ( function ( response ) { response . json (). then ( function ( data ){ console . log ( data ); }); }) . catch ( function ( myJson ) { console . log ( myJson ); }); }); } </ script > </ body > </ html > Recargar el mapa y hacer click sobre un elemento para ver que en la consola del desarrollador aparece un objeto que contiene la respuesa del sensor con la informaci\u00f3n de la \u00faltima lectura. Crear una funci\u00f3n llamada popUp para mostrar esta informaci\u00f3n en el mapa. La funci\u00f3n recibe como par\u00e1metros un layer de Leaflet y unos datos del sensor. Esta funci\u00f3n muestra un popup asociado al elemento con la informaci\u00f3n del sensor. Escribir despu\u00e9s de la funci\u00f3n eachFeature <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : \"FeatureCollection\" , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i >= 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( \" \" ); var feature = { type : 'Feature' , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : 'Point' , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( 'click' , function ( ev ){ var url = 'http://localhost:3000/acalast/' + f . properties . id ; fetch ( url ) . then ( function ( response ) { response . json (). then ( function ( data ){ console . log ( data ); }); }) . catch ( function ( myJson ) { console . log ( myJson ); }); }); } function popUp ( l , data ){ var out = []; out . push ( '<strong>' + data . componentDesc + '</strong>' ); if ( data . sensorLastObservations ){ for ( var i = data . sensorLastObservations . length - 1 ; i >= 0 ; i -- ) { var observ = data . sensorLastObservations [ i ]; out . push ( observ . sensorType + \": \" + observ . value + \" \" + observ . unit ); } } l . unbindPopup (); l . bindPopup ( out . join ( \"<br />\" )). togglePopup (); } </ script > </ body > </ html > Llamar a la funci\u00f3n popUp dentro de la funci\u00f3n que se llama en el success de la llamada ajax. Escribir <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : \"FeatureCollection\" , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i >= 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( \" \" ); var feature = { type : 'Feature' , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : 'Point' , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( 'click' , function ( ev ){ var url = 'http://localhost:3000/acalast/' + f . properties . id ; fetch ( url ) . then ( function ( response ) { response . json (). then ( function ( data ){ popUp ( l , data ); }); }) . catch ( function ( myJson ) { console . log ( myJson ); }); }); } function popUp ( l , data ){ var out = []; out . push ( '<strong>' + data . componentDesc + '</strong>' ); if ( data . sensorLastObservations ){ for ( var i = data . sensorLastObservations . length - 1 ; i >= 0 ; i -- ) { var observ = data . sensorLastObservations [ i ]; out . push ( observ . sensorType + \": \" + observ . value + \" \" + observ . unit ); } } l . unbindPopup (); l . bindPopup ( out . join ( \"<br />\" )). togglePopup (); } </ script > </ body > </ html > Recargar la aplicaci\u00f3n y clicar sobre un elemento. Debe aparecer un popup con la informaci\u00f3n de la \u00faltima lectura del sensor. ejemplo sentilo ACA Referencias http://aca.gencat.cat/ca/laigua/consulta-de-dades/dades-obertes/ \u21a9 http://www.sentilo.io/wordpress/ \u21a9 http://aca-web.gencat.cat/sentilo-catalog-web/component/map \u21a9 http://aca.gencat.cat/web/.content/20_Aigua/08_consulta_de_dades/01_dades_obertes/us_serveis_dades_API_REST.pdf \u21a9 http://leafletjs.com/ \u21a9 https://github.com/calvinmetcalf/leaflet-ajax \u21a9 https://developer.mozilla.org/es/docs/Web/HTTP/Access_control_CORS \u21a9 https://es.wikipedia.org/wiki/Servidor_proxy \u21a9 https://nodejs.org/es/ \u21a9 http://expressjs.com/ \u21a9 https://github.com/nodejitsu/node-http-proxy \u21a9","title":"12. Ejemplo Sentilo ACA"},{"location":"13_ejemplo_sentilo_aca/#ejemplo-sentilo-aca","text":"","title":"Ejemplo Sentilo ACA"},{"location":"13_ejemplo_sentilo_aca/#acceso-al-servicio-de-sensores-sentilo-de-la-aca","text":"En el apartado de consulta de datos de la p\u00e1gina de la ACA 1 encontraremos un subapartado de datos en tiempo real, estos datos los sirven utilizando la plataforma de sensores Sentilo 2 . Los sensores dan informaci\u00f3n sobre los diferentes embalses/pantanos que hay en Catalu\u00f1a. La p\u00e1gina tiene un acceso a un mapa con los datos de los diferentes sensores 3 este mapa es el que ofrece la plataforma de Sentilo y est\u00e1 basado en tecnolog\u00eda de Google Maps. Tambi\u00e9n encontraremos la documentaci\u00f3n 4 para usar la API, lo que nos permite acceder a los datos y generar nuestro propio visor.","title":"Acceso al servicio de sensores Sentilo de la ACA"},{"location":"13_ejemplo_sentilo_aca/#creacion-de-un-visor","text":"Para crear un visor de mapas utilizaremos la librer\u00eda de mapas Leaflet 5 . Crear una carpeta con el nombre de visor-aca . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para confirmar que se carga un mapa centrado en Catalu\u00f1a. Consultar la documentaci\u00f3n de la API y buscar la url de descripci\u00f3n del servicio que es http://aca-web.gencat.cat/sdim2/apirest/catalog . Abrir esta url en el navegador y confirmar que responde un JSON con la informaci\u00f3n de los diferentes sensores. Revisar el JSON de salida y buscar la propiedad location que indica las coordenadas de la ubicaci\u00f3n del sensor. A pesar de que el JSON tiene coordenadas no es un GeoJSON y por lo tanto no lo podemos pintar autom\u00e1ticamente en nuestro mapa. Cargar este JSON en nuestro mapa utilizando un plugin de Leaflet llamado leaflet-ajax 6 . Este plugin permite hacer una llamada AJAX a un servicio que retorne un JSON y cargar la respuesta en un mapa. Para cargar este plugin debemos agregar lo siguiente justo despu\u00e9s de donde hemos cargado el leaflet <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Utilizar el plugin para agregar la capa al mapa llamando a la API de la ACA. Agregar lo siguiente al final de nuestro c\u00f3digo: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://aca-web.gencat.cat/sdim2/apirest/catalog' ). addTo ( map ); </ script > </ body > </ html > Recargar la p\u00e1gina y confirmar que no aparece ninguna informaci\u00f3n en el mapa. Abrir la consola de desarrollador del navegador (Ctrl+F12) para ver que aparece un mensaje de error XMLHttpRequest cannot load ... ello es debido a que estamos llamando a un servicio que no est\u00e1 en nuestro dominio y por lo tanto da un error de CORS 7 . Para evitar el error de CORS necesitamos un proxy 8 en nuestro servidor web que pueda hacer la llamada al servicio de la ACA y que nos devuelva el contenido.","title":"Creaci\u00f3n de un visor"},{"location":"13_ejemplo_sentilo_aca/#creacion-del-proxy","text":"Instalar Node.js 9 . Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 12.13.1 LTS) y lo instalaremos con las opciones por defecto. Abrir la consola para verificar que se ha instalado correctamente y escribir node -v Navegar hasta nuestra carpeta visor-aca y escribir: npm init Con este comando estaremos creando el archivo package.json , el cual solicita varios elementos como por ejemplo; el nombre y la versi\u00f3n de la aplicaci\u00f3n. Por ahora, s\u00f3lo hay que pulsar ENTER para aceptar los valores predeterminados. Instalar las dependencias para crear nuestro servicio de proxy. En este caso utilizaremos Express 10 como servidor web y el m\u00f3dulo http-proxy 11 . Instalar el express y guardarlo en la lista de dependencias npm install express --save Instalar el http-proxy y guardarlo en la lista de dependencias npm install http-proxy --save Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que servir\u00e1 de proxy con el servicio de la ACA. Copiar lo siguiente en este archivo. var express = require ( 'express' ); var app = express (); var httpProxy = require ( 'http-proxy' ); var apiProxy = httpProxy . createProxyServer (); var serverAca = 'http://aca-web.gencat.cat/sdim2/apirest/catalog' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . all ( \"/aca/*\" , function ( req , res ) { console . log ( 'redirecting to Server1' ); apiProxy . web ( req , res , { target : serverAca , changeOrigin : false , ignorePath : true }); }); app . listen ( 3000 ); Probar que nuestro proxy est\u00e1 funcionando, escribir: node app.js Abrir la url de nuestro proxy http://localhost:3000/aca/ en el navegador. Escribir en el navegador http://localhost:3000 y ver nuestro mapa.","title":"Creaci\u00f3n del proxy"},{"location":"13_ejemplo_sentilo_aca/#modificar-el-mapa","text":"Modificar el archivo index.html para que llame al proxy que hemos creado. Cambiar la url de la capa geojsonLayer http://aca-web.gencat.cat/sdim2/apirest/catalog por nuestro proxy http://localhost:3000/aca/ (como el proxy y la aplicaci\u00f3n est\u00e1n en el mismo servidor podr\u00edamos usar /aca/ ). <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' ). addTo ( map ); </ script > </ body > </ html > Recargar la aplicaci\u00f3n con Ctrl+F5 y vemos que el error ha desaparecido. Continuaremos sin ver ning\u00fan dato en nuestro mapa. Esto es debido a lo que ya mencionamos; que la API no retorna un GeoJSON. Por lo tanto tendremos que convertir la respuesta de la API en un GeoJSON. Convertir la respuesta en un GeoJSON utilizando la opci\u00f3n middleware que ofrece la capa GeoJSON.AJAX. Esta opci\u00f3n permite crear una funcion donde se pueden manipular los datos antes de agregarlos al mapa. Crear la funci\u00f3n que transforma los datos de Sentilo de la ACA en un GeoJSON. Escribir al final de nuestro c\u00f3digo <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' ). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : \"FeatureCollection\" , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i >= 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( \" \" ); var feature = { type : 'Feature' , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : 'Point' , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } </ script > </ body > </ html > Modficar la capa geojsonLayer para que el middleware llame a nuestra funci\u00f3n de transformaci\u00f3n. Cambiar el c\u00f3digo de la capa por lo siguiente: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : \"FeatureCollection\" , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i >= 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( \" \" ); var feature = { type : 'Feature' , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : 'Point' , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } </ script > </ body > </ html > Recargar el mapa y ver los puntos de los embalses en el mapa. Mostrar la informaci\u00f3n del punto. Agregar el evento click en cada unos de los puntos. Utilizar la opci\u00f3n de onEachFeature que ofrece las capa GeoJSON de Leaflet. Esta opci\u00f3n permite ejecutar una funci\u00f3n en la creaci\u00f3n de cada uno de los elementos de la capa. Es muy \u00fatil para agregar popups a los elementos \u00f3 para agregar eventos en los elementos. Crear una funci\u00f3n llamada eachFeature que recibe como par\u00e1metros un feature (elemento del GeoJSON) y un layer (elemento de Leaflet). La funci\u00f3n ser\u00eda la siguiente <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : \"FeatureCollection\" , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i >= 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( \" \" ); var feature = { type : 'Feature' , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : 'Point' , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( 'click' , function ( ev ){ console . log ( f ); console . log ( l ); }); } </ script > </ body > </ html > Llamar a la funcion eachFeature en la opci\u00f3n onEachFeature de la capa geojsonLayer. Escribir lo siguiente luego de la opci\u00f3n del middleware <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : \"FeatureCollection\" , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i >= 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( \" \" ); var feature = { type : 'Feature' , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : 'Point' , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( 'click' , function ( ev ){ console . log ( f ); console . log ( l ); }); } </ script > </ body > </ html > Recargar el mapa y hacer click sobre un elemento. En la consola de desarrollador ver que aparecen 2 entradas una que corresponde al feature y otra al layer. Llamar a la API de la ACA para pedir la \u00faltima lectura del sensor y as\u00ed obtener la informaci\u00f3n. La url para obtener la \u00faltima lectura es http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST . . /lastOb/. Por ejemplo: http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST.082687-001/lastOb/ Como estamos llamando una url que est\u00e1 fuera de nuestro dominio tenemos el mismo problema de CORS.","title":"Modificar el mapa"},{"location":"13_ejemplo_sentilo_aca/#modificar-el-proxy","text":"Modificar nuestro proxy para obtener la informaci\u00f3n de un sensor. Escribir en nuestro archivo app.js justo debajo de la declaraci\u00f3n de la variable serverAca var express = require ( 'express' ); var app = express (); var httpProxy = require ( 'http-proxy' ); var apiProxy = httpProxy . createProxyServer (); var serverAca = 'http://aca-web.gencat.cat/sdim2/apirest/catalog' ; var serverAcaLastOb = 'http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST.' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . all ( \"/aca/*\" , function ( req , res ) { console . log ( 'redirecting to Server1' ); apiProxy . web ( req , res , { target : serverAca , changeOrigin : false , ignorePath : true }); }); app . listen ( 3000 ); Agregar justo antes del app.listen el c\u00f3digo que nos va a ser de proxy. var express = require ( 'express' ); var app = express (); var httpProxy = require ( 'http-proxy' ); var apiProxy = httpProxy . createProxyServer (); var serverAca = 'http://aca-web.gencat.cat/sdim2/apirest/catalog' ; var serverAcaLastOb = 'http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST.' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . all ( \"/aca/*\" , function ( req , res ) { console . log ( 'redirecting to Server1' ); apiProxy . web ( req , res , { target : serverAca , changeOrigin : false , ignorePath : true }); }); app . all ( \"/acalast/:id\" , function ( req , res ){ console . log ( 'redirecting to Server2' + req . params . id ); apiProxy . web ( req , res , { target : serverAcaLastOb + req . params . id + '/lastOb/' , changeOrigin : false , ignorePath : true }); }); app . listen ( 3000 ); Reiniciar nuestro servidor de node, ir a la consola y presionar Crtl+c. Escribir node app.js. Abrir la url http://localhost:3000/acalast/082687-001 en el navegador para comprobar que el proxy est\u00e1 funcionando correctamente. Modificar la funci\u00f3n que se llama al hacer click sobre un elemento del mapa para que llame a nuestro proxy. Esta funci\u00f3n ejecutar\u00e1 una llamada ajax al proxy. Modificar la funci\u00f3n eachFeature con el siguiente c\u00f3digo <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : \"FeatureCollection\" , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i >= 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( \" \" ); var feature = { type : 'Feature' , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : 'Point' , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( 'click' , function ( ev ){ var url = 'http://localhost:3000/acalast/' + f . properties . id ; fetch ( url ) . then ( function ( response ) { response . json (). then ( function ( data ){ console . log ( data ); }); }) . catch ( function ( myJson ) { console . log ( myJson ); }); }); } </ script > </ body > </ html > Recargar el mapa y hacer click sobre un elemento para ver que en la consola del desarrollador aparece un objeto que contiene la respuesa del sensor con la informaci\u00f3n de la \u00faltima lectura. Crear una funci\u00f3n llamada popUp para mostrar esta informaci\u00f3n en el mapa. La funci\u00f3n recibe como par\u00e1metros un layer de Leaflet y unos datos del sensor. Esta funci\u00f3n muestra un popup asociado al elemento con la informaci\u00f3n del sensor. Escribir despu\u00e9s de la funci\u00f3n eachFeature <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : \"FeatureCollection\" , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i >= 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( \" \" ); var feature = { type : 'Feature' , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : 'Point' , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( 'click' , function ( ev ){ var url = 'http://localhost:3000/acalast/' + f . properties . id ; fetch ( url ) . then ( function ( response ) { response . json (). then ( function ( data ){ console . log ( data ); }); }) . catch ( function ( myJson ) { console . log ( myJson ); }); }); } function popUp ( l , data ){ var out = []; out . push ( '<strong>' + data . componentDesc + '</strong>' ); if ( data . sensorLastObservations ){ for ( var i = data . sensorLastObservations . length - 1 ; i >= 0 ; i -- ) { var observ = data . sensorLastObservations [ i ]; out . push ( observ . sensorType + \": \" + observ . value + \" \" + observ . unit ); } } l . unbindPopup (); l . bindPopup ( out . join ( \"<br />\" )). togglePopup (); } </ script > </ body > </ html > Llamar a la funci\u00f3n popUp dentro de la funci\u00f3n que se llama en el success de la llamada ajax. Escribir <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Sentilo ACA </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( 'http://localhost:3000/aca/' , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : \"FeatureCollection\" , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i >= 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( \" \" ); var feature = { type : 'Feature' , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : 'Point' , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( 'click' , function ( ev ){ var url = 'http://localhost:3000/acalast/' + f . properties . id ; fetch ( url ) . then ( function ( response ) { response . json (). then ( function ( data ){ popUp ( l , data ); }); }) . catch ( function ( myJson ) { console . log ( myJson ); }); }); } function popUp ( l , data ){ var out = []; out . push ( '<strong>' + data . componentDesc + '</strong>' ); if ( data . sensorLastObservations ){ for ( var i = data . sensorLastObservations . length - 1 ; i >= 0 ; i -- ) { var observ = data . sensorLastObservations [ i ]; out . push ( observ . sensorType + \": \" + observ . value + \" \" + observ . unit ); } } l . unbindPopup (); l . bindPopup ( out . join ( \"<br />\" )). togglePopup (); } </ script > </ body > </ html > Recargar la aplicaci\u00f3n y clicar sobre un elemento. Debe aparecer un popup con la informaci\u00f3n de la \u00faltima lectura del sensor. ejemplo sentilo ACA","title":"Modificar el proxy"},{"location":"13_ejemplo_sentilo_aca/#referencias","text":"http://aca.gencat.cat/ca/laigua/consulta-de-dades/dades-obertes/ \u21a9 http://www.sentilo.io/wordpress/ \u21a9 http://aca-web.gencat.cat/sentilo-catalog-web/component/map \u21a9 http://aca.gencat.cat/web/.content/20_Aigua/08_consulta_de_dades/01_dades_obertes/us_serveis_dades_API_REST.pdf \u21a9 http://leafletjs.com/ \u21a9 https://github.com/calvinmetcalf/leaflet-ajax \u21a9 https://developer.mozilla.org/es/docs/Web/HTTP/Access_control_CORS \u21a9 https://es.wikipedia.org/wiki/Servidor_proxy \u21a9 https://nodejs.org/es/ \u21a9 http://expressjs.com/ \u21a9 https://github.com/nodejitsu/node-http-proxy \u21a9","title":"Referencias"},{"location":"14_geoservicios_realtime/","text":"Geoservicios realtime Muchos de los geoservicios m\u00e1s tradicionales como los WMS o WFS pueden ser Geoservicios realtime, siempre y cuando los datos que se sirvan sean actualizados constantemente. Un ejemplo de esto es el servicio WMS sobre el estado del tr\u00e1fico del Servei Catal\u00e0 de Tr\u00e0nsit http://transit.gencat.cat/ca/informacio_viaria/estat_del_transit/informacio_geografica/estat_del_transit/ Otro ejemplo de geoservicio o m\u00e1s bien geodatos en realtime ser\u00eda la capa de Tr\u00e1fico de Google Maps. https://developers.google.com/maps/documentation/javascript/3.exp/reference?hl=es-419#TrafficLayer Geocodificaci\u00f3n OpenCage Geocoder https://geocoder.opencagedata.com/ Servicios basados en OSM http://wiki.openstreetmap.org/wiki/Search_engines Routing Comparador de servicios basados en OSM http://wiki.openstreetmap.org/wiki/Routing/online_routers Is\u00f3cronas Servicios basados en OSM http://wiki.openstreetmap.org/wiki/Isochrone Servicios varios Servicios de la API de Google Maps https://developers.google.com/maps/web-services/?hl=es-419 Servicios de la API de Here https://developer.here.com/documentation Servicios de la API de MapQuest https://developer.mapquest.com/ Servicios de la API de ArcGis https://developers.arcgis.com/content-and-services/","title":"13. Geoservicios realtime"},{"location":"14_geoservicios_realtime/#geoservicios-realtime","text":"Muchos de los geoservicios m\u00e1s tradicionales como los WMS o WFS pueden ser Geoservicios realtime, siempre y cuando los datos que se sirvan sean actualizados constantemente. Un ejemplo de esto es el servicio WMS sobre el estado del tr\u00e1fico del Servei Catal\u00e0 de Tr\u00e0nsit http://transit.gencat.cat/ca/informacio_viaria/estat_del_transit/informacio_geografica/estat_del_transit/ Otro ejemplo de geoservicio o m\u00e1s bien geodatos en realtime ser\u00eda la capa de Tr\u00e1fico de Google Maps. https://developers.google.com/maps/documentation/javascript/3.exp/reference?hl=es-419#TrafficLayer","title":"Geoservicios realtime"},{"location":"14_geoservicios_realtime/#geocodificacion","text":"OpenCage Geocoder https://geocoder.opencagedata.com/ Servicios basados en OSM http://wiki.openstreetmap.org/wiki/Search_engines","title":"Geocodificaci\u00f3n"},{"location":"14_geoservicios_realtime/#routing","text":"Comparador de servicios basados en OSM http://wiki.openstreetmap.org/wiki/Routing/online_routers","title":"Routing"},{"location":"14_geoservicios_realtime/#isocronas","text":"Servicios basados en OSM http://wiki.openstreetmap.org/wiki/Isochrone","title":"Is\u00f3cronas"},{"location":"14_geoservicios_realtime/#servicios-varios","text":"Servicios de la API de Google Maps https://developers.google.com/maps/web-services/?hl=es-419 Servicios de la API de Here https://developer.here.com/documentation Servicios de la API de MapQuest https://developer.mapquest.com/ Servicios de la API de ArcGis https://developers.arcgis.com/content-and-services/","title":"Servicios varios"},{"location":"15_herramientas_visualizacion_geoservicios/","text":"Herramientas de visualizaci\u00f3n geoservicios Librerias Para la visualizaci\u00f3n de datos geogr\u00e1ficos en el la web existen diversas librerias, entre las principales podemos mencionar: http://leafletjs.com/ https://openlayers.org/ https://d3js.org/ https://developers.google.com/maps/?hl=es-419 https://www.mapbox.com/mapbox-gl-js/api/ Servicios Aparte de la librer\u00edas que permiten desarrollar nuestras propias aplicaciones, tambi\u00e9n podemos encontrar diferentes servicios que os ofrecen la posibilidad de crear o publicar nuestros mapas en la web de una forma r\u00e1pida y sencilla sin tener que programar. Estos servicios permiten hacer algunos an\u00e1lisis sobre nuestros datos. Entre los principales est\u00e1n: https://carto.com/ https://www.mapbox.com/ https://mangomap.com/ https://www.giscloud.com/ https://www.instamaps.cat/","title":"14. Herramientas de visualizaci\u00f3n geoservicios"},{"location":"15_herramientas_visualizacion_geoservicios/#herramientas-de-visualizacion-geoservicios","text":"","title":"Herramientas de visualizaci\u00f3n geoservicios"},{"location":"15_herramientas_visualizacion_geoservicios/#librerias","text":"Para la visualizaci\u00f3n de datos geogr\u00e1ficos en el la web existen diversas librerias, entre las principales podemos mencionar: http://leafletjs.com/ https://openlayers.org/ https://d3js.org/ https://developers.google.com/maps/?hl=es-419 https://www.mapbox.com/mapbox-gl-js/api/","title":"Librerias"},{"location":"15_herramientas_visualizacion_geoservicios/#servicios","text":"Aparte de la librer\u00edas que permiten desarrollar nuestras propias aplicaciones, tambi\u00e9n podemos encontrar diferentes servicios que os ofrecen la posibilidad de crear o publicar nuestros mapas en la web de una forma r\u00e1pida y sencilla sin tener que programar. Estos servicios permiten hacer algunos an\u00e1lisis sobre nuestros datos. Entre los principales est\u00e1n: https://carto.com/ https://www.mapbox.com/ https://mangomap.com/ https://www.giscloud.com/ https://www.instamaps.cat/","title":"Servicios"},{"location":"16_ejemplo_mobility/","text":"Ejemplo Mobility Creaci\u00f3n de un visor que permita el c\u00e1culo de Is\u00f3cronas Algunos de los servicios que ofrecen el c\u00e1lculo de Is\u00f3cronas son: Targomo , ISO4APP , Openrouteservice y Graphhopper Crear una carpeta con el nombre de visor-mobility . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para confirmar que se carga un mapa centrado en Barcelona. Crear una API key. Al revisar la documentaci\u00f3n de la API del servicio de Openrouteservice 1 vemos que es necesario tener una API key para poder utilizarlo. Para crear la API key hay que darse de alta en la p\u00e1gina de Openrouteservice, es un servicio gratuito que tiene unas cuotas de uso. Crear una variable donde guardaremos nuestra API key. Escribir antes de la declaraci\u00f3n de nuestro mapa <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Cargar la respuesta del servicio utilizando el plugin de Leaflet llamado leaflet.reachability 2 . Este plugin permite hacer una llamada al servicio de Openrouteservice y cargar la respuesta en un mapa. Modificar el archivo index.html para cargar el plugin en nuestra aplicaci\u00f3n. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Agregar el control de Is\u00f3cronas al mapa utilizando el plugin. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); </ script > </ body > </ html > Recargar el mapa y comprobar que aparece un el bot\u00f3n del control de Is\u00f3cronas. Abrir la consola del desarrollador y ver las peticiones que se hacen al servicio de Openrouteservice. Modificar la aplicaci\u00f3n para que se haga el c\u00e1lculo de la Is\u00f3crona cuando el usuario haga click en un punto del mapa sin utilizar el plugin. Para ello primero hay que detectar el evento click en el mapa. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); }); </ script > </ body > </ html > Recargar la aplicaci\u00f3n y abrir la consola del desarrollador. Hacer click sobre el mapa y ver que en la consola aparece el objeto del evento click. Inspeccionar este objeto y ver que tiene una propiedad llamada latlng que contine las coordenadas donde se ha hecho el click. Crear una funci\u00f3n que tenga como par\u00e1metro una posici\u00f3n (coordenada lat lon) y genere una url de llamada al servicio de is\u00f3cronas de Openrouteservice para que haga el c\u00e1lculo en la coordenada indicada. Copiar lo siguiente al final de nuestro c\u00f3digo <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Llamar a la funci\u00f3n crearUrlIsochrona cuando se hace click en el mapa. Escribir al final de la funci\u00f3n del click <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Recargar la p\u00e1gina y hacer click sobre el mapa para ver que en la consola aparece una url. Abrir esta url en el navegador para comprobar que responde con un GeoJSON que contiene la is\u00f3crona. Cargar la respuesta GeoJSON del servicio utilizando el plugin de Leaflet llamado leaflet-ajax 3 . Este plugin permite hacer una llamada AJAX a un servicio que retorne un JSON y cargar la respuesta en un mapa. Agregar lo siguiente justo despu\u00e9s de donde cargarmos el leaflet. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > - Agregar la capa geojsonLayer para que se inicialice vac\u00eda sin ning\u00fan elemento. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( '' ). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Utilizar el m\u00e9todo refresh para actualizar la capa geojsonLayer con la url generada al hacer click. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( '' ). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Refrescar el mapa y hacer click sobre el mapa para comprobar que se dibuja una nueva l\u00ednea is\u00f3crona. Pintar la l\u00ednea del color que indicamos. Por defecto se pinta la l\u00ednea de color azul. Esto es debido a que el Leaflet no sabe de que color pintar la l\u00ednea y utiliza el color por defecto. En la respuesta del servicio podemos ver que los elementos que nos retorna tienen unas propiedades (properties) en donde se listan una serie de atributos, uno de ellos es el value que corresponde con el valor del intervalo de tiempo. Lo que debemos hacer es decirle al leaflet que utilice esa propiedad para dar el color a la l\u00ednea. Escribir lo siguiente en nuestra capa geojsonLayer. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( '' ,{ style : function ( geoJsonFeature ){ var color = \"#0000FF\" ; switch ( geoJsonFeature . properties . value ) { case 300 : color = \"#0000FF\" ; break ; case 600 : color = \"#00FF00\" ; break ; case 900 : color = \"#FF0000\" ; break ; case 1200 : color = \"#FF00FF\" ; break ; default : color = \"#0000FF\" ; break ; } return { color : color }; } }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Recargar el mapa y hacer click para confirmar que los pol\u00edgonos se pintan de diferentes colores. Agregar un buscador de direcciones y puntos de inter\u00e9s al mapa Para agregar un buscador utilizaremos el plugin de Leaflet Leaflet.OpenCage.Search 4 desarrollado por OpenCage que permite de una forma f\u00e1cil y r\u00e1pida hacer llamadas al servicio de b\u00fasqueda de OpenCage Geocoder. Para ello hay que obtener un API_KEY en la p\u00e1gina de OpenCage 5 Cargar la librer\u00eda en nuestra aplicaci\u00f3n. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < link rel = \"stylesheet\" href = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( '' ,{ style : function ( geoJsonFeature ){ var color = \"#0000FF\" ; switch ( geoJsonFeature . properties . value ) { case 300 : color = \"#0000FF\" ; break ; case 600 : color = \"#00FF00\" ; break ; case 900 : color = \"#FF0000\" ; break ; case 1200 : color = \"#FF00FF\" ; break ; default : color = \"#0000FF\" ; break ; } return { color : color }; } }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Crear la variable para la API key <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < link rel = \"stylesheet\" href = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var API_KEY_OCG = '{TU_API_KEY_OPENCAGE}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( '' ,{ style : function ( geoJsonFeature ){ var color = \"#0000FF\" ; switch ( geoJsonFeature . properties . value ) { case 300 : color = \"#0000FF\" ; break ; case 600 : color = \"#00FF00\" ; break ; case 900 : color = \"#FF0000\" ; break ; case 1200 : color = \"#FF00FF\" ; break ; default : color = \"#0000FF\" ; break ; } return { color : color }; } }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Agregar el control al mapa. Para utilizar el servicio de b\u00fasqueda tambi\u00e9n es necesario pasar nuestra API key: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < link rel = \"stylesheet\" href = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var API_KEY_OCG = '{TU_API_KEY_OPENCAGE}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var options_g = { key : API_KEY_OCG , limit : 10 }; var geocoder = L . Control . openCageSearch ( options_g ). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( '' ,{ style : function ( geoJsonFeature ){ var color = \"#0000FF\" ; switch ( geoJsonFeature . properties . value ) { case 300 : color = \"#0000FF\" ; break ; case 600 : color = \"#00FF00\" ; break ; case 900 : color = \"#FF0000\" ; break ; case 1200 : color = \"#FF00FF\" ; break ; default : color = \"#0000FF\" ; break ; } return { color : color }; } }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Recargar el mapa y comprobar que aparece el control. Calcular las is\u00f3cronas al seleccionar un resultado de la b\u00fasqueda. Modificar la funci\u00f3n _geocodeResultSelected del control geocoder <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < link rel = \"stylesheet\" href = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var API_KEY_OCG = '{TU_API_KEY_OPENCAGE}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var options_g = { key : API_KEY_OCG , limit : 10 }; var geocoder = L . Control . openCageSearch ( options_g ). addTo ( map ); geocoder . _geocodeResultSelected = function ( result ){ if ( this . options . collapsed ) { this . _collapse (); } console . log ( result ); }; var geojsonLayer = new L . GeoJSON . AJAX ( '' ,{ style : function ( geoJsonFeature ){ var color = \"#0000FF\" ; switch ( geoJsonFeature . properties . value ) { case 300 : color = \"#0000FF\" ; break ; case 600 : color = \"#00FF00\" ; break ; case 900 : color = \"#FF0000\" ; break ; case 1200 : color = \"#FF00FF\" ; break ; default : color = \"#0000FF\" ; break ; } return { color : color }; } }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Refrescar el mapa y abrir la consola de desarrolladores para comprobar que al seleccionar un resultado de la b\u00fasqueda aparece un objeto en la consola. Inspeccionar este objeto para ver que tiene una propiedad latlng que es lo que necesitamos para calcular las is\u00f3cronas. Llamar a nuestra funci\u00f3n crearUrlIsochrona en la funci\u00f3n del evento select para generar la url, luego refrescar la capa de geojsonLayer . Esto ya lo hemos hecho cuando el usuario hace click en el mapa. Copiar lo siguiente en la funci\u00f3n <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < link rel = \"stylesheet\" href = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var API_KEY_OCG = '{TU_API_KEY_OPENCAGE}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var options_g = { key : API_KEY_OCG , limit : 10 }; var geocoder = L . Control . openCageSearch ( options_g ). addTo ( map ); geocoder . _geocodeResultSelected = function ( result ){ if ( this . options . collapsed ) { this . _collapse (); } console . log ( result ); var url = crearUrlIsochrona ( result . center ); geojsonLayer . refresh ( url ); }; var geojsonLayer = new L . GeoJSON . AJAX ( '' ,{ style : function ( geoJsonFeature ){ var color = \"#0000FF\" ; switch ( geoJsonFeature . properties . value ) { case 300 : color = \"#0000FF\" ; break ; case 600 : color = \"#00FF00\" ; break ; case 900 : color = \"#FF0000\" ; break ; case 1200 : color = \"#FF00FF\" ; break ; default : color = \"#0000FF\" ; break ; } return { color : color }; } }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Refrescar la p\u00e1gina y al seleccionar un resultado de b\u00fasqueda comprobar que calcula las is\u00f3cronas desde ese punto. ejemplo is\u00f3cronas Ejercicio En la funci\u00f3n de crearUrlIsochrona cambiar el modo de transporte profile y el alcance range En el siguiente enlace se pueden ver las diferentes opciones de la API https://openrouteservice.org/dev/#/api-docs/isochrones/get Referencias https://openrouteservice.org \u21a9 https://github.com/traffordDataLab/leaflet.reachability \u21a9 https://github.com/calvinmetcalf/leaflet-ajax \u21a9 https://github.com/OpenCageData/leaflet-opencage-search \u21a9 https://opencagedata.com/ \u21a9","title":"15. Ejemplo Mobility"},{"location":"16_ejemplo_mobility/#ejemplo-mobility","text":"","title":"Ejemplo Mobility"},{"location":"16_ejemplo_mobility/#creacion-de-un-visor-que-permita-el-caculo-de-isocronas","text":"Algunos de los servicios que ofrecen el c\u00e1lculo de Is\u00f3cronas son: Targomo , ISO4APP , Openrouteservice y Graphhopper Crear una carpeta con el nombre de visor-mobility . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para confirmar que se carga un mapa centrado en Barcelona. Crear una API key. Al revisar la documentaci\u00f3n de la API del servicio de Openrouteservice 1 vemos que es necesario tener una API key para poder utilizarlo. Para crear la API key hay que darse de alta en la p\u00e1gina de Openrouteservice, es un servicio gratuito que tiene unas cuotas de uso. Crear una variable donde guardaremos nuestra API key. Escribir antes de la declaraci\u00f3n de nuestro mapa <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Cargar la respuesta del servicio utilizando el plugin de Leaflet llamado leaflet.reachability 2 . Este plugin permite hacer una llamada al servicio de Openrouteservice y cargar la respuesta en un mapa. Modificar el archivo index.html para cargar el plugin en nuestra aplicaci\u00f3n. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Agregar el control de Is\u00f3cronas al mapa utilizando el plugin. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); </ script > </ body > </ html > Recargar el mapa y comprobar que aparece un el bot\u00f3n del control de Is\u00f3cronas. Abrir la consola del desarrollador y ver las peticiones que se hacen al servicio de Openrouteservice. Modificar la aplicaci\u00f3n para que se haga el c\u00e1lculo de la Is\u00f3crona cuando el usuario haga click en un punto del mapa sin utilizar el plugin. Para ello primero hay que detectar el evento click en el mapa. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); }); </ script > </ body > </ html > Recargar la aplicaci\u00f3n y abrir la consola del desarrollador. Hacer click sobre el mapa y ver que en la consola aparece el objeto del evento click. Inspeccionar este objeto y ver que tiene una propiedad llamada latlng que contine las coordenadas donde se ha hecho el click. Crear una funci\u00f3n que tenga como par\u00e1metro una posici\u00f3n (coordenada lat lon) y genere una url de llamada al servicio de is\u00f3cronas de Openrouteservice para que haga el c\u00e1lculo en la coordenada indicada. Copiar lo siguiente al final de nuestro c\u00f3digo <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Llamar a la funci\u00f3n crearUrlIsochrona cuando se hace click en el mapa. Escribir al final de la funci\u00f3n del click <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Recargar la p\u00e1gina y hacer click sobre el mapa para ver que en la consola aparece una url. Abrir esta url en el navegador para comprobar que responde con un GeoJSON que contiene la is\u00f3crona. Cargar la respuesta GeoJSON del servicio utilizando el plugin de Leaflet llamado leaflet-ajax 3 . Este plugin permite hacer una llamada AJAX a un servicio que retorne un JSON y cargar la respuesta en un mapa. Agregar lo siguiente justo despu\u00e9s de donde cargarmos el leaflet. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > - Agregar la capa geojsonLayer para que se inicialice vac\u00eda sin ning\u00fan elemento. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( '' ). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Utilizar el m\u00e9todo refresh para actualizar la capa geojsonLayer con la url generada al hacer click. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( '' ). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Refrescar el mapa y hacer click sobre el mapa para comprobar que se dibuja una nueva l\u00ednea is\u00f3crona. Pintar la l\u00ednea del color que indicamos. Por defecto se pinta la l\u00ednea de color azul. Esto es debido a que el Leaflet no sabe de que color pintar la l\u00ednea y utiliza el color por defecto. En la respuesta del servicio podemos ver que los elementos que nos retorna tienen unas propiedades (properties) en donde se listan una serie de atributos, uno de ellos es el value que corresponde con el valor del intervalo de tiempo. Lo que debemos hacer es decirle al leaflet que utilice esa propiedad para dar el color a la l\u00ednea. Escribir lo siguiente en nuestra capa geojsonLayer. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( '' ,{ style : function ( geoJsonFeature ){ var color = \"#0000FF\" ; switch ( geoJsonFeature . properties . value ) { case 300 : color = \"#0000FF\" ; break ; case 600 : color = \"#00FF00\" ; break ; case 900 : color = \"#FF0000\" ; break ; case 1200 : color = \"#FF00FF\" ; break ; default : color = \"#0000FF\" ; break ; } return { color : color }; } }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Recargar el mapa y hacer click para confirmar que los pol\u00edgonos se pintan de diferentes colores.","title":"Creaci\u00f3n de un visor que permita el c\u00e1culo de Is\u00f3cronas"},{"location":"16_ejemplo_mobility/#agregar-un-buscador-de-direcciones-y-puntos-de-interes-al-mapa","text":"Para agregar un buscador utilizaremos el plugin de Leaflet Leaflet.OpenCage.Search 4 desarrollado por OpenCage que permite de una forma f\u00e1cil y r\u00e1pida hacer llamadas al servicio de b\u00fasqueda de OpenCage Geocoder. Para ello hay que obtener un API_KEY en la p\u00e1gina de OpenCage 5 Cargar la librer\u00eda en nuestra aplicaci\u00f3n. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < link rel = \"stylesheet\" href = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( '' ,{ style : function ( geoJsonFeature ){ var color = \"#0000FF\" ; switch ( geoJsonFeature . properties . value ) { case 300 : color = \"#0000FF\" ; break ; case 600 : color = \"#00FF00\" ; break ; case 900 : color = \"#FF0000\" ; break ; case 1200 : color = \"#FF00FF\" ; break ; default : color = \"#0000FF\" ; break ; } return { color : color }; } }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Crear la variable para la API key <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < link rel = \"stylesheet\" href = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var API_KEY_OCG = '{TU_API_KEY_OPENCAGE}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( '' ,{ style : function ( geoJsonFeature ){ var color = \"#0000FF\" ; switch ( geoJsonFeature . properties . value ) { case 300 : color = \"#0000FF\" ; break ; case 600 : color = \"#00FF00\" ; break ; case 900 : color = \"#FF0000\" ; break ; case 1200 : color = \"#FF00FF\" ; break ; default : color = \"#0000FF\" ; break ; } return { color : color }; } }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Agregar el control al mapa. Para utilizar el servicio de b\u00fasqueda tambi\u00e9n es necesario pasar nuestra API key: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < link rel = \"stylesheet\" href = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var API_KEY_OCG = '{TU_API_KEY_OPENCAGE}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var options_g = { key : API_KEY_OCG , limit : 10 }; var geocoder = L . Control . openCageSearch ( options_g ). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( '' ,{ style : function ( geoJsonFeature ){ var color = \"#0000FF\" ; switch ( geoJsonFeature . properties . value ) { case 300 : color = \"#0000FF\" ; break ; case 600 : color = \"#00FF00\" ; break ; case 900 : color = \"#FF0000\" ; break ; case 1200 : color = \"#FF00FF\" ; break ; default : color = \"#0000FF\" ; break ; } return { color : color }; } }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Recargar el mapa y comprobar que aparece el control. Calcular las is\u00f3cronas al seleccionar un resultado de la b\u00fasqueda. Modificar la funci\u00f3n _geocodeResultSelected del control geocoder <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < link rel = \"stylesheet\" href = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var API_KEY_OCG = '{TU_API_KEY_OPENCAGE}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var options_g = { key : API_KEY_OCG , limit : 10 }; var geocoder = L . Control . openCageSearch ( options_g ). addTo ( map ); geocoder . _geocodeResultSelected = function ( result ){ if ( this . options . collapsed ) { this . _collapse (); } console . log ( result ); }; var geojsonLayer = new L . GeoJSON . AJAX ( '' ,{ style : function ( geoJsonFeature ){ var color = \"#0000FF\" ; switch ( geoJsonFeature . properties . value ) { case 300 : color = \"#0000FF\" ; break ; case 600 : color = \"#00FF00\" ; break ; case 900 : color = \"#FF0000\" ; break ; case 1200 : color = \"#FF00FF\" ; break ; default : color = \"#0000FF\" ; break ; } return { color : color }; } }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Refrescar el mapa y abrir la consola de desarrolladores para comprobar que al seleccionar un resultado de la b\u00fasqueda aparece un objeto en la consola. Inspeccionar este objeto para ver que tiene una propiedad latlng que es lo que necesitamos para calcular las is\u00f3cronas. Llamar a nuestra funci\u00f3n crearUrlIsochrona en la funci\u00f3n del evento select para generar la url, luego refrescar la capa de geojsonLayer . Esto ya lo hemos hecho cuando el usuario hace click en el mapa. Copiar lo siguiente en la funci\u00f3n <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo Is\u00f3cronas Mapzen </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.css\" /> < link rel = \"stylesheet\" href = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js\" ></ script > < script src = \"https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v2.0.0/leaflet.reachability.js\" ></ script > < script > var API_KEY_ORS = '{TU_API_KEY}' ; var API_KEY_OCG = '{TU_API_KEY_OPENCAGE}' ; var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var options_g = { key : API_KEY_OCG , limit : 10 }; var geocoder = L . Control . openCageSearch ( options_g ). addTo ( map ); geocoder . _geocodeResultSelected = function ( result ){ if ( this . options . collapsed ) { this . _collapse (); } console . log ( result ); var url = crearUrlIsochrona ( result . center ); geojsonLayer . refresh ( url ); }; var geojsonLayer = new L . GeoJSON . AJAX ( '' ,{ style : function ( geoJsonFeature ){ var color = \"#0000FF\" ; switch ( geoJsonFeature . properties . value ) { case 300 : color = \"#0000FF\" ; break ; case 600 : color = \"#00FF00\" ; break ; case 900 : color = \"#FF0000\" ; break ; case 1200 : color = \"#FF00FF\" ; break ; default : color = \"#0000FF\" ; break ; } return { color : color }; } }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = 'https://api.openrouteservice.org/isochrones?' ; var json = { locations : lng + \",\" + lat , range_type : \"time\" , range : 1200 , interval : 300 , profile : \"cycling-regular\" , location_type : \"start\" , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + '=' + encodeURIComponent ( json [ k ]) }). join ( '&' ) url += params ; return url ; } </ script > </ body > </ html > Refrescar la p\u00e1gina y al seleccionar un resultado de b\u00fasqueda comprobar que calcula las is\u00f3cronas desde ese punto. ejemplo is\u00f3cronas Ejercicio En la funci\u00f3n de crearUrlIsochrona cambiar el modo de transporte profile y el alcance range En el siguiente enlace se pueden ver las diferentes opciones de la API https://openrouteservice.org/dev/#/api-docs/isochrones/get","title":"Agregar un buscador de direcciones y puntos de inter\u00e9s al mapa"},{"location":"16_ejemplo_mobility/#referencias","text":"https://openrouteservice.org \u21a9 https://github.com/traffordDataLab/leaflet.reachability \u21a9 https://github.com/calvinmetcalf/leaflet-ajax \u21a9 https://github.com/OpenCageData/leaflet-opencage-search \u21a9 https://opencagedata.com/ \u21a9","title":"Referencias"},{"location":"17_ejemplo_geoservicio_realtime/","text":"Ejemplo servicio realtime para compartir la ubicaci\u00f3n Simularemos un servicio que permita compartir la ubicaci\u00f3n de los usuarios y ver que usuarios est\u00e1n en linea. Para ello utilizaremos la librer\u00eda Socket.io 1 que permite la comunicaci\u00f3n en tiempo real en dos direcciones cliente-servidor (tipo pull) y servidor-cliente (tipo push). Esto lo hace gracias a un socket 2 . Para mostrar los datos en el mapa utilizaremos la libreria Leaflet 3 . Para obtener la ubicaci\u00f3n de los usuarios podemos usar el plugin leaflet-locatecontrol 4 , en nuestro caso vamos a simular la ubicaci\u00f3n del usuario haciendo click sobre el mapa en lugar de utilizar la ubicaci\u00f3n del usuario. Creaci\u00f3n del mapa Crear una carpeta con el nombre de user-realtime . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para comrobar que se carga un mapa centrado en Barcelona. Capturar el evento click en el mapa. Luego de la declaraci\u00f3n de nuestra capa escribir los siguiente: <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); }); </ script > </ body > </ html > Recargar la aplicaci\u00f3n y abrir la consola del desarrollador, al hacer click sobre el mapa ver que en la consola aparece el objeto del evento click. Inspeccionar este objeto para ver que tiene una propiedad llamada latlng que contine las coordenadas donde se ha hecho el click. Creaci\u00f3n del servicio que comparte la ubicaci\u00f3n de los usuarios Utilizaremos Nodejs 5 para implementar nuestro servidor web y utilizaremos el m\u00f3dulo de socket.io para establecer la comunicaci\u00f3n entre el cliente y nuestro servidor. Instalar Node.js. Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 12.13.1 LTS) y lo instalaremos con las opciones por defecto. Una vez instalado el Node abrir la consola para verificar que se ha instalado correctamente. Escribir node -v Navegar hasta nuestra carpeta user-realtime y escribir: npm init Con este comando estaremos creando el archivo package.json . Este comando solicita varios elementos como, por ejemplo, el nombre y la versi\u00f3n de la aplicaci\u00f3n. Por ahora, s\u00f3lo hay que pulsar ENTER para aceptar los valores predeterminados. Instalar las dependencias para crear nuestro servicio de proxy. En este caso utilizaremos Express 6 como servidor web y el m\u00f3dulo socket.io 7 . Instalar el express y guardarlo en la lista de dependencias npm install express --save Instalar el socket.io y guardarlo en la lista de dependencias npm install socket.io --save Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que contendr\u00e1 nuestra aplicaci\u00f3n que servir\u00e1 de servidor web. Para ello copiar lo siguiente en este archivo. var express = require ( 'express' ); var app = express (); var http = require ( 'http' ). Server ( app ); var io = require ( 'socket.io' )( http ); app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); io . on ( 'connection' , function ( socket ){ console . log ( 'a user connected' ); }); http . listen ( 3000 , function (){ console . log ( 'listening on *:3000' ); }); Probar que nuestro servidor est\u00e1 funcionando, escribiendo: node app.js Abrir la url de nuestro servidor http://localhost:3000/ en el navegador para ver nuestro mapa. Modificar el mapa Agregar la librer\u00eda cliente de socket.io. Escribir en el archivo index.html justo debajo de donde cargamos el leaflet <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); }); </ script > </ body > </ html > Declarar la variable que va a tener el objeto socket.io al inicio de nuestro c\u00f3digo antes de la declaraci\u00f3n del mapa escribir los siguiente: <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js\" ></ script > < script type = \"text/javascript\" > var socket = io (); var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); }); </ script > </ body > </ html > Recargar la p\u00e1gina y ver que en la consola aparece el mensaje de a user connected . Enviar el evento click al servidor. En la funcion que se llama al hacer click sobre el mapa escribir los siguiente para enviar un evento al servidor. Este evento lo llamaremos user_click y le pasaremos como par\u00e1metro la posici\u00f3n del click. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js\" ></ script > < script type = \"text/javascript\" > var socket = io (); var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); socket . emit ( 'user_click' , e . latlng ); }); </ script > </ body > </ html > Modificar el servidor Escuchar al evento user_click en nuestra aplicaci\u00f3n del servidor. Dentro de la funci\u00f3n que se llama en el io.on es donde se crea el socket de conexi\u00f3n, por lo tando escribir nuestro c\u00f3digo dentro de la misma. Debajo de donde escribimos el mensaje de a user connected escribir lo siguiente: var express = require ( 'express' ); var app = express (); var http = require ( 'http' ). Server ( app ); var io = require ( 'socket.io' )( http ); app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); io . on ( 'connection' , function ( socket ){ console . log ( 'a user connected' ); socket . on ( 'user_click' , function ( msg ){ console . log ( msg ); }); }); http . listen ( 3000 , function (){ console . log ( 'listening on *:3000' ); }); Reiniciar nuestro servidor de node en la consola presionar Crtl+c. Volver a escribir node app.js. Recargar la p\u00e1gina y hacer click sobre el mapa para ver que en la consola aparece las coordenadas del click. Con esto ya hemos logrado la comunicaci\u00f3n cliente-servidor. Lograr la comunicaci\u00f3n servidor-cliente y que el servidor notifique a todos los cliente para esto debemos emitir un evento en nuestro servidor. Este evento lo llamaremos new_user . Copiar lo siguiente para emitir el evento dentro de la funci\u00f3n que se llama en el evento user_click . var express = require ( 'express' ); var app = express (); var http = require ( 'http' ). Server ( app ); var io = require ( 'socket.io' )( http ); app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); io . on ( 'connection' , function ( socket ){ console . log ( 'a user connected' ); socket . on ( 'user_click' , function ( msg ){ console . log ( msg ); io . emit ( 'new_user' , msg ); }); }); http . listen ( 3000 , function (){ console . log ( 'listening on *:3000' ); }); Modificar el mapa Escuchar el evento new_user en nuestro cliente. Al final de nuestro c\u00f3digo html escribir <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js\" ></ script > < script type = \"text/javascript\" > var socket = io (); var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); socket . emit ( 'user_click' , e . latlng ); }); socket . on ( 'new_user' , function ( msg ){ console . log ( msg ); }); </ script > </ body > </ html > Recargar el servidor y recargar la p\u00e1gina. Clicar sobre el mapa y ver las coordenadas del click tanto en el la consola del servidor como en la consola de desarrolladores del navegador. Mostrar un marcador en el mapa en la posici\u00f3n donde el usuario hace click. En nuestro html en la funci\u00f3n que escucha el evento new_user agregar el siguiente c\u00f3digo <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js\" ></ script > < script type = \"text/javascript\" > var socket = io (); var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); socket . emit ( 'user_click' , e . latlng ); }); socket . on ( 'new_user' , function ( msg ){ console . log ( msg ); L . marker ([ msg . lat , msg . lng ]). addTo ( map ); }); </ script > </ body > </ html > Recargar nuestra aplicaci\u00f3n y abrir otra pesta\u00f1a con nuestra aplicaci\u00f3n para simular que somos dos usuarios distintos. Hacer click en el mapa en cualquiera de las pesta\u00f1as y ver que nos aparece el marcador en ambas pesta\u00f1as. Referencias https://socket.io/ \u21a9 https://es.wikipedia.org/wiki/Socket_de_Internet \u21a9 http://leafletjs.com/ \u21a9 https://github.com/domoritz/leaflet-locatecontrol \u21a9 https://nodejs.org/es/ \u21a9 http://expressjs.com/ \u21a9 https://github.com/socketio/socket.io \u21a9","title":"16. Ejemplo servicio realtime para compartir la ubicaci\u00f3n"},{"location":"17_ejemplo_geoservicio_realtime/#ejemplo-servicio-realtime-para-compartir-la-ubicacion","text":"Simularemos un servicio que permita compartir la ubicaci\u00f3n de los usuarios y ver que usuarios est\u00e1n en linea. Para ello utilizaremos la librer\u00eda Socket.io 1 que permite la comunicaci\u00f3n en tiempo real en dos direcciones cliente-servidor (tipo pull) y servidor-cliente (tipo push). Esto lo hace gracias a un socket 2 . Para mostrar los datos en el mapa utilizaremos la libreria Leaflet 3 . Para obtener la ubicaci\u00f3n de los usuarios podemos usar el plugin leaflet-locatecontrol 4 , en nuestro caso vamos a simular la ubicaci\u00f3n del usuario haciendo click sobre el mapa en lugar de utilizar la ubicaci\u00f3n del usuario.","title":"Ejemplo servicio realtime para compartir la ubicaci\u00f3n"},{"location":"17_ejemplo_geoservicio_realtime/#creacion-del-mapa","text":"Crear una carpeta con el nombre de user-realtime . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para comrobar que se carga un mapa centrado en Barcelona. Capturar el evento click en el mapa. Luego de la declaraci\u00f3n de nuestra capa escribir los siguiente: <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); }); </ script > </ body > </ html > Recargar la aplicaci\u00f3n y abrir la consola del desarrollador, al hacer click sobre el mapa ver que en la consola aparece el objeto del evento click. Inspeccionar este objeto para ver que tiene una propiedad llamada latlng que contine las coordenadas donde se ha hecho el click.","title":"Creaci\u00f3n del mapa"},{"location":"17_ejemplo_geoservicio_realtime/#creacion-del-servicio-que-comparte-la-ubicacion-de-los-usuarios","text":"Utilizaremos Nodejs 5 para implementar nuestro servidor web y utilizaremos el m\u00f3dulo de socket.io para establecer la comunicaci\u00f3n entre el cliente y nuestro servidor. Instalar Node.js. Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 12.13.1 LTS) y lo instalaremos con las opciones por defecto. Una vez instalado el Node abrir la consola para verificar que se ha instalado correctamente. Escribir node -v Navegar hasta nuestra carpeta user-realtime y escribir: npm init Con este comando estaremos creando el archivo package.json . Este comando solicita varios elementos como, por ejemplo, el nombre y la versi\u00f3n de la aplicaci\u00f3n. Por ahora, s\u00f3lo hay que pulsar ENTER para aceptar los valores predeterminados. Instalar las dependencias para crear nuestro servicio de proxy. En este caso utilizaremos Express 6 como servidor web y el m\u00f3dulo socket.io 7 . Instalar el express y guardarlo en la lista de dependencias npm install express --save Instalar el socket.io y guardarlo en la lista de dependencias npm install socket.io --save Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que contendr\u00e1 nuestra aplicaci\u00f3n que servir\u00e1 de servidor web. Para ello copiar lo siguiente en este archivo. var express = require ( 'express' ); var app = express (); var http = require ( 'http' ). Server ( app ); var io = require ( 'socket.io' )( http ); app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); io . on ( 'connection' , function ( socket ){ console . log ( 'a user connected' ); }); http . listen ( 3000 , function (){ console . log ( 'listening on *:3000' ); }); Probar que nuestro servidor est\u00e1 funcionando, escribiendo: node app.js Abrir la url de nuestro servidor http://localhost:3000/ en el navegador para ver nuestro mapa.","title":"Creaci\u00f3n del servicio que comparte la ubicaci\u00f3n de los usuarios"},{"location":"17_ejemplo_geoservicio_realtime/#modificar-el-mapa","text":"Agregar la librer\u00eda cliente de socket.io. Escribir en el archivo index.html justo debajo de donde cargamos el leaflet <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); }); </ script > </ body > </ html > Declarar la variable que va a tener el objeto socket.io al inicio de nuestro c\u00f3digo antes de la declaraci\u00f3n del mapa escribir los siguiente: <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js\" ></ script > < script type = \"text/javascript\" > var socket = io (); var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); }); </ script > </ body > </ html > Recargar la p\u00e1gina y ver que en la consola aparece el mensaje de a user connected . Enviar el evento click al servidor. En la funcion que se llama al hacer click sobre el mapa escribir los siguiente para enviar un evento al servidor. Este evento lo llamaremos user_click y le pasaremos como par\u00e1metro la posici\u00f3n del click. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js\" ></ script > < script type = \"text/javascript\" > var socket = io (); var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); socket . emit ( 'user_click' , e . latlng ); }); </ script > </ body > </ html >","title":"Modificar el mapa"},{"location":"17_ejemplo_geoservicio_realtime/#modificar-el-servidor","text":"Escuchar al evento user_click en nuestra aplicaci\u00f3n del servidor. Dentro de la funci\u00f3n que se llama en el io.on es donde se crea el socket de conexi\u00f3n, por lo tando escribir nuestro c\u00f3digo dentro de la misma. Debajo de donde escribimos el mensaje de a user connected escribir lo siguiente: var express = require ( 'express' ); var app = express (); var http = require ( 'http' ). Server ( app ); var io = require ( 'socket.io' )( http ); app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); io . on ( 'connection' , function ( socket ){ console . log ( 'a user connected' ); socket . on ( 'user_click' , function ( msg ){ console . log ( msg ); }); }); http . listen ( 3000 , function (){ console . log ( 'listening on *:3000' ); }); Reiniciar nuestro servidor de node en la consola presionar Crtl+c. Volver a escribir node app.js. Recargar la p\u00e1gina y hacer click sobre el mapa para ver que en la consola aparece las coordenadas del click. Con esto ya hemos logrado la comunicaci\u00f3n cliente-servidor. Lograr la comunicaci\u00f3n servidor-cliente y que el servidor notifique a todos los cliente para esto debemos emitir un evento en nuestro servidor. Este evento lo llamaremos new_user . Copiar lo siguiente para emitir el evento dentro de la funci\u00f3n que se llama en el evento user_click . var express = require ( 'express' ); var app = express (); var http = require ( 'http' ). Server ( app ); var io = require ( 'socket.io' )( http ); app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); io . on ( 'connection' , function ( socket ){ console . log ( 'a user connected' ); socket . on ( 'user_click' , function ( msg ){ console . log ( msg ); io . emit ( 'new_user' , msg ); }); }); http . listen ( 3000 , function (){ console . log ( 'listening on *:3000' ); });","title":"Modificar el servidor"},{"location":"17_ejemplo_geoservicio_realtime/#modificar-el-mapa_1","text":"Escuchar el evento new_user en nuestro cliente. Al final de nuestro c\u00f3digo html escribir <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js\" ></ script > < script type = \"text/javascript\" > var socket = io (); var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); socket . emit ( 'user_click' , e . latlng ); }); socket . on ( 'new_user' , function ( msg ){ console . log ( msg ); }); </ script > </ body > </ html > Recargar el servidor y recargar la p\u00e1gina. Clicar sobre el mapa y ver las coordenadas del click tanto en el la consola del servidor como en la consola de desarrolladores del navegador. Mostrar un marcador en el mapa en la posici\u00f3n donde el usuario hace click. En nuestro html en la funci\u00f3n que escucha el evento new_user agregar el siguiente c\u00f3digo <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js\" ></ script > < script type = \"text/javascript\" > var socket = io (); var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); map . on ( 'click' , function ( e ){ console . log ( e ); socket . emit ( 'user_click' , e . latlng ); }); socket . on ( 'new_user' , function ( msg ){ console . log ( msg ); L . marker ([ msg . lat , msg . lng ]). addTo ( map ); }); </ script > </ body > </ html > Recargar nuestra aplicaci\u00f3n y abrir otra pesta\u00f1a con nuestra aplicaci\u00f3n para simular que somos dos usuarios distintos. Hacer click en el mapa en cualquiera de las pesta\u00f1as y ver que nos aparece el marcador en ambas pesta\u00f1as.","title":"Modificar el mapa"},{"location":"17_ejemplo_geoservicio_realtime/#referencias","text":"https://socket.io/ \u21a9 https://es.wikipedia.org/wiki/Socket_de_Internet \u21a9 http://leafletjs.com/ \u21a9 https://github.com/domoritz/leaflet-locatecontrol \u21a9 https://nodejs.org/es/ \u21a9 http://expressjs.com/ \u21a9 https://github.com/socketio/socket.io \u21a9","title":"Referencias"},{"location":"18_ejemplo_gtfs/","text":"Ejemplo GTFS \u00bfQu\u00e9 es la GTFS? La Especificaci\u00f3n general de feeds de transporte p\u00fablico (GTFS) define un formato com\u00fan para los horarios de transporte p\u00fablico y la informaci\u00f3n geogr\u00e1fica asociada a ellos. Los \"feeds\" GTFS permiten que las empresas de transporte p\u00fablico publiquen sus datos de transporte y que los programadores escriban aplicaciones que consuman esos datos de manera interoperable 1 . Creaci\u00f3n de un visor que muestre las l\u00ednes y paradas de un GTFS Para crear un visor de mapas utilizaremos la librer\u00eda de mapas Leaflet 2 . Y cargaremos los datos de portal de la Plataforma VLCi (Valencia SmartCity) 3 Crear una carpeta con el nombre de visor-gtfs . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo GTFS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para confirmar que se carga un mapa centrado en Valencia. Crear el proxy Crear un archivo con el nombre de package.json dentro de la carpeta. Abrir el archivo package.json con un editor de texto y copiar el siguiente c\u00f3digo. { \"name\" : \"visor-gtfs\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"index.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"author\" : \"\" , \"license\" : \"ISC\" , \"dependencies\" : { \"assert\" : \"^2.0.0\" , \"express\" : \"^4.17.1\" , \"fast-csv\" : \"^3.4.0\" , \"request\" : \"^2.88.0\" , \"yauzl\" : \"^2.10.0\" } } Instalar Node.js 4 . Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 10.13.0 LTS) y lo instalaremos con las opciones por defecto. Abrir la consola para verificar que se ha instalado correctamente y escribir node -v Navegar hasta nuestra carpeta visor-gtfs y escribir: npm install Con este comando estamos instalando las dependencias declarades en el archivo package.json Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que servir\u00e1 de proxy con el servicio GTFS. Copiar lo siguiente en este archivo. var express = require ( 'express' ); var app = express (); var request = require ( 'request' ); var path = require ( 'path' ); var https = require ( 'https' ); var fs = require ( 'fs' ); var yauzl = require ( \"yauzl\" ); app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . listen ( 3000 ); Probar que nuestro proxy est\u00e1 funcionando, escribir: node app.js Escribir en el navegador http://localhost:3000 y ver nuestro mapa. Crear un archivo llamado gtfs2geojson.js . Copiar en el archivo el c\u00f3digo del siguiente enlace https://raw.githubusercontent.com/andrewharvey/gtfs2geojson/master/index.js este c\u00f3digo convierte datos de un GTFS en un GeoJSON. C\u00f3digo basado en la librer\u00eda https://github.com/andrewharvey/gtfs2geojson Cargar en archivo en nuestra app.js. Escribir lo siguiente justo desp\u00faes de donde se carga el m\u00f3dulo yauzl var express = require ( 'express' ); var app = express (); var request = require ( 'request' ); var path = require ( 'path' ); var https = require ( 'https' ); var fs = require ( 'fs' ); var yauzl = require ( \"yauzl\" ); var gtfs2geojson = require ( './gtfs2geojson.js' ); app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . listen ( 3000 ); Crear la variable que contiene la url del servicio GTFS de L\u00edneas, paradas, horarios de autobuses de la EMT de Valencia 5 . Escribir lo siguiente justo despues de la variable gtfs2geojson var express = require ( 'express' ); var app = express (); var request = require ( 'request' ); var path = require ( 'path' ); var https = require ( 'https' ); var fs = require ( 'fs' ); var yauzl = require ( \"yauzl\" ); var gtfs2geojson = require ( './gtfs2geojson.js' ); const url = 'https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . listen ( 3000 ); Crear una funci\u00f3n llamada getZip para descargar un archivo. La funci\u00f3n recibe como par\u00e1metro una url. Escribir lo siguiente al final del archivo app.js var express = require ( 'express' ); var app = express (); var request = require ( 'request' ); var path = require ( 'path' ); var https = require ( 'https' ); var fs = require ( 'fs' ); var yauzl = require ( \"yauzl\" ); var gtfs2geojson = require ( './gtfs2geojson.js' ); const url = 'https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( \"gtfs.zip\" ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( 'finish' , function (){ resolve (); }); }); } Crear una funci\u00f3n que extrae un archivo de un zip. La funcion recibe como par\u00e1metro el nombre del archivo que se desea extraer. Escribir lo siguiente al final del archivo app.js var express = require ( 'express' ); var app = express (); var request = require ( 'request' ); var path = require ( 'path' ); var https = require ( 'https' ); var fs = require ( 'fs' ); var yauzl = require ( \"yauzl\" ); var gtfs2geojson = require ( './gtfs2geojson.js' ); const url = 'https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( \"gtfs.zip\" ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( 'finish' , function (){ resolve (); }); }); } function leerZip ( archivo ){ return new Promise ( function ( resolve , reject ) { yauzl . open ( 'gtfs.zip' , { lazyEntries : true }, function ( err , zipfile ) { if ( err ) throw err ; zipfile . readEntry (); zipfile . on ( \"entry\" , function ( entry ) { if ( /\\/$/ . test ( entry . fileName )) { // Directory file names end with '/'. // Note that entires for directories themselves are optional. // An entry's fileName implicitly requires its parent directories to exist. zipfile . readEntry (); } else { // file entry if ( entry . fileName === archivo ){ zipfile . openReadStream ( entry , function ( err , readStream ) { if ( err ) throw err ; var file = fs . createWriteStream ( entry . fileName ); readStream . pipe ( file ); file . on ( 'finish' , function (){ resolve (); }); }); } else { zipfile . readEntry (); } } }); }); }); } Descargar el archivo GTFS y guardarlo en el ordenador. Escribir lo siguiente justo antes de la l\u00ednea donde definimos el puerto por el cual escucha nuestro servidor var express = require ( 'express' ); var app = express (); var request = require ( 'request' ); var path = require ( 'path' ); var https = require ( 'https' ); var fs = require ( 'fs' ); var yauzl = require ( \"yauzl\" ); var gtfs2geojson = require ( './gtfs2geojson.js' ); const url = 'https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . all ( \"/getdata/*\" , function ( req , res ) { getZip ( url ). then ( function (){ Promise . all ([ leerZip ( 'shapes.txt' ), leerZip ( 'stops.txt' )]). then ( values => { res . json ({ \"msg\" : \"archivos descargados\" }); }); }); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( \"gtfs.zip\" ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( 'finish' , function (){ resolve (); }); }); } function leerZip ( archivo ){ return new Promise ( function ( resolve , reject ) { yauzl . open ( 'gtfs.zip' , { lazyEntries : true }, function ( err , zipfile ) { if ( err ) throw err ; zipfile . readEntry (); zipfile . on ( \"entry\" , function ( entry ) { if ( /\\/$/ . test ( entry . fileName )) { // Directory file names end with '/'. // Note that entires for directories themselves are optional. // An entry's fileName implicitly requires its parent directories to exist. zipfile . readEntry (); } else { // file entry if ( entry . fileName === archivo ){ zipfile . openReadStream ( entry , function ( err , readStream ) { if ( err ) throw err ; var file = fs . createWriteStream ( entry . fileName ); readStream . pipe ( file ); file . on ( 'finish' , function (){ resolve (); }); }); } else { zipfile . readEntry (); } } }); }); }); } Reiniciar nuestro servidor de node, ir a la consola y presionar Crtl+c. Escribir node app.js. Abrir la url http://localhost:3000/getdata/ en el navegador para comprobar que se han descargado correctamente los archivos gtfs.zip , shapes.txt y stops.txt . Leer los archivos GTFS y convertirlos a GeoJson. Escribir lo siguiente justo antes de la l\u00ednea donde definimos el puerto por el cual escucha nuestro servidor var express = require ( 'express' ); var app = express (); var request = require ( 'request' ); var path = require ( 'path' ); var https = require ( 'https' ); var fs = require ( 'fs' ); var yauzl = require ( \"yauzl\" ); var gtfs2geojson = require ( './gtfs2geojson.js' ); const url = 'https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . all ( \"/getdata/*\" , function ( req , res ) { getZip ( url ). then ( function (){ Promise . all ([ leerZip ( 'shapes.txt' ), leerZip ( 'stops.txt' )]). then ( values => { res . json ({ \"msg\" : \"archivos descargados\" }); }); }); }); app . all ( \"/stops/*\" , function ( req , res ) { gtfs2geojson . stops ( fs . readFileSync ( 'stops.txt' , 'utf8' ), function ( result ){ res . json ( result ); }); }); app . all ( \"/shapes/*\" , function ( req , res ) { gtfs2geojson . lines ( fs . readFileSync ( 'shapes.txt' , 'utf8' ), function ( result ){ res . json ( result ); }); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( \"gtfs.zip\" ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( 'finish' , function (){ resolve (); }); }); } function leerZip ( archivo ){ return new Promise ( function ( resolve , reject ) { yauzl . open ( 'gtfs.zip' , { lazyEntries : true }, function ( err , zipfile ) { if ( err ) throw err ; zipfile . readEntry (); zipfile . on ( \"entry\" , function ( entry ) { if ( /\\/$/ . test ( entry . fileName )) { // Directory file names end with '/'. // Note that entires for directories themselves are optional. // An entry's fileName implicitly requires its parent directories to exist. zipfile . readEntry (); } else { // file entry if ( entry . fileName === archivo ){ zipfile . openReadStream ( entry , function ( err , readStream ) { if ( err ) throw err ; var file = fs . createWriteStream ( entry . fileName ); readStream . pipe ( file ); file . on ( 'finish' , function (){ resolve (); }); }); } else { zipfile . readEntry (); } } }); }); }); } Reiniciar nuestro servidor de node, ir a la consola y presionar Crtl+c. Escribir node app.js. Abrir la url http://localhost:3000/stops/ en el navegador para comprobar que se muestra un GeoJson con la informaci\u00f3n de las paradas. Modificar el mapa Cargar este JSON en nuestro mapa utilizando un plugin de Leaflet llamado leaflet-ajax 6 . Este plugin permite hacer una llamada AJAX a un servicio que retorne un JSON y cargar la respuesta en un mapa. Para cargar este plugin debemos agregar lo siguiente justo despu\u00e9s de donde hemos cargado el leaflet <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo GTFS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Utilizar el plugin para agregar la capa de paradas al mapa llamando a nuestro servidor. Agregar lo siguiente al final de nuestro c\u00f3digo: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo GTFS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( '/stops/' ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : \"#A30000\" , color : \"#A30000\" , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); </ script > </ body > </ html > Recargar el mapa y comprobar que aparecen los puntos de las paradas en el mapa. Utilizar el plugin para agregar la capa de l\u00edneas al mapa llamando a nuestro servidor. Agregar lo siguiente al final de nuestro c\u00f3digo: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo GTFS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( '/stops/' ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : \"#A30000\" , color : \"#A30000\" , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); var geojsonLineas = new L . GeoJSON . AJAX ( '/shapes/' ,{ }). addTo ( map ); </ script > </ body > </ html > Recargar el mapa y comprobar que aparecen las l\u00edneas del bus en el mapa. Cargar la librer\u00eda de manipulaci\u00f3n de colores chroma.js 7 . Escribir lo siguiente despu\u00e9s de donde cargarmos el plugin de leaflet.ajax <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo GTFS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/chroma-js/2.0.6/chroma.min.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( '/stops/' ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : \"#A30000\" , color : \"#A30000\" , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); var geojsonLineas = new L . GeoJSON . AJAX ( '/shapes/' ,{ }). addTo ( map ); </ script > </ body > </ html > Dar estilo a la capa de l\u00edneas generando un color aleatorio. Escribir lo siguiente en las opciones de la capa geojsonLineas <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo GTFS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/chroma-js/2.0.6/chroma.min.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( '/stops/' ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : \"#A30000\" , color : \"#A30000\" , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); var geojsonLineas = new L . GeoJSON . AJAX ( '/shapes/' ,{ style : function ( geoJsonFeature ){ return { color : chroma . random (), opacity : 0.5 }; } }). addTo ( map ); </ script > </ body > </ html > Recargar el mapa y comprobar que aparecen las l\u00edneas del bus en el mapa con colores aleatorios. ejemplo gtfs Ejercicios Mostrar un popup con informaci\u00f3n de la propiedad shape_id al hacer click en la capa de l\u00edneas Cargar datos del gtfs de FGC https://www.fgc.cat/es/opendata/ En el siguiente enlace est\u00e1 el fichero de gtfs https://www.fgc.cat/wp-content/uploads/2018/02/google_transit.zip Centrar el mapa en Barcelona Referencias https://developers.google.com/transit/gtfs/?hl=es-419 \u21a9 http://leafletjs.com/ \u21a9 https://opendata.vlci.valencia.es \u21a9 https://nodejs.org/es/ \u21a9 http://gobiernoabierto.valencia.es/es/dataset/?id=google-transit-lineas-paradas-horarios-de-autobuses \u21a9 https://github.com/calvinmetcalf/leaflet-ajax \u21a9 https://github.com/gka/chroma.js/ \u21a9","title":"17. Ejemplo GTFS"},{"location":"18_ejemplo_gtfs/#ejemplo-gtfs","text":"","title":"Ejemplo GTFS"},{"location":"18_ejemplo_gtfs/#que-es-la-gtfs","text":"La Especificaci\u00f3n general de feeds de transporte p\u00fablico (GTFS) define un formato com\u00fan para los horarios de transporte p\u00fablico y la informaci\u00f3n geogr\u00e1fica asociada a ellos. Los \"feeds\" GTFS permiten que las empresas de transporte p\u00fablico publiquen sus datos de transporte y que los programadores escriban aplicaciones que consuman esos datos de manera interoperable 1 .","title":"\u00bfQu\u00e9 es la GTFS?"},{"location":"18_ejemplo_gtfs/#creacion-de-un-visor-que-muestre-las-lines-y-paradas-de-un-gtfs","text":"Para crear un visor de mapas utilizaremos la librer\u00eda de mapas Leaflet 2 . Y cargaremos los datos de portal de la Plataforma VLCi (Valencia SmartCity) 3 Crear una carpeta con el nombre de visor-gtfs . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo GTFS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para confirmar que se carga un mapa centrado en Valencia.","title":"Creaci\u00f3n de un visor que muestre las l\u00ednes y paradas de un GTFS"},{"location":"18_ejemplo_gtfs/#crear-el-proxy","text":"Crear un archivo con el nombre de package.json dentro de la carpeta. Abrir el archivo package.json con un editor de texto y copiar el siguiente c\u00f3digo. { \"name\" : \"visor-gtfs\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"index.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"author\" : \"\" , \"license\" : \"ISC\" , \"dependencies\" : { \"assert\" : \"^2.0.0\" , \"express\" : \"^4.17.1\" , \"fast-csv\" : \"^3.4.0\" , \"request\" : \"^2.88.0\" , \"yauzl\" : \"^2.10.0\" } } Instalar Node.js 4 . Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 10.13.0 LTS) y lo instalaremos con las opciones por defecto. Abrir la consola para verificar que se ha instalado correctamente y escribir node -v Navegar hasta nuestra carpeta visor-gtfs y escribir: npm install Con este comando estamos instalando las dependencias declarades en el archivo package.json Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que servir\u00e1 de proxy con el servicio GTFS. Copiar lo siguiente en este archivo. var express = require ( 'express' ); var app = express (); var request = require ( 'request' ); var path = require ( 'path' ); var https = require ( 'https' ); var fs = require ( 'fs' ); var yauzl = require ( \"yauzl\" ); app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . listen ( 3000 ); Probar que nuestro proxy est\u00e1 funcionando, escribir: node app.js Escribir en el navegador http://localhost:3000 y ver nuestro mapa. Crear un archivo llamado gtfs2geojson.js . Copiar en el archivo el c\u00f3digo del siguiente enlace https://raw.githubusercontent.com/andrewharvey/gtfs2geojson/master/index.js este c\u00f3digo convierte datos de un GTFS en un GeoJSON. C\u00f3digo basado en la librer\u00eda https://github.com/andrewharvey/gtfs2geojson Cargar en archivo en nuestra app.js. Escribir lo siguiente justo desp\u00faes de donde se carga el m\u00f3dulo yauzl var express = require ( 'express' ); var app = express (); var request = require ( 'request' ); var path = require ( 'path' ); var https = require ( 'https' ); var fs = require ( 'fs' ); var yauzl = require ( \"yauzl\" ); var gtfs2geojson = require ( './gtfs2geojson.js' ); app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . listen ( 3000 ); Crear la variable que contiene la url del servicio GTFS de L\u00edneas, paradas, horarios de autobuses de la EMT de Valencia 5 . Escribir lo siguiente justo despues de la variable gtfs2geojson var express = require ( 'express' ); var app = express (); var request = require ( 'request' ); var path = require ( 'path' ); var https = require ( 'https' ); var fs = require ( 'fs' ); var yauzl = require ( \"yauzl\" ); var gtfs2geojson = require ( './gtfs2geojson.js' ); const url = 'https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . listen ( 3000 ); Crear una funci\u00f3n llamada getZip para descargar un archivo. La funci\u00f3n recibe como par\u00e1metro una url. Escribir lo siguiente al final del archivo app.js var express = require ( 'express' ); var app = express (); var request = require ( 'request' ); var path = require ( 'path' ); var https = require ( 'https' ); var fs = require ( 'fs' ); var yauzl = require ( \"yauzl\" ); var gtfs2geojson = require ( './gtfs2geojson.js' ); const url = 'https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( \"gtfs.zip\" ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( 'finish' , function (){ resolve (); }); }); } Crear una funci\u00f3n que extrae un archivo de un zip. La funcion recibe como par\u00e1metro el nombre del archivo que se desea extraer. Escribir lo siguiente al final del archivo app.js var express = require ( 'express' ); var app = express (); var request = require ( 'request' ); var path = require ( 'path' ); var https = require ( 'https' ); var fs = require ( 'fs' ); var yauzl = require ( \"yauzl\" ); var gtfs2geojson = require ( './gtfs2geojson.js' ); const url = 'https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( \"gtfs.zip\" ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( 'finish' , function (){ resolve (); }); }); } function leerZip ( archivo ){ return new Promise ( function ( resolve , reject ) { yauzl . open ( 'gtfs.zip' , { lazyEntries : true }, function ( err , zipfile ) { if ( err ) throw err ; zipfile . readEntry (); zipfile . on ( \"entry\" , function ( entry ) { if ( /\\/$/ . test ( entry . fileName )) { // Directory file names end with '/'. // Note that entires for directories themselves are optional. // An entry's fileName implicitly requires its parent directories to exist. zipfile . readEntry (); } else { // file entry if ( entry . fileName === archivo ){ zipfile . openReadStream ( entry , function ( err , readStream ) { if ( err ) throw err ; var file = fs . createWriteStream ( entry . fileName ); readStream . pipe ( file ); file . on ( 'finish' , function (){ resolve (); }); }); } else { zipfile . readEntry (); } } }); }); }); } Descargar el archivo GTFS y guardarlo en el ordenador. Escribir lo siguiente justo antes de la l\u00ednea donde definimos el puerto por el cual escucha nuestro servidor var express = require ( 'express' ); var app = express (); var request = require ( 'request' ); var path = require ( 'path' ); var https = require ( 'https' ); var fs = require ( 'fs' ); var yauzl = require ( \"yauzl\" ); var gtfs2geojson = require ( './gtfs2geojson.js' ); const url = 'https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . all ( \"/getdata/*\" , function ( req , res ) { getZip ( url ). then ( function (){ Promise . all ([ leerZip ( 'shapes.txt' ), leerZip ( 'stops.txt' )]). then ( values => { res . json ({ \"msg\" : \"archivos descargados\" }); }); }); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( \"gtfs.zip\" ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( 'finish' , function (){ resolve (); }); }); } function leerZip ( archivo ){ return new Promise ( function ( resolve , reject ) { yauzl . open ( 'gtfs.zip' , { lazyEntries : true }, function ( err , zipfile ) { if ( err ) throw err ; zipfile . readEntry (); zipfile . on ( \"entry\" , function ( entry ) { if ( /\\/$/ . test ( entry . fileName )) { // Directory file names end with '/'. // Note that entires for directories themselves are optional. // An entry's fileName implicitly requires its parent directories to exist. zipfile . readEntry (); } else { // file entry if ( entry . fileName === archivo ){ zipfile . openReadStream ( entry , function ( err , readStream ) { if ( err ) throw err ; var file = fs . createWriteStream ( entry . fileName ); readStream . pipe ( file ); file . on ( 'finish' , function (){ resolve (); }); }); } else { zipfile . readEntry (); } } }); }); }); } Reiniciar nuestro servidor de node, ir a la consola y presionar Crtl+c. Escribir node app.js. Abrir la url http://localhost:3000/getdata/ en el navegador para comprobar que se han descargado correctamente los archivos gtfs.zip , shapes.txt y stops.txt . Leer los archivos GTFS y convertirlos a GeoJson. Escribir lo siguiente justo antes de la l\u00ednea donde definimos el puerto por el cual escucha nuestro servidor var express = require ( 'express' ); var app = express (); var request = require ( 'request' ); var path = require ( 'path' ); var https = require ( 'https' ); var fs = require ( 'fs' ); var yauzl = require ( \"yauzl\" ); var gtfs2geojson = require ( './gtfs2geojson.js' ); const url = 'https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip' ; app . get ( '/' , function ( req , res ){ res . sendFile ( __dirname + '/index.html' ); }); app . all ( \"/getdata/*\" , function ( req , res ) { getZip ( url ). then ( function (){ Promise . all ([ leerZip ( 'shapes.txt' ), leerZip ( 'stops.txt' )]). then ( values => { res . json ({ \"msg\" : \"archivos descargados\" }); }); }); }); app . all ( \"/stops/*\" , function ( req , res ) { gtfs2geojson . stops ( fs . readFileSync ( 'stops.txt' , 'utf8' ), function ( result ){ res . json ( result ); }); }); app . all ( \"/shapes/*\" , function ( req , res ) { gtfs2geojson . lines ( fs . readFileSync ( 'shapes.txt' , 'utf8' ), function ( result ){ res . json ( result ); }); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( \"gtfs.zip\" ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( 'finish' , function (){ resolve (); }); }); } function leerZip ( archivo ){ return new Promise ( function ( resolve , reject ) { yauzl . open ( 'gtfs.zip' , { lazyEntries : true }, function ( err , zipfile ) { if ( err ) throw err ; zipfile . readEntry (); zipfile . on ( \"entry\" , function ( entry ) { if ( /\\/$/ . test ( entry . fileName )) { // Directory file names end with '/'. // Note that entires for directories themselves are optional. // An entry's fileName implicitly requires its parent directories to exist. zipfile . readEntry (); } else { // file entry if ( entry . fileName === archivo ){ zipfile . openReadStream ( entry , function ( err , readStream ) { if ( err ) throw err ; var file = fs . createWriteStream ( entry . fileName ); readStream . pipe ( file ); file . on ( 'finish' , function (){ resolve (); }); }); } else { zipfile . readEntry (); } } }); }); }); } Reiniciar nuestro servidor de node, ir a la consola y presionar Crtl+c. Escribir node app.js. Abrir la url http://localhost:3000/stops/ en el navegador para comprobar que se muestra un GeoJson con la informaci\u00f3n de las paradas.","title":"Crear el proxy"},{"location":"18_ejemplo_gtfs/#modificar-el-mapa","text":"Cargar este JSON en nuestro mapa utilizando un plugin de Leaflet llamado leaflet-ajax 6 . Este plugin permite hacer una llamada AJAX a un servicio que retorne un JSON y cargar la respuesta en un mapa. Para cargar este plugin debemos agregar lo siguiente justo despu\u00e9s de donde hemos cargado el leaflet <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo GTFS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Utilizar el plugin para agregar la capa de paradas al mapa llamando a nuestro servidor. Agregar lo siguiente al final de nuestro c\u00f3digo: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo GTFS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( '/stops/' ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : \"#A30000\" , color : \"#A30000\" , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); </ script > </ body > </ html > Recargar el mapa y comprobar que aparecen los puntos de las paradas en el mapa. Utilizar el plugin para agregar la capa de l\u00edneas al mapa llamando a nuestro servidor. Agregar lo siguiente al final de nuestro c\u00f3digo: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo GTFS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( '/stops/' ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : \"#A30000\" , color : \"#A30000\" , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); var geojsonLineas = new L . GeoJSON . AJAX ( '/shapes/' ,{ }). addTo ( map ); </ script > </ body > </ html > Recargar el mapa y comprobar que aparecen las l\u00edneas del bus en el mapa. Cargar la librer\u00eda de manipulaci\u00f3n de colores chroma.js 7 . Escribir lo siguiente despu\u00e9s de donde cargarmos el plugin de leaflet.ajax <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo GTFS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/chroma-js/2.0.6/chroma.min.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( '/stops/' ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : \"#A30000\" , color : \"#A30000\" , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); var geojsonLineas = new L . GeoJSON . AJAX ( '/shapes/' ,{ }). addTo ( map ); </ script > </ body > </ html > Dar estilo a la capa de l\u00edneas generando un color aleatorio. Escribir lo siguiente en las opciones de la capa geojsonLineas <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Ejemplo GTFS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { height : 100 % ; width : 100 % ; position : absolute ; } </ style > </ head > < body > < div id = \"map\" > </ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/chroma-js/2.0.6/chroma.min.js\" ></ script > < script > var map = L . map ( 'map' ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( '/stops/' ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : \"#A30000\" , color : \"#A30000\" , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); var geojsonLineas = new L . GeoJSON . AJAX ( '/shapes/' ,{ style : function ( geoJsonFeature ){ return { color : chroma . random (), opacity : 0.5 }; } }). addTo ( map ); </ script > </ body > </ html > Recargar el mapa y comprobar que aparecen las l\u00edneas del bus en el mapa con colores aleatorios. ejemplo gtfs Ejercicios Mostrar un popup con informaci\u00f3n de la propiedad shape_id al hacer click en la capa de l\u00edneas Cargar datos del gtfs de FGC https://www.fgc.cat/es/opendata/ En el siguiente enlace est\u00e1 el fichero de gtfs https://www.fgc.cat/wp-content/uploads/2018/02/google_transit.zip Centrar el mapa en Barcelona","title":"Modificar el mapa"},{"location":"18_ejemplo_gtfs/#referencias","text":"https://developers.google.com/transit/gtfs/?hl=es-419 \u21a9 http://leafletjs.com/ \u21a9 https://opendata.vlci.valencia.es \u21a9 https://nodejs.org/es/ \u21a9 http://gobiernoabierto.valencia.es/es/dataset/?id=google-transit-lineas-paradas-horarios-de-autobuses \u21a9 https://github.com/calvinmetcalf/leaflet-ajax \u21a9 https://github.com/gka/chroma.js/ \u21a9","title":"Referencias"},{"location":"1_introduccion_a_las_ides/","text":"Introducci\u00f3n a las IDE's Temario Antecedentes Qu\u00e9 es una IDE? Componentes de una IDE IDEC IDEE INSPIRE Otras IDES Tradicionalmente, la obtenci\u00f3n de informaci\u00f3n geogr\u00e1fica ha estado caracterizada por una serie de dificultades (formatos, precios, d\u00f3nde buscarla...), ya que estaba muy dispersa y en diferentes formatos. No obstante, el desarrollo de tecnolog\u00edas de la informaci\u00f3n y la mejora de las comunicaciones tiene que permitir salvar todos estos obst\u00e1culos y facilitar el acceso tanto a la informaci\u00f3n del sector p\u00fablico como privado empar\u00e1ndose en unas pol\u00edticas de consenso y en un marco legal establecido. Si a todo esto le sumamos el uso de herramientas desarrolladas con tecnolog\u00edas est\u00e1ndar las posibilidades de b\u00fasqueda, acceso y intercambio de informaci\u00f3n son infinitas. La informaci\u00f3n geogr\u00e1fica es uno de los elementos m\u00e1s esenciales en la toma de decisiones, as\u00ed como uno de los m\u00e1s costosos (entre un 70 y un 80% de los costes de un proyecto SIG est\u00e1n destinados a la compra y/o mantenimiento de los datos). Esta informaci\u00f3n est\u00e1 concentrada mayoritariamente al sector p\u00fablico (de estima que entre un 80 y un 90% de la informaci\u00f3n geogr\u00e1fica es generada por administraciones p\u00fablicas). El hecho de no conocer la informaci\u00f3n disponible, hace que los datos puedan ser comprados una y otra vez por diferentes administraciones, aumentando innecesariamente el coste de los proyectos. Antecedentes En 1987, el comit\u00e9 Chorley, del Departamento de Medioambiente de Estados Unidos, concluy\u00f3 que las barreras pol\u00edticas e institucionales que restringen actualmente el uso de los SIG deben ser superadas. Esto incluye problemas de incompatibilidad por diferencias de definici\u00f3n y formatos, as\u00ed como restricciones al acceso y adquisici\u00f3n de los propios datos. En la conferencia de las Naciones Unidas sobre medio ambiente y desarrollo que tuvo lugar en en R\u00edo de Janeiro en 1992. Entre los muchos temas a debate en esta reuni\u00f3n, uno de especial relevancia fue el papel de la informaci\u00f3n geogr\u00e1fica para tratar los problemas acerca de los cuales se debat\u00eda (protecci\u00f3n medioambiental, cooperaci\u00f3n internacional, desarrollo, etc.). Qued\u00f3 claro en aquel momento que establecer mecanismos para afrontar esos problemas pasaba necesariamente por instaurar de forma paralela mecanismos que permitieran aprovechar mejor la informaci\u00f3n geogr\u00e1fica y lograr una mayor coordinaci\u00f3n entre las organizaciones estatales encargadas de su manejo. 1 El concepto IDE nace en los a\u00f1os noventa como una voluntad pol\u00edtica en Estados Unidos para garantizar la interoperabilidad entre la informaci\u00f3n geogr\u00e1fica generada por las diferentes agencias federales. La primera IDE se implant\u00f3 a mediados de los 90, cuando EEUU inici\u00f3 el desarrollo de herramientas de acceso a datos, precursoras de las IDE Nacionales, para coordinar el desarrollo, uso, intercambio y la difusi\u00f3n de la cartograf\u00eda topogr\u00e1fica y los datos espaciales relacionados. En 1994, Bill Clinton aprob\u00f3 la Orden Ejecutiva 12906 d\u00f3nde dec\u00eda: \"La informaci\u00f3n geogr\u00e1fica es vital para a promover el desarrollo econ\u00f3mico, aprovechar nuestros recursos naturales y proteger el medio ambiente. La tecnolog\u00eda moderna permite mejorar la adquisici\u00f3n, distribuci\u00f3n y utilizaci\u00f3n de datos geogr\u00e1ficos y cartogr\u00e1ficos. La Revisi\u00f3n del Desarrollo Nacional, ha recomendado que la rama ejecutiva desarrolle, en cooperaci\u00f3n con los estados, los gobiernos locales y el sector privado, una Infraestructura Nacional de Datos Espaciales para a apoyar las aplicaciones de los datos geoespaciales en el sector p\u00fablico y privado, en \u00e1reas como el transporte, el desarrollo comunitario, la agricultura, la atenci\u00f3n de emergencias, la gesti\u00f3n ambiental y la tecnolog\u00eda de informaci\u00f3n\". Otros pa\u00edses iniciaron los primeros pasos con los mismos objetivos. Los pa\u00edses que hab\u00edan implementado IDE de primera generaci\u00f3n, se replantean la iniciativa y la van actualizando y modificando, adapt\u00e1ndola a las necesidades del momento (se puede situar en el a\u00f1o 2000). Esto trajo un r\u00e1pido incremento de nuevos pa\u00edses que se implicaron en el proceso de creaci\u00f3n de infraestructuras de datos (el a\u00f1o 2002, 120 pa\u00edses hab\u00edan iniciado o iniciaban proyectos IDE) y la aparici\u00f3n de una comunidad IDE, en la cual se pod\u00edan compartir e intercambiar experiencias Qu\u00e9 es una IDE? Existen varias definiciones para describir IDE, pero una de las mas utilizada y extendida es la elaborada por la Federal Geographic Data Committee (FGDC) que la define como: Una Infraestructura de Datos Espaciales (IDE) se puede definir como un conjunto de tecnolog\u00edas, pol\u00edticas, est\u00e1ndares y recursos humanos necesarios para a adquirir, procesar, almacenar, distribuir y mejorar la utilizaci\u00f3n de la informaci\u00f3n geogr\u00e1fica - Federal Geographic Data Committee (FGDC) Una IDE (Infraestructura de Datos Espaciales) es un sistema inform\u00e1tico integrado por un conjunto de recursos (cat\u00e1logos, servidores, programas, datos, aplicaciones, p\u00e1ginas Web,...) dedicados a gestionar Informaci\u00f3n geogr\u00e1fica disponibles en Internet, que cumpla una serie de condiciones de interoperabilidad. 2 A partir de estas definiciones podemos vislumbrar que una IDE no es solo una implementaci\u00f3n tecnol\u00f3gica sino que comprende una parte muy importante de comunicaci\u00f3n, no precisamente entre servidor-servidor, sino entre Instituci\u00f3n\u2014Instituciones, departamento\u2014departamento, en definitiva persona\u2014persona para establecer los marcos de colaboraci\u00f3n para compartir, describir y acceder a los datos geogr\u00e1ficos. Visi\u00f3n global IDE Comparaci\u00f3n Conceptualmente, las Infraestructuras de datos tienen la misma finalidad que las carreteras y las autopistas: mejorar la comunicaci\u00f3n, facilitar el acceso, incrementar el comercio, etc. Infraestructura de tr\u00e1nsito Infraestructura de datos espaciales Objetivos: mejorar la accesibilidad y el uso de los coches Objetivos: mejorar el acceso, el uso de la Geoinformaci\u00f3n y evitar duplicaciones de datos Red de transporte (carreteras, caminos, puentes, etc.) Internet Veh\u00edculos Datos Ayudas: mapas, carteles, se\u00f1ales Cat\u00e1logos (datos y servicios) Conductores Usuarios Taller / Garaje (Servicios) Webservices Parking Almac\u00e9n de geodatos de los proveedores Fabricante de coches Proveedores de datos y servicios Carn\u00e9 de conducir Personal cualificado C\u00f3digo de circulaci\u00f3n Est\u00e1ndares Regulaci\u00f3n tr\u00e1nsito Pol\u00edtica + Lesgislaci\u00f3n Pol\u00edtica (Centro de control de tr\u00e1nsito) Marco institucional (Centro de Geodatos) Una buena infraestructura viaria proporciona una mejor accesibilidad, de lo que se deriva una mejor comunicaci\u00f3n entre regiones y, por tanto, un incremento del comercio. Esta es precisamente, la finalidad de las IDE: facilitar el acceso y el uso de la informaci\u00f3n geogr\u00e1fica y fomentar su comercio. Componentes de una IDE Una IDE est\u00e1 compuesta de 4 elementos fundamentales: Marco institucional Organizaci\u00f3n Datos y Metadatos Descriptores de les datos Geoservicios Visualizaci\u00f3n y acceso a los datos Usuarios y colaboradores Marco institucional Para que una IDE pueda prosperar tiene que contar con un suporte institucional firme que garantice su impulso inicial. Este suporte se tiene que plasmar con un marco legal adecuado, que anime a las diferentes administraciones p\u00fablicas o entidades a participar en las activitades de la IDE. Los datos y sus descriptores Las administraciones p\u00fablicas son las propietarias de la mayor\u00eda de la informaci\u00f3n geogr\u00e1fica de referencia para lo cual, asegurando su implicaci\u00f3n garantizamos una cartograf\u00eda de base esencial para el desarrollo de la IDE. Los datos, por si solos, no nos aportan demasiada informaci\u00f3n. Por este motivo, es necesaria su descripci\u00f3n. Los metadatos describen el contenido y las caracter\u00edsticas de los datos, aportando una informaci\u00f3n muy valiosa que ayuda a \u201ccontextualizar\u201d el dato, y en ocasiones, facilitar su acceso. Estos metadatos tienen que ser almacenados en un Cat\u00e1logo on line, consultable para a cualquier usuario, y descritos seg\u00fan unos est\u00e1ndares que aportan las pautas de c\u00f3mo y qu\u00e9 informaci\u00f3n hay que dar en cada caso. La visualizaci\u00f3n y el acceso a los datos El intercanvio de informaci\u00f3n y la interoperatividad de los sistemas son dos conceptos clave en una IDE. Ambos se pueden conseguir gracias a los est\u00e1ndares. OGC ha desarrollado una serie de especificaciones est\u00e1ndar que permiten a dos sistemas diferentes, con arquitecturas y formatos de datos diversos combinar cartograf\u00eda sin ning\u00fan esfuerzo por parte del usuario. Para f\u00e1cilitar la visualizaci\u00f3n y el acceso a los datos los encargados del desarrollo de la IDE generalmente implementan un Geoportal que incluye entre otras cosas: Metadatos (descripci\u00f3n del contenido, la cualidad y otras caracter\u00edsticas de los datos) Cat\u00e1logo (publicaci\u00f3n en Internet de los metadatos de datos, servicios y esquemas) Servicio de acceso a datos y servicios (clientes, visores) Servidores de mapas con proveedores de informaci\u00f3n Servicios de geoprocesamiento (procesos inform\u00e1ticos que manipulan y transforman datos geoespaciales: transformaciones de coordenadas, de proyecciones, an\u00e1lisis espacial...) Conexiones a otras IDE's. Los usuarios y colaboradores Para que una IDE se pueda considerar como tal, tiene que haber unos usuarios que la usen, en este sentido la tarea de difusi\u00f3n es muy importante. A medida que se incrementa su uso, las empresas empiezan a ver las posibilidades comerciales y a implicarse en el proyecto, acelerando as\u00ed el crecimiento de la IDE. Principios en que se basa el dearrollo de una IDE Datos recogidos una vez y mantenidos en el nivel donde se logra m\u00e1xima efectividad Quien genera, y sobre todo mantiene, un tipo de datos debe encargarse de organizarlos en una base de datos y facilitar el acceso a ellos mediante los servicios adecuados No deben duplicarse los mismos datos en bases de datos distintas que no aseguren exactamente el mismo nivel de actualizaci\u00f3n Debe ser posible combinar IG con total continuidad para un \u00e1mbito territorial extenso desde fuentes diversas La informaci\u00f3n geogr\u00e1fica en un \u00e1mbito territorial debe basarse en una informaci\u00f3n geogr\u00e1fica de referencia com\u00fan, y acorde con la precisi\u00f3n de la informaci\u00f3n geogr\u00e1fica y en un \u00fanico Sistema Geod\u00e9sico de referencia Debe ser posible superponer capas de informaci\u00f3n geogr\u00e1fica de distintas tem\u00e1ticas y procedencias Debe ser posible compartir la IG entre usuarios y aplicaciones Debe ser posible que la informaci\u00f3n recogida en un nivel o sector sea compartida por los otros Debe ser f\u00e1cil descubrir la informaci\u00f3n geogr\u00e1fica disponible, y en qu\u00e9 condiciones puede conseguirse y usarse Metadatos Calidad Normas comunes En un escenario \u00f3ptimo, todo usuario de una IDE deber\u00eda poder descubrir, por ejemplo, que informaci\u00f3n geogr\u00e1fica existe en zona concreta del territorio, visualizar esta informaci\u00f3n y finalmente, si es de su inter\u00e9s, descargarla. Para llegar a esta meta, toda IDE que se precie debe: Orientar su arquitectura a servicios (SOA) Uno de los principios b\u00e1sicos de toda IDE es la no replicaci\u00f3n de datos geogr\u00e1ficos ni la creaci\u00f3n de grandes bases de datos centralizadas. Una IDE debe fomentar un modelo distribuido d\u00f3nde cada departamento o ente se responsabilice de sus datos y se encargue de describirlos y ponerlos a disposici\u00f3n de los dem\u00e1s. Implementar aplicaciones que posibiliten descubrir, visualizar y procesar informaci\u00f3n geogr\u00e1fica. Entre estas aplicaciones podr\u00edamos definir un n\u00facleo presente en toda IDE: un cat\u00e1logo de metadatos, servidores de mapas y un conjunto de servicios geogr\u00e1ficos. Adoptar los est\u00e1ndares de interoperabilidad geoespacial para facilitar la comunicaci\u00f3n entre componentes. Para la descripci\u00f3n de los metadatos se basa en est\u00e1ndares ISO de la familia 19, dedicada al mundo geospacial. Pero a nivel de interfaces de comunicaci\u00f3n entre servidores y entre clientes (ej. Un navegador web) y servidores existe un consorcio llamado OpenGeospatial (OGC) encargado de definir las especificaciones utilizadas. Podr\u00edamos que decir que el papel que juega el consorcio W3C en cuanto a la estandarizaci\u00f3n de la Word Wide Web (www) es parecido al de OGC dentro del mundo geoespacial. La utilidad de las IDE y sus ventajas Cuando un usuario quiere acceder a informaci\u00f3n geogr\u00e1fica se puede encontrar con una situaci\u00f3n ca\u00f3tica, al no saber d\u00f3nde ir a buscarla. A nivel de cooperaci\u00f3n entre administraciones y empresas, la situaci\u00f3n es tambi\u00e9n muy compleja, a causa del gran n\u00famero de contactos que hay que realizar para obtener estos datos y los permisos para utilizarlos. En un entorno IDE todo es m\u00e1s sencillo. Gracias a la catalogaci\u00f3n de los datos y mediante los servidores de cat\u00e1logo los usuarios pueden localizar y acceder a la informaci\u00f3n geogr\u00e1fica existente. La IDE se encarga tambi\u00e9n de establecer acuerdos con las administraciones con el objetivo que estas permitan la difusi\u00f3n de su informaci\u00f3n mediante un servicio de webmapping . Ambos servicios (servidor de cat\u00e1logo y webmapping) tienen que ser accesibles a trav\u00e9s de un \u00fanico portal web. Por tanto, el uso de las IDE mejora considerablemente la din\u00e1mica del sector de la geoinformaci\u00f3n. Otras ventajas de las IDE son: Facilita la toma de decisiones Reduce esfuerzos y costes Proporciona datos mejores y m\u00e1s actualizados Apoya la creaci\u00f3n de nuevas oportunidades de negocio. Hay que tener presente que una IDE no se tiene que ver s\u00f3lo desde la vertiente tecnol\u00f3gica sino que existe tambi\u00e9n una vertiente social, en que los usuarios (el sector p\u00fablico, el privado y la poblaci\u00f3n) tienen que dar su opini\u00f3n, a partir de la cual se podr\u00e1n determinar las estrategias a seguir. En el proceso de implantaci\u00f3n de una IDE tambi\u00e9n hay que superar obst\u00e1culos t\u00e9cnicos (no disponibilidad de datos, de est\u00e1ndares, metadatos, redes de comunicaci\u00f3n, banda ancha...), econ\u00f3micos, socio-culturales (conocimiento, educaci\u00f3n, seguridad, libertad de acceso...), pol\u00edticos-legales (datos delicados, propiedad intelectual...) y d\u00e9ficit de suporte (no se conoce la finalidad y el valor de las IDE). Las IDE, adem\u00e1s de mantener v\u00edas de cooperaci\u00f3n y relaciones con el sector p\u00fablico y privado de la su regi\u00f3n, tienen que hacerlo tambi\u00e9n tanto con las IDE de su nivel como con las de otros niveles Niveles de desarrollo de una IDE Tenemos que pensar que una IDE conlleva un factor multi-escalar en su implementaci\u00f3n, esta puede ser implementada a nivel europeo, nivel estatal, nivel regional e incluso a nivel municipal. Cada nivel tiene la responsabilidad de interoperar con el resto de niveles Ejemplos de niveles de desarrollo de una IDE Global - GSDI (Global Spatial Data Infrastructure) http://gsdiassociation.org/ Europeo - INSPIRE INfraestructure for SPatial InfoRmation in Europe http://inspire-geoportal.ec.europa.eu/ Nacional - IDEE (Infraestructura de Datos Espaciales de Espa\u00f1a) http://idee.es/ Regional - IDEC (Infraestructura de Dades Espacials de Catalunya) http://www.ide.cat Local - Barcelona http://w133.bcn.cat/geoportalbcn/GeoPortal.aspx?lang=es IDEC La IDEC (Infraestructura de Dades Espacials de Catalunya) es una iniciativa creada el a\u00f1o 2002 para desarrollar y mantener una Infraestructura de Datos Espaciales (IDE) en el territorio de Catalunya. Esta infraestructura pretende facilitar y mejorar el acceso a la informaci\u00f3n y los servicios geogr\u00e1ficos disponibles, poniendo al alcance de los usuarios herramientas para buscar, descubrir, consultar y descargar estos recursos mediante la web, para utilizarlos y explotarlos posteriormente. El proyecto se hace posible gracias a la participaci\u00f3n activa y colaborativa de los diferentes tipos de actores involucrados: los productores y/o proveedores de informaci\u00f3n geogr\u00e1fica (o espacial) y los propios usuarios. IDEE La IDEE (Infraestructura de Datos Espaciales de Espa\u00f1a) tiene como objetivo integrar a trav\u00e9s de Internet los datos, metadatos, servicios e informaci\u00f3n de tipo geogr\u00e1fico que se producen en Espa\u00f1a, a nivel estatal, auton\u00f3mico y local, cumpliendo una serie de condiciones de interoperabilidad (normas, protocolos, especificaciones) y conforme a sus respectivos marcos legales. El fruto de este trabajo es el proyecto IDEE. La IDEE arranc\u00f3 en 2002 cuando la Comisi\u00f3n Permanente del Consejo Superior Geogr\u00e1fico aprob\u00f3 el 10 abril la puesta en marcha de una Infraestructura Nacional de Datos Espaciales. IDEE es el resultado de la integraci\u00f3n, en primer lugar, de todas las IDE establecidas por los productores oficiales de datos a nivel tanto estatal como auton\u00f3mico y local, y en segundo lugar, de todo tipo de infraestructuras sectoriales y privadas. En cada C.C.A.A y organismo de la Administraci\u00f3n General del Estado (AGE) hay un representante, responsable de la implantaci\u00f3n de la IDE en su C.C.A.A y en el organismo de la AGE. Marco legal En Espa\u00f1a la LISIGE se aplica a todos los datos geogr\u00e1ficos que cumplan las siguientes condiciones Se refieran a una zona geogr\u00e1fica del territorio nacional, el mar territorial, la zona contigua, la plataforma continental y la zona exclusiva econ\u00f3mica exclusiva, generada o bajo responsabilidad de las Administraciones p\u00fablicas y sobre la que el Estado tenga jurisdicci\u00f3n Est\u00e9n en formato electr\u00f3nico Su producci\u00f3n y mantenimiento sea competencia de una Administraci\u00f3n u organismo del sector p\u00fablico Se refieran a Informaci\u00f3n Geogr\u00e1fica de Referencia o a Datos Tem\u00e1ticos Fundamentales o a Datos Tem\u00e1ticos Generales existentes, salvaguardando en este caso los intereses prioritarios de la defensa nacional INSPIRE INSPIRE (INfrastructure for SPatial InfoRmation in Europe) tiene por objetivo hacer disponible una informaci\u00f3n geogr\u00e1fica de calidad, armonizada y relevante para apoyar la formulaci\u00f3n, la implementaci\u00f3n, la monitorizaci\u00f3n y la evaluaci\u00f3n de las pol\u00edticas comunitarias con un impacto o dimensi\u00f3n territorial. INSPIRE es una iniciativa legal de la UE que dirigir\u00e1 protocolos y est\u00e1ndares, aspectos de coordinaci\u00f3n y organizaci\u00f3n, pol\u00edticas de datos incluyendo el acceso a los datos y la creaci\u00f3n y el mantenimiento de la informaci\u00f3n espacial. El 17 de noviembre de 2003, el Parlamento Europeo aprob\u00f3 la Directiva 2003/98 CE, en lo referente a la reutilizaci\u00f3n de la informaci\u00f3n del sector p\u00fablico. Su finalidad es fijar un marco legal que armonice el uso y la explotaci\u00f3n de la informaci\u00f3n del sector p\u00fablico (condiciones de reutilizaci\u00f3n, formatos disponibles, principios de tarificaci\u00f3n, transparencia, etc.), fomentando as\u00ed un mercado interior entre todos los estados miembros. La nueva directiva se dirige claramente a facilitar informaci\u00f3n desde las Entidades P\u00fablicas hacia el sector privado, que puede darle un amplio valor a\u00f1adido a. De manera especial favorecer\u00e1 la difusi\u00f3n de informaci\u00f3n geogr\u00e1fica, dado que las administraciones p\u00fablicas son el principal generador de este tipo de informaci\u00f3n. Lo que puede reforzar iniciativas IDE, entre muchas de otras. Para asegurar que las infraestructuras de datos espaciales de los Estados miembros sean compatibles e interoperables en un contexto comunitario y transfronterizo, la Directiva exige que se adopten Normas de Ejecuci\u00f3n comunes Implementing Rules) espec\u00edficas para las siguientes \u00e1reas metadatos, conjuntos de datos, servicios de red, servicios de datos espaciales, datos y servicios de uso compartido y seguimiento e informes Estas normas son de obligado cumplimiento en cada uno de los pa\u00edses de la Uni\u00f3n La Directiva INSPIRE se aplica en diferentes etapas hasta el 2021 que deber\u00e1 tener aplicaci\u00f3n plena Es el primer paso de una amplia iniciativa multisectorial, que inicialmente se centrar\u00e1 en la informaci\u00f3n espacial necesaria para las pol\u00edticas medio ambientales y que estar\u00e1 abierta a las necesidades de otras \u00e1reas pol\u00edticas como la agricultura y el transporte. La situaci\u00f3n general respecto a la informaci\u00f3n espacial en Europa es de fragmentaci\u00f3n de datos y fuentes. Hay lagunas en la disponibilidad de los datos, carencia de harmonizaci\u00f3n entre conjuntos de datos en las diferentes escalas y sistemas de referencia y duplicaci\u00f3n de la informaci\u00f3n. Estos problemas hacen dif\u00edcil la identificaci\u00f3n, el acceso y el uso de los datos disponibles. Afortunadamente, est\u00e1 creciendo la conciencia sobre la necesidad de una informaci\u00f3n georeferenciada de calidad para entender mejor las relaciones humanas con su entorno. La iniciativa tiene la intenci\u00f3n de crear una infraestructura europea de datos espaciales que d\u00e9 servicios de informaci\u00f3n espacial integrada a los usuarios. Estos servicios tendr\u00e1n que permitir a los usuarios identificar y acceder a la informaci\u00f3n geogr\u00e1fica de muy variadas fuentes, garantizando la interoperatividad. Los posibles servicios son la visualizaci\u00f3n de capas de informaci\u00f3n, la superposici\u00f3n de informaci\u00f3n procedente de diferentes fuentes, el an\u00e1lisis espacial y temporal, etc. Principios de INSPIRE Los datos tienen que recogerse una sola vez y conservarse en el nivel donde resulten m\u00e1s eficaces. Tiene que ser posible combinar, sin problemas de continuidad, la informaci\u00f3n geogr\u00e1fica procedente de diferentes fuentes europeas y ponerla al alcance de los usuarios y aplicaciones. La informaci\u00f3n recogida a un nivel tiene que poder ser compartida a todos los niveles, la informaci\u00f3n a gran escala para investigaciones detalladas, y la de peque\u00f1a escala para finalidades estrat\u00e9gicas. La informaci\u00f3n geogr\u00e1fica necesaria a todos los niveles tiene que ser abundante sin limitar su uso extensivo Tiene que ser sencillo descubrir qu\u00e9 informaci\u00f3n geogr\u00e1fica est\u00e1 disponible, si cubre las necesidades para un uso determinado y bajo qu\u00e9 condiciones se puede adquirir y utilizar Los datos geogr\u00e1ficos tienen que ser f\u00e1ciles de entender y de interpretar porque tienen que estar adecuadamente documentados Temas INSPIRE Annex I Coordinate reference systems Geographical grid systems Geographical names Administrative units Addresses Cadastral parcels Transport networks Hydrography Protected sites Annex II Elevation Land cover Orthoimagery Geology Annex III Statistical units Buildings Soil Land use Human health and safety Utility and governmental services Environmental monitoring Facilities Production and industrial facilities Agricultural and aquaculture facilities Population distribution and demography Area management / restriction / regulation zones & reporting units Natural risk zones Atmospheric conditions Meteorological geographical features Oceanographic geographical features Sea regions Bio-geographical regions Habitats and biotopes Species distribution Energy Resources Mineral Resources Otras IDES GSDI (Global Spatial Data Infrastructure) Convertida en asociaci\u00f3n el a\u00f1o 2004, esta iniciativa empez\u00f3 a mediados de los 90 con el objetivo de fomentar la captura, el procesamiento, la integraci\u00f3n y la compartici\u00f3n de informaci\u00f3n y datos espaciales, utilizando est\u00e1ndares comunes y t\u00e9cnicas y sistemas interoperables, accesibles v\u00eda web. La GSDI organiza conferencias de forma regular. La primera se celebr\u00f3 el a\u00f1o 95 en Bonn, d\u00f3nde s\u00f3lo fueron invitados un peque\u00f1o n\u00famero de asistentes. En la conferencia del a\u00f1o 97, definieron la GSDI c\u00f3mo: \u201c...las pol\u00edticas, misiones organizativas, datos, tecnolog\u00edas, est\u00e1ndares, mecanismos de distribuci\u00f3n y recursos financieros y humanos para asegurar que no se impida lograr los objetivos, a aquellos que trabajan a escala global y local\u201d. Tiene por objetivo fomentar la captura, el procesamiento, la integraci\u00f3n, el almacenamiento y el intercambio de datos e informaci\u00f3n espacial utilizando est\u00e1ndares comunes y t\u00e9cnicas y sistemas interoperables v\u00eda web. Para lograrlo, es necesario poner un especial \u00e9nfasis en los m\u00e9todos de difusi\u00f3n, educaci\u00f3n, recursos, pol\u00edticas y aspectos legales relacionados con su desarrollo. Ejemplos de otras IDES Internacional Geoportal ONU Nacional IGN France Estados Unidos Chile Regional IDE Canarias IDE Andaluc\u00eda Local C\u00e1ceres Referencias https://github.com/volaya/libro-sig/releases/download/v2.0/Libro_SIG.pdf \u21a9 https://www.miteco.gob.es/es/cartografia-y-sig/ide/presentacion/que-es-ide.aspx \u21a9","title":"1. Introducci\u00f3n a las IDE's"},{"location":"1_introduccion_a_las_ides/#introduccion-a-las-ides","text":"Temario Antecedentes Qu\u00e9 es una IDE? Componentes de una IDE IDEC IDEE INSPIRE Otras IDES Tradicionalmente, la obtenci\u00f3n de informaci\u00f3n geogr\u00e1fica ha estado caracterizada por una serie de dificultades (formatos, precios, d\u00f3nde buscarla...), ya que estaba muy dispersa y en diferentes formatos. No obstante, el desarrollo de tecnolog\u00edas de la informaci\u00f3n y la mejora de las comunicaciones tiene que permitir salvar todos estos obst\u00e1culos y facilitar el acceso tanto a la informaci\u00f3n del sector p\u00fablico como privado empar\u00e1ndose en unas pol\u00edticas de consenso y en un marco legal establecido. Si a todo esto le sumamos el uso de herramientas desarrolladas con tecnolog\u00edas est\u00e1ndar las posibilidades de b\u00fasqueda, acceso y intercambio de informaci\u00f3n son infinitas. La informaci\u00f3n geogr\u00e1fica es uno de los elementos m\u00e1s esenciales en la toma de decisiones, as\u00ed como uno de los m\u00e1s costosos (entre un 70 y un 80% de los costes de un proyecto SIG est\u00e1n destinados a la compra y/o mantenimiento de los datos). Esta informaci\u00f3n est\u00e1 concentrada mayoritariamente al sector p\u00fablico (de estima que entre un 80 y un 90% de la informaci\u00f3n geogr\u00e1fica es generada por administraciones p\u00fablicas). El hecho de no conocer la informaci\u00f3n disponible, hace que los datos puedan ser comprados una y otra vez por diferentes administraciones, aumentando innecesariamente el coste de los proyectos.","title":"Introducci\u00f3n a las IDE's"},{"location":"1_introduccion_a_las_ides/#antecedentes","text":"En 1987, el comit\u00e9 Chorley, del Departamento de Medioambiente de Estados Unidos, concluy\u00f3 que las barreras pol\u00edticas e institucionales que restringen actualmente el uso de los SIG deben ser superadas. Esto incluye problemas de incompatibilidad por diferencias de definici\u00f3n y formatos, as\u00ed como restricciones al acceso y adquisici\u00f3n de los propios datos. En la conferencia de las Naciones Unidas sobre medio ambiente y desarrollo que tuvo lugar en en R\u00edo de Janeiro en 1992. Entre los muchos temas a debate en esta reuni\u00f3n, uno de especial relevancia fue el papel de la informaci\u00f3n geogr\u00e1fica para tratar los problemas acerca de los cuales se debat\u00eda (protecci\u00f3n medioambiental, cooperaci\u00f3n internacional, desarrollo, etc.). Qued\u00f3 claro en aquel momento que establecer mecanismos para afrontar esos problemas pasaba necesariamente por instaurar de forma paralela mecanismos que permitieran aprovechar mejor la informaci\u00f3n geogr\u00e1fica y lograr una mayor coordinaci\u00f3n entre las organizaciones estatales encargadas de su manejo. 1 El concepto IDE nace en los a\u00f1os noventa como una voluntad pol\u00edtica en Estados Unidos para garantizar la interoperabilidad entre la informaci\u00f3n geogr\u00e1fica generada por las diferentes agencias federales. La primera IDE se implant\u00f3 a mediados de los 90, cuando EEUU inici\u00f3 el desarrollo de herramientas de acceso a datos, precursoras de las IDE Nacionales, para coordinar el desarrollo, uso, intercambio y la difusi\u00f3n de la cartograf\u00eda topogr\u00e1fica y los datos espaciales relacionados. En 1994, Bill Clinton aprob\u00f3 la Orden Ejecutiva 12906 d\u00f3nde dec\u00eda: \"La informaci\u00f3n geogr\u00e1fica es vital para a promover el desarrollo econ\u00f3mico, aprovechar nuestros recursos naturales y proteger el medio ambiente. La tecnolog\u00eda moderna permite mejorar la adquisici\u00f3n, distribuci\u00f3n y utilizaci\u00f3n de datos geogr\u00e1ficos y cartogr\u00e1ficos. La Revisi\u00f3n del Desarrollo Nacional, ha recomendado que la rama ejecutiva desarrolle, en cooperaci\u00f3n con los estados, los gobiernos locales y el sector privado, una Infraestructura Nacional de Datos Espaciales para a apoyar las aplicaciones de los datos geoespaciales en el sector p\u00fablico y privado, en \u00e1reas como el transporte, el desarrollo comunitario, la agricultura, la atenci\u00f3n de emergencias, la gesti\u00f3n ambiental y la tecnolog\u00eda de informaci\u00f3n\". Otros pa\u00edses iniciaron los primeros pasos con los mismos objetivos. Los pa\u00edses que hab\u00edan implementado IDE de primera generaci\u00f3n, se replantean la iniciativa y la van actualizando y modificando, adapt\u00e1ndola a las necesidades del momento (se puede situar en el a\u00f1o 2000). Esto trajo un r\u00e1pido incremento de nuevos pa\u00edses que se implicaron en el proceso de creaci\u00f3n de infraestructuras de datos (el a\u00f1o 2002, 120 pa\u00edses hab\u00edan iniciado o iniciaban proyectos IDE) y la aparici\u00f3n de una comunidad IDE, en la cual se pod\u00edan compartir e intercambiar experiencias","title":"Antecedentes"},{"location":"1_introduccion_a_las_ides/#que-es-una-ide","text":"Existen varias definiciones para describir IDE, pero una de las mas utilizada y extendida es la elaborada por la Federal Geographic Data Committee (FGDC) que la define como: Una Infraestructura de Datos Espaciales (IDE) se puede definir como un conjunto de tecnolog\u00edas, pol\u00edticas, est\u00e1ndares y recursos humanos necesarios para a adquirir, procesar, almacenar, distribuir y mejorar la utilizaci\u00f3n de la informaci\u00f3n geogr\u00e1fica - Federal Geographic Data Committee (FGDC) Una IDE (Infraestructura de Datos Espaciales) es un sistema inform\u00e1tico integrado por un conjunto de recursos (cat\u00e1logos, servidores, programas, datos, aplicaciones, p\u00e1ginas Web,...) dedicados a gestionar Informaci\u00f3n geogr\u00e1fica disponibles en Internet, que cumpla una serie de condiciones de interoperabilidad. 2 A partir de estas definiciones podemos vislumbrar que una IDE no es solo una implementaci\u00f3n tecnol\u00f3gica sino que comprende una parte muy importante de comunicaci\u00f3n, no precisamente entre servidor-servidor, sino entre Instituci\u00f3n\u2014Instituciones, departamento\u2014departamento, en definitiva persona\u2014persona para establecer los marcos de colaboraci\u00f3n para compartir, describir y acceder a los datos geogr\u00e1ficos. Visi\u00f3n global IDE","title":"Qu\u00e9 es una IDE?"},{"location":"1_introduccion_a_las_ides/#comparacion","text":"Conceptualmente, las Infraestructuras de datos tienen la misma finalidad que las carreteras y las autopistas: mejorar la comunicaci\u00f3n, facilitar el acceso, incrementar el comercio, etc. Infraestructura de tr\u00e1nsito Infraestructura de datos espaciales Objetivos: mejorar la accesibilidad y el uso de los coches Objetivos: mejorar el acceso, el uso de la Geoinformaci\u00f3n y evitar duplicaciones de datos Red de transporte (carreteras, caminos, puentes, etc.) Internet Veh\u00edculos Datos Ayudas: mapas, carteles, se\u00f1ales Cat\u00e1logos (datos y servicios) Conductores Usuarios Taller / Garaje (Servicios) Webservices Parking Almac\u00e9n de geodatos de los proveedores Fabricante de coches Proveedores de datos y servicios Carn\u00e9 de conducir Personal cualificado C\u00f3digo de circulaci\u00f3n Est\u00e1ndares Regulaci\u00f3n tr\u00e1nsito Pol\u00edtica + Lesgislaci\u00f3n Pol\u00edtica (Centro de control de tr\u00e1nsito) Marco institucional (Centro de Geodatos) Una buena infraestructura viaria proporciona una mejor accesibilidad, de lo que se deriva una mejor comunicaci\u00f3n entre regiones y, por tanto, un incremento del comercio. Esta es precisamente, la finalidad de las IDE: facilitar el acceso y el uso de la informaci\u00f3n geogr\u00e1fica y fomentar su comercio.","title":"Comparaci\u00f3n"},{"location":"1_introduccion_a_las_ides/#componentes-de-una-ide","text":"Una IDE est\u00e1 compuesta de 4 elementos fundamentales: Marco institucional Organizaci\u00f3n Datos y Metadatos Descriptores de les datos Geoservicios Visualizaci\u00f3n y acceso a los datos Usuarios y colaboradores","title":"Componentes de una IDE"},{"location":"1_introduccion_a_las_ides/#marco-institucional","text":"Para que una IDE pueda prosperar tiene que contar con un suporte institucional firme que garantice su impulso inicial. Este suporte se tiene que plasmar con un marco legal adecuado, que anime a las diferentes administraciones p\u00fablicas o entidades a participar en las activitades de la IDE.","title":"Marco institucional"},{"location":"1_introduccion_a_las_ides/#los-datos-y-sus-descriptores","text":"Las administraciones p\u00fablicas son las propietarias de la mayor\u00eda de la informaci\u00f3n geogr\u00e1fica de referencia para lo cual, asegurando su implicaci\u00f3n garantizamos una cartograf\u00eda de base esencial para el desarrollo de la IDE. Los datos, por si solos, no nos aportan demasiada informaci\u00f3n. Por este motivo, es necesaria su descripci\u00f3n. Los metadatos describen el contenido y las caracter\u00edsticas de los datos, aportando una informaci\u00f3n muy valiosa que ayuda a \u201ccontextualizar\u201d el dato, y en ocasiones, facilitar su acceso. Estos metadatos tienen que ser almacenados en un Cat\u00e1logo on line, consultable para a cualquier usuario, y descritos seg\u00fan unos est\u00e1ndares que aportan las pautas de c\u00f3mo y qu\u00e9 informaci\u00f3n hay que dar en cada caso.","title":"Los datos y sus descriptores"},{"location":"1_introduccion_a_las_ides/#la-visualizacion-y-el-acceso-a-los-datos","text":"El intercanvio de informaci\u00f3n y la interoperatividad de los sistemas son dos conceptos clave en una IDE. Ambos se pueden conseguir gracias a los est\u00e1ndares. OGC ha desarrollado una serie de especificaciones est\u00e1ndar que permiten a dos sistemas diferentes, con arquitecturas y formatos de datos diversos combinar cartograf\u00eda sin ning\u00fan esfuerzo por parte del usuario. Para f\u00e1cilitar la visualizaci\u00f3n y el acceso a los datos los encargados del desarrollo de la IDE generalmente implementan un Geoportal que incluye entre otras cosas: Metadatos (descripci\u00f3n del contenido, la cualidad y otras caracter\u00edsticas de los datos) Cat\u00e1logo (publicaci\u00f3n en Internet de los metadatos de datos, servicios y esquemas) Servicio de acceso a datos y servicios (clientes, visores) Servidores de mapas con proveedores de informaci\u00f3n Servicios de geoprocesamiento (procesos inform\u00e1ticos que manipulan y transforman datos geoespaciales: transformaciones de coordenadas, de proyecciones, an\u00e1lisis espacial...) Conexiones a otras IDE's.","title":"La visualizaci\u00f3n y el acceso a los datos"},{"location":"1_introduccion_a_las_ides/#los-usuarios-y-colaboradores","text":"Para que una IDE se pueda considerar como tal, tiene que haber unos usuarios que la usen, en este sentido la tarea de difusi\u00f3n es muy importante. A medida que se incrementa su uso, las empresas empiezan a ver las posibilidades comerciales y a implicarse en el proyecto, acelerando as\u00ed el crecimiento de la IDE.","title":"Los usuarios y colaboradores"},{"location":"1_introduccion_a_las_ides/#principios-en-que-se-basa-el-dearrollo-de-una-ide","text":"Datos recogidos una vez y mantenidos en el nivel donde se logra m\u00e1xima efectividad Quien genera, y sobre todo mantiene, un tipo de datos debe encargarse de organizarlos en una base de datos y facilitar el acceso a ellos mediante los servicios adecuados No deben duplicarse los mismos datos en bases de datos distintas que no aseguren exactamente el mismo nivel de actualizaci\u00f3n Debe ser posible combinar IG con total continuidad para un \u00e1mbito territorial extenso desde fuentes diversas La informaci\u00f3n geogr\u00e1fica en un \u00e1mbito territorial debe basarse en una informaci\u00f3n geogr\u00e1fica de referencia com\u00fan, y acorde con la precisi\u00f3n de la informaci\u00f3n geogr\u00e1fica y en un \u00fanico Sistema Geod\u00e9sico de referencia Debe ser posible superponer capas de informaci\u00f3n geogr\u00e1fica de distintas tem\u00e1ticas y procedencias Debe ser posible compartir la IG entre usuarios y aplicaciones Debe ser posible que la informaci\u00f3n recogida en un nivel o sector sea compartida por los otros Debe ser f\u00e1cil descubrir la informaci\u00f3n geogr\u00e1fica disponible, y en qu\u00e9 condiciones puede conseguirse y usarse Metadatos Calidad Normas comunes En un escenario \u00f3ptimo, todo usuario de una IDE deber\u00eda poder descubrir, por ejemplo, que informaci\u00f3n geogr\u00e1fica existe en zona concreta del territorio, visualizar esta informaci\u00f3n y finalmente, si es de su inter\u00e9s, descargarla. Para llegar a esta meta, toda IDE que se precie debe:","title":"Principios en que se basa el dearrollo de una IDE"},{"location":"1_introduccion_a_las_ides/#orientar-su-arquitectura-a-servicios-soa","text":"Uno de los principios b\u00e1sicos de toda IDE es la no replicaci\u00f3n de datos geogr\u00e1ficos ni la creaci\u00f3n de grandes bases de datos centralizadas. Una IDE debe fomentar un modelo distribuido d\u00f3nde cada departamento o ente se responsabilice de sus datos y se encargue de describirlos y ponerlos a disposici\u00f3n de los dem\u00e1s.","title":"Orientar su arquitectura a servicios (SOA)"},{"location":"1_introduccion_a_las_ides/#implementar-aplicaciones-que-posibiliten-descubrir-visualizar-y-procesar-informacion-geografica","text":"Entre estas aplicaciones podr\u00edamos definir un n\u00facleo presente en toda IDE: un cat\u00e1logo de metadatos, servidores de mapas y un conjunto de servicios geogr\u00e1ficos.","title":"Implementar aplicaciones que posibiliten descubrir, visualizar y procesar informaci\u00f3n geogr\u00e1fica."},{"location":"1_introduccion_a_las_ides/#adoptar-los-estandares-de-interoperabilidad-geoespacial-para-facilitar-la-comunicacion-entre-componentes","text":"Para la descripci\u00f3n de los metadatos se basa en est\u00e1ndares ISO de la familia 19, dedicada al mundo geospacial. Pero a nivel de interfaces de comunicaci\u00f3n entre servidores y entre clientes (ej. Un navegador web) y servidores existe un consorcio llamado OpenGeospatial (OGC) encargado de definir las especificaciones utilizadas. Podr\u00edamos que decir que el papel que juega el consorcio W3C en cuanto a la estandarizaci\u00f3n de la Word Wide Web (www) es parecido al de OGC dentro del mundo geoespacial.","title":"Adoptar los est\u00e1ndares de interoperabilidad geoespacial para facilitar la comunicaci\u00f3n entre componentes."},{"location":"1_introduccion_a_las_ides/#la-utilidad-de-las-ide-y-sus-ventajas","text":"Cuando un usuario quiere acceder a informaci\u00f3n geogr\u00e1fica se puede encontrar con una situaci\u00f3n ca\u00f3tica, al no saber d\u00f3nde ir a buscarla. A nivel de cooperaci\u00f3n entre administraciones y empresas, la situaci\u00f3n es tambi\u00e9n muy compleja, a causa del gran n\u00famero de contactos que hay que realizar para obtener estos datos y los permisos para utilizarlos. En un entorno IDE todo es m\u00e1s sencillo. Gracias a la catalogaci\u00f3n de los datos y mediante los servidores de cat\u00e1logo los usuarios pueden localizar y acceder a la informaci\u00f3n geogr\u00e1fica existente. La IDE se encarga tambi\u00e9n de establecer acuerdos con las administraciones con el objetivo que estas permitan la difusi\u00f3n de su informaci\u00f3n mediante un servicio de webmapping . Ambos servicios (servidor de cat\u00e1logo y webmapping) tienen que ser accesibles a trav\u00e9s de un \u00fanico portal web. Por tanto, el uso de las IDE mejora considerablemente la din\u00e1mica del sector de la geoinformaci\u00f3n. Otras ventajas de las IDE son: Facilita la toma de decisiones Reduce esfuerzos y costes Proporciona datos mejores y m\u00e1s actualizados Apoya la creaci\u00f3n de nuevas oportunidades de negocio. Hay que tener presente que una IDE no se tiene que ver s\u00f3lo desde la vertiente tecnol\u00f3gica sino que existe tambi\u00e9n una vertiente social, en que los usuarios (el sector p\u00fablico, el privado y la poblaci\u00f3n) tienen que dar su opini\u00f3n, a partir de la cual se podr\u00e1n determinar las estrategias a seguir. En el proceso de implantaci\u00f3n de una IDE tambi\u00e9n hay que superar obst\u00e1culos t\u00e9cnicos (no disponibilidad de datos, de est\u00e1ndares, metadatos, redes de comunicaci\u00f3n, banda ancha...), econ\u00f3micos, socio-culturales (conocimiento, educaci\u00f3n, seguridad, libertad de acceso...), pol\u00edticos-legales (datos delicados, propiedad intelectual...) y d\u00e9ficit de suporte (no se conoce la finalidad y el valor de las IDE). Las IDE, adem\u00e1s de mantener v\u00edas de cooperaci\u00f3n y relaciones con el sector p\u00fablico y privado de la su regi\u00f3n, tienen que hacerlo tambi\u00e9n tanto con las IDE de su nivel como con las de otros niveles","title":"La utilidad de las IDE y sus ventajas"},{"location":"1_introduccion_a_las_ides/#niveles-de-desarrollo-de-una-ide","text":"Tenemos que pensar que una IDE conlleva un factor multi-escalar en su implementaci\u00f3n, esta puede ser implementada a nivel europeo, nivel estatal, nivel regional e incluso a nivel municipal. Cada nivel tiene la responsabilidad de interoperar con el resto de niveles Ejemplos de niveles de desarrollo de una IDE Global - GSDI (Global Spatial Data Infrastructure) http://gsdiassociation.org/ Europeo - INSPIRE INfraestructure for SPatial InfoRmation in Europe http://inspire-geoportal.ec.europa.eu/ Nacional - IDEE (Infraestructura de Datos Espaciales de Espa\u00f1a) http://idee.es/ Regional - IDEC (Infraestructura de Dades Espacials de Catalunya) http://www.ide.cat Local - Barcelona http://w133.bcn.cat/geoportalbcn/GeoPortal.aspx?lang=es","title":"Niveles de desarrollo de una IDE"},{"location":"1_introduccion_a_las_ides/#idec","text":"La IDEC (Infraestructura de Dades Espacials de Catalunya) es una iniciativa creada el a\u00f1o 2002 para desarrollar y mantener una Infraestructura de Datos Espaciales (IDE) en el territorio de Catalunya. Esta infraestructura pretende facilitar y mejorar el acceso a la informaci\u00f3n y los servicios geogr\u00e1ficos disponibles, poniendo al alcance de los usuarios herramientas para buscar, descubrir, consultar y descargar estos recursos mediante la web, para utilizarlos y explotarlos posteriormente. El proyecto se hace posible gracias a la participaci\u00f3n activa y colaborativa de los diferentes tipos de actores involucrados: los productores y/o proveedores de informaci\u00f3n geogr\u00e1fica (o espacial) y los propios usuarios.","title":"IDEC"},{"location":"1_introduccion_a_las_ides/#idee","text":"La IDEE (Infraestructura de Datos Espaciales de Espa\u00f1a) tiene como objetivo integrar a trav\u00e9s de Internet los datos, metadatos, servicios e informaci\u00f3n de tipo geogr\u00e1fico que se producen en Espa\u00f1a, a nivel estatal, auton\u00f3mico y local, cumpliendo una serie de condiciones de interoperabilidad (normas, protocolos, especificaciones) y conforme a sus respectivos marcos legales. El fruto de este trabajo es el proyecto IDEE. La IDEE arranc\u00f3 en 2002 cuando la Comisi\u00f3n Permanente del Consejo Superior Geogr\u00e1fico aprob\u00f3 el 10 abril la puesta en marcha de una Infraestructura Nacional de Datos Espaciales. IDEE es el resultado de la integraci\u00f3n, en primer lugar, de todas las IDE establecidas por los productores oficiales de datos a nivel tanto estatal como auton\u00f3mico y local, y en segundo lugar, de todo tipo de infraestructuras sectoriales y privadas. En cada C.C.A.A y organismo de la Administraci\u00f3n General del Estado (AGE) hay un representante, responsable de la implantaci\u00f3n de la IDE en su C.C.A.A y en el organismo de la AGE.","title":"IDEE"},{"location":"1_introduccion_a_las_ides/#marco-legal","text":"En Espa\u00f1a la LISIGE se aplica a todos los datos geogr\u00e1ficos que cumplan las siguientes condiciones Se refieran a una zona geogr\u00e1fica del territorio nacional, el mar territorial, la zona contigua, la plataforma continental y la zona exclusiva econ\u00f3mica exclusiva, generada o bajo responsabilidad de las Administraciones p\u00fablicas y sobre la que el Estado tenga jurisdicci\u00f3n Est\u00e9n en formato electr\u00f3nico Su producci\u00f3n y mantenimiento sea competencia de una Administraci\u00f3n u organismo del sector p\u00fablico Se refieran a Informaci\u00f3n Geogr\u00e1fica de Referencia o a Datos Tem\u00e1ticos Fundamentales o a Datos Tem\u00e1ticos Generales existentes, salvaguardando en este caso los intereses prioritarios de la defensa nacional","title":"Marco legal"},{"location":"1_introduccion_a_las_ides/#inspire","text":"INSPIRE (INfrastructure for SPatial InfoRmation in Europe) tiene por objetivo hacer disponible una informaci\u00f3n geogr\u00e1fica de calidad, armonizada y relevante para apoyar la formulaci\u00f3n, la implementaci\u00f3n, la monitorizaci\u00f3n y la evaluaci\u00f3n de las pol\u00edticas comunitarias con un impacto o dimensi\u00f3n territorial. INSPIRE es una iniciativa legal de la UE que dirigir\u00e1 protocolos y est\u00e1ndares, aspectos de coordinaci\u00f3n y organizaci\u00f3n, pol\u00edticas de datos incluyendo el acceso a los datos y la creaci\u00f3n y el mantenimiento de la informaci\u00f3n espacial. El 17 de noviembre de 2003, el Parlamento Europeo aprob\u00f3 la Directiva 2003/98 CE, en lo referente a la reutilizaci\u00f3n de la informaci\u00f3n del sector p\u00fablico. Su finalidad es fijar un marco legal que armonice el uso y la explotaci\u00f3n de la informaci\u00f3n del sector p\u00fablico (condiciones de reutilizaci\u00f3n, formatos disponibles, principios de tarificaci\u00f3n, transparencia, etc.), fomentando as\u00ed un mercado interior entre todos los estados miembros. La nueva directiva se dirige claramente a facilitar informaci\u00f3n desde las Entidades P\u00fablicas hacia el sector privado, que puede darle un amplio valor a\u00f1adido a. De manera especial favorecer\u00e1 la difusi\u00f3n de informaci\u00f3n geogr\u00e1fica, dado que las administraciones p\u00fablicas son el principal generador de este tipo de informaci\u00f3n. Lo que puede reforzar iniciativas IDE, entre muchas de otras. Para asegurar que las infraestructuras de datos espaciales de los Estados miembros sean compatibles e interoperables en un contexto comunitario y transfronterizo, la Directiva exige que se adopten Normas de Ejecuci\u00f3n comunes Implementing Rules) espec\u00edficas para las siguientes \u00e1reas metadatos, conjuntos de datos, servicios de red, servicios de datos espaciales, datos y servicios de uso compartido y seguimiento e informes Estas normas son de obligado cumplimiento en cada uno de los pa\u00edses de la Uni\u00f3n La Directiva INSPIRE se aplica en diferentes etapas hasta el 2021 que deber\u00e1 tener aplicaci\u00f3n plena Es el primer paso de una amplia iniciativa multisectorial, que inicialmente se centrar\u00e1 en la informaci\u00f3n espacial necesaria para las pol\u00edticas medio ambientales y que estar\u00e1 abierta a las necesidades de otras \u00e1reas pol\u00edticas como la agricultura y el transporte. La situaci\u00f3n general respecto a la informaci\u00f3n espacial en Europa es de fragmentaci\u00f3n de datos y fuentes. Hay lagunas en la disponibilidad de los datos, carencia de harmonizaci\u00f3n entre conjuntos de datos en las diferentes escalas y sistemas de referencia y duplicaci\u00f3n de la informaci\u00f3n. Estos problemas hacen dif\u00edcil la identificaci\u00f3n, el acceso y el uso de los datos disponibles. Afortunadamente, est\u00e1 creciendo la conciencia sobre la necesidad de una informaci\u00f3n georeferenciada de calidad para entender mejor las relaciones humanas con su entorno. La iniciativa tiene la intenci\u00f3n de crear una infraestructura europea de datos espaciales que d\u00e9 servicios de informaci\u00f3n espacial integrada a los usuarios. Estos servicios tendr\u00e1n que permitir a los usuarios identificar y acceder a la informaci\u00f3n geogr\u00e1fica de muy variadas fuentes, garantizando la interoperatividad. Los posibles servicios son la visualizaci\u00f3n de capas de informaci\u00f3n, la superposici\u00f3n de informaci\u00f3n procedente de diferentes fuentes, el an\u00e1lisis espacial y temporal, etc.","title":"INSPIRE"},{"location":"1_introduccion_a_las_ides/#principios-de-inspire","text":"Los datos tienen que recogerse una sola vez y conservarse en el nivel donde resulten m\u00e1s eficaces. Tiene que ser posible combinar, sin problemas de continuidad, la informaci\u00f3n geogr\u00e1fica procedente de diferentes fuentes europeas y ponerla al alcance de los usuarios y aplicaciones. La informaci\u00f3n recogida a un nivel tiene que poder ser compartida a todos los niveles, la informaci\u00f3n a gran escala para investigaciones detalladas, y la de peque\u00f1a escala para finalidades estrat\u00e9gicas. La informaci\u00f3n geogr\u00e1fica necesaria a todos los niveles tiene que ser abundante sin limitar su uso extensivo Tiene que ser sencillo descubrir qu\u00e9 informaci\u00f3n geogr\u00e1fica est\u00e1 disponible, si cubre las necesidades para un uso determinado y bajo qu\u00e9 condiciones se puede adquirir y utilizar Los datos geogr\u00e1ficos tienen que ser f\u00e1ciles de entender y de interpretar porque tienen que estar adecuadamente documentados","title":"Principios de INSPIRE"},{"location":"1_introduccion_a_las_ides/#temas-inspire","text":"","title":"Temas INSPIRE"},{"location":"1_introduccion_a_las_ides/#annex-i","text":"Coordinate reference systems Geographical grid systems Geographical names Administrative units Addresses Cadastral parcels Transport networks Hydrography Protected sites","title":"Annex I"},{"location":"1_introduccion_a_las_ides/#annex-ii","text":"Elevation Land cover Orthoimagery Geology","title":"Annex II"},{"location":"1_introduccion_a_las_ides/#annex-iii","text":"Statistical units Buildings Soil Land use Human health and safety Utility and governmental services Environmental monitoring Facilities Production and industrial facilities Agricultural and aquaculture facilities Population distribution and demography Area management / restriction / regulation zones & reporting units Natural risk zones Atmospheric conditions Meteorological geographical features Oceanographic geographical features Sea regions Bio-geographical regions Habitats and biotopes Species distribution Energy Resources Mineral Resources","title":"Annex III"},{"location":"1_introduccion_a_las_ides/#otras-ides","text":"","title":"Otras IDES"},{"location":"1_introduccion_a_las_ides/#gsdi-global-spatial-data-infrastructure","text":"Convertida en asociaci\u00f3n el a\u00f1o 2004, esta iniciativa empez\u00f3 a mediados de los 90 con el objetivo de fomentar la captura, el procesamiento, la integraci\u00f3n y la compartici\u00f3n de informaci\u00f3n y datos espaciales, utilizando est\u00e1ndares comunes y t\u00e9cnicas y sistemas interoperables, accesibles v\u00eda web. La GSDI organiza conferencias de forma regular. La primera se celebr\u00f3 el a\u00f1o 95 en Bonn, d\u00f3nde s\u00f3lo fueron invitados un peque\u00f1o n\u00famero de asistentes. En la conferencia del a\u00f1o 97, definieron la GSDI c\u00f3mo: \u201c...las pol\u00edticas, misiones organizativas, datos, tecnolog\u00edas, est\u00e1ndares, mecanismos de distribuci\u00f3n y recursos financieros y humanos para asegurar que no se impida lograr los objetivos, a aquellos que trabajan a escala global y local\u201d. Tiene por objetivo fomentar la captura, el procesamiento, la integraci\u00f3n, el almacenamiento y el intercambio de datos e informaci\u00f3n espacial utilizando est\u00e1ndares comunes y t\u00e9cnicas y sistemas interoperables v\u00eda web. Para lograrlo, es necesario poner un especial \u00e9nfasis en los m\u00e9todos de difusi\u00f3n, educaci\u00f3n, recursos, pol\u00edticas y aspectos legales relacionados con su desarrollo.","title":"GSDI (Global Spatial Data Infrastructure)"},{"location":"1_introduccion_a_las_ides/#ejemplos-de-otras-ides","text":"","title":"Ejemplos de otras IDES"},{"location":"1_introduccion_a_las_ides/#internacional","text":"Geoportal ONU","title":"Internacional"},{"location":"1_introduccion_a_las_ides/#nacional","text":"IGN France Estados Unidos Chile","title":"Nacional"},{"location":"1_introduccion_a_las_ides/#regional","text":"IDE Canarias IDE Andaluc\u00eda","title":"Regional"},{"location":"1_introduccion_a_las_ides/#local","text":"C\u00e1ceres","title":"Local"},{"location":"1_introduccion_a_las_ides/#referencias","text":"https://github.com/volaya/libro-sig/releases/download/v2.0/Libro_SIG.pdf \u21a9 https://www.miteco.gob.es/es/cartografia-y-sig/ide/presentacion/que-es-ide.aspx \u21a9","title":"Referencias"},{"location":"2_estandares_OCG/","text":"Est\u00e1ndares OCG Qu\u00e9 es OGC? El OGC (Open Geospatial Consortium fu\u00e9 creada en 1994 y est\u00e1 formada por m\u00e1s de 500 empresas, agencias gubernamentales y universidades. Es una organizaci\u00f3n internacional sin \u00e1nimo de lucro comprometida con la elaboraci\u00f3n de est\u00e1ndares abiertos e interoperables de calidad para la comunidad geoespacial global. Estos est\u00e1ndares se elaboran a trav\u00e9s de un proceso de consenso y est\u00e1n disponibles de forma gratuita para que cualquier persona pueda utilizarlos para mejorar el intercambio de los datos geoespaciales del mundo. Estas especificaciones tienen como objetivo, fomentar la interoperabilidad geoespacial. El \u00e9xito de estas especificaciones radica en el hecho de que son impulsadas y creadas por las mismas empresas, que despu\u00e9s las implementan en sus productos comerciales. Interoperabilidad Se puede definir la interoperabilidad como la habilidad de dos o m\u00e1s sistemas para intercambiar informaci\u00f3n y poderla utilizar, sin ning\u00fan esfuerzo por parte del usuario. Las modalidades de interoperatividad dependen de los agentes que interaccionan. Dicho de otra manera, los datos producidos en un entorno operativo tienen que poder ser le\u00eddos e interpretados por otro entorno sin que el usuario tenga que hacer una conversi\u00f3n de formatos. La interoperabilidad permite: Acceder a m\u00e1s y mejor informaci\u00f3n (topogr\u00e1ficos, ortoim\u00e1genes, callejeros, catastro, medio ambiente...), sin tener que disponer de un software espec\u00edfico o directamente desde el navegador. Esto permite que el usuario pueda acceder a cartograf\u00eda de varias fuentes, con arquitecturas diferentes, de una forma f\u00e1cil y transparente. Facilita el acceso a geoservicios. Est\u00e1ndares OGC Un est\u00e1ndar es un modelo, un patr\u00f3n que tiene como finalidad la fijaci\u00f3n de unas normas comunes para garantizar la homogeneidad en el proceso de producci\u00f3n. Pero para que tenga \u00e9xito tiene que tener un uso mayoritario. Est\u00e1ndares Para conseguir que, tanto la documentaci\u00f3n de los datos como la creaci\u00f3n de servicios sea comprensible y accesible para todo el mundo, es decir, para hacer que todos \u201chablemos el mismo idioma\u201d, se han dise\u00f1ado est\u00e1ndares de metadatos y de servicios que pretenden poner en com\u00fan los puntos de vista de los diferentes productores. Por lo tanto, la estandarizaci\u00f3n consiste en hacer que, tanto la documentaci\u00f3n de datos como la creaci\u00f3n de geoservicios, as\u00ed como su acceso, se hagan conforme a unas norma previamente establecidas. Los est\u00e1ndares de la OGC son documentos de car\u00e1cter t\u00e9cnico d\u00f3nde se describen las interfaces de comunicaci\u00f3n entre servidores y la forma de implementarlos. En estas especificaciones no se menciona ni la arquitectura, plataforma o lenguajes de programaci\u00f3n a utilizar. Los documentos, antes de ser consideradas como una OpenGIS Implementation Specification, son elaborados y probados por diferentes grupos de trabajo dentro de OGC y finalmente sometidas a votaci\u00f3n. Los servicios de cartograf\u00eda online o web de OGC (OWS) son est\u00e1ndares de OGC creados para su uso en aplicaciones de la World Wide Web (WWW). Estos permiten formular petiones al servidor para: enviar preguntas, obtener datos vectoriales o r\u00e1ster, hacer geoprocesos, etc. Todos los est\u00e1ndares creados por OGC se pueden consultar en https://www.ogc.org/docs/is Evoluci\u00f3n de servicios OWS WMS La intenci\u00f3n de WMS (Web Map Service) es la de permitir la superposici\u00f3n visual de informaci\u00f3n geogr\u00e1fica compleja y distribuida en diferentes servidores. Un cliente puede hacer peticiones a otros servidores tambi\u00e9n basados en esta especificaci\u00f3n para descubrir informaci\u00f3n geogr\u00e1fica deseada. Una vez encontrada el cliente puede recurrir a ella de forma simult\u00e1nea y puede visualizar diferentes datos geogr\u00e1ficos de diferentes servidores en un mismo entorno. Cada petici\u00f3n est\u00e1 compuesta por unos par\u00e1metros concretos definidos por la especificaci\u00f3n WMS y que es entendida por todos los servidores de mapas que cumplen con la especificaci\u00f3n. Por lo tanto, cuando se dice que un Servidor de Mapas es est\u00e1ndar y cumple con WMS, significa que es capaz de dar respuesta a estas peticiones. El est\u00e1ndar WMS proporciona una interfaz HTTP simple para solicitar im\u00e1genes de mapas georegistrados desde una o m\u00e1s bases de datos geoespaciales distribuidas. Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/wms Tipos de peticiones WMS GetCapabilities Nos permite descubrir cuales son las capacidades del servidor. Como respuesta va a obtener un archivo en formato xml d\u00f3nde podremos saber cuales son las caracter\u00edsticas del servicio, las versiones de WMS soportadas por el servidor, las operaciones que soporta, cual es su sistema de referencia, sus coordenadas, que formato de imagen soporta y metadatos de las capas de informaci\u00f3n que contiene. Par\u00e1metros del GetCapabilities Par\u00e1metro Obligatoriedad Descripci\u00f3n VERSION Obligatorio Versi\u00f3n de la especificaci\u00f3n OGC (1.0.0, 1.1.0, 1.1.1, 1.3.0) SERVICE Obligatorio Tipo de servicio al que va dirigida la petici\u00f3n ( WMS ) REQUEST Obligatorio Nombre de la operaci\u00f3n ( GetCapabilities ) LANGUAGE Opcional Se obtiene el fichero de salida en el idioma solicidado FORMAT Opcional Formato de salida del metadato del servicio. (Por defecto text/xml) Ejemplos: http://www.ign.es/wms-inspire/ign-base?VERSION=1.3.0&REQUEST=GetCapabilities&SERVICE=WMS http://geoserveis.icc.cat/icc_bt5m/wms/service?REQUEST=GetCapabilities&SERVICE=WMS Aspectos pr\u00e1cticos Tama\u00f1o m\u00e1ximo de la im\u00e1gen Si se pide una imagen mayor que el tama\u00f1o m\u00e1ximo permitodo retornar\u00e1 un error <Service> <Name> icc_bt5m </Name> <Title> ICC - Base topogr\u00e0fica de Catalunya 1:5 000 (BT-5M) - Capes WMS 96dpi (p\u00edxel 0,26458333 mm) </Title> ... <MaxWidth> 2048 </MaxWidth> <MaxHeight> 2048 </MaxHeight> </Service> OnlineResource En algunos software de escritorio utiliza esta url para hacer las peticiones de las operaciones GetMap. <GetMap> <Format> image/jp2;subtype=\"gmljp2\" </Format> <Format> image/gif </Format> <Format> image/png </Format> <Format> image/bmp </Format> <Format> image/jpeg </Format> <Format> image/tiff </Format> <DCPType> <HTTP> <Get> <OnlineResource xmlns:xlink= \"http://www.w3.org/1999/xlink\" xlink:href= \"http://shagrat.icc.cat/lizardtech/iserv/ows\" xlink:type= \"simple\" /> </Get> </HTTP> </DCPType> </GetMap> Layer El atributo queryable indica si la capa es consultable (1 = consultable, 0 = no consultable) Name es indentificador de la capa. Es el valor que se debe usar en el par\u00e1metro LAYERS de las peticiones GetMap Title es nombre descriptivo de la capa LegendURL hace referencia a una url de una imagen externa que contiene la leyenda de la capa Min y Max(ScaleDenominator) factor de escala. Limita la visualizaci\u00f3n de la capa a estas escalas. Si se pide una capa fuera de esa escala retorna en blanco. <Layer queryable= \"1\" > <Name> 02_ALTI_PA </Name> <Title> [BT5M] (02) (x) ALTIMETRIA: talussos, marges (\u00e0rees) </Title> <Abstract> 02_ALTI_PA </Abstract> <CRS> EPSG:25831 </CRS> <CRS> EPSG:4326 </CRS> <BoundingBox CRS= \"EPSG:25831\" minx= \"254904.96\" miny= \"4484796.89\" maxx= \"530907.30\" maxy= \"4749795.10\" /> ... <Style> ... <LegendURL width= \"328\" height= \"64\" > <Format> image/png </Format> <OnlineResource xmlns:xlink= \"http://www.w3.org/1999/xlink\" xlink:href= \"http://geoserveis.icc.cat/icc_bt5m/wms/service?request=GetLegendGraphic%26version=1.3.0%26format=image/png%26layer=02_ALTI_PA\" xlink:type= \"simple\" /> </LegendURL> </Style> <MinScaleDenominator> 472.470238 </MinScaleDenominator> <MaxScaleDenominator> 7087.053571 </MaxScaleDenominator> </Layer> GetFeatureInfo Formatos de salida de la consulta <GetFeatureInfo> <Format> application/vnd.esri.wms_raw_xml </Format> <Format> application/vnd.esri.wms_featureinfo_xml </Format> <Format> application/vnd.ogc.wms_xml </Format> <Format> text/xml </Format> <Format> text/html </Format> <Format> text/plain </Format> <DCPType> <HTTP> <Get> <OnlineResource xmlns:xlink= \"http://www.w3.org/1999/xlink\" xlink:type= \"simple\" xlink:href= \"http://geoserveis.icc.cat/icc_bt5m/wms/service?\" /> </Get> </HTTP> </DCPType> </GetFeatureInfo> GetMap Petici\u00f3n GetMap devolver\u00e1 un mapa en formato imagen, ya sea un PNG, JPEG, GIF, etc. Par\u00e1metros del GetMap Par\u00e1metro Obligatoriedad Descripci\u00f3n VERSION Obligatorio Versi\u00f3n de la especificaci\u00f3n OGC (1.0.0, 1.1.0, 1.1.1, 1.3.0) SERVICE Obligatorio Tipo de servicio al que va dirigida la petici\u00f3n ( WMS ) REQUEST Obligatorio Nombre de la operaci\u00f3n ( GetMap ) LAYERS Obligatorio Lista de nombres de las capas separadas por coma FORMAT Obligatorio Formato de salida de la imagen. (image/png, image/jpeg, ...) STYLES Obligatorio Lista de estilos separados por coma. Si no hay estilo se puede dejar en blanco SRS o CRS Obligatorio C\u00f3digo ESPG del sistema de referencia BBOX Obligatorio Caja de coordenadas del mapa (minx,miny,maxx,maxy) WIDTH Obligatorio N\u00famero p\u00edxeles del ancho de la im\u00e1gen HEIGHT Obligatorio N\u00famero p\u00edxeles del alto de la im\u00e1gen TRANSPARENT Opcional Indica si el fondo del mapa debe ser transparente (true ,false) BGCOLOR Opcional Color de fondo para la imagen del mapa. El valor est\u00e1 en la formato RRGGBB hexadecimal SLD Opcional Una URL que hace referencia a un archivo XML StyledLayerDescriptor que controla el estilo de las capas de mapa EXCEPTIONS Opcional Formato excepciones Ejemplo: http://www.ign.es/wms-inspire/ign-base?SERVICE=WMS&REQUEST=GetMap&VERSION=1.3.0&LAYERS=IGNBaseTodo&STYLES=&FORMAT=image/png&BGCOLOR=0xFFFFFF&TRANSPARENT=TRUE&SRS=EPSG:4258&BBOX=26.4764705882353,-19,44.5235294117647,5&WIDTH=1020&HEIGHT=767 GetFeatureInfo Petici\u00f3n GetFeatureInfo sirve para mostrar los atributos de los objetos del mapa, vuelve la informaci\u00f3n en formato de tabla o XML. Si una capa est\u00e1 marcada como \u201cconsultable\u201d (queryable), se puede solicitar datos sobre una coordenada de la imagen del mapa. Par\u00e1metros del GetFeatureInfo Par\u00e1metro Obligatoriedad Descripci\u00f3n VERSION Obligatorio Versi\u00f3n de la especificaci\u00f3n OGC (1.0.0, 1.1.0, 1.1.1, 1.3.0) SERVICE Obligatorio Tipo de servicio al que va dirigida la petici\u00f3n ( WMS ) REQUEST Obligatorio Nombre de la operaci\u00f3n ( GetFeatureInfo ) LAYERS Obligatorio Lista de nombres de las capas separadas por coma FORMAT Obligatorio Formato de salida de la imagen. (image/png, image/jpeg, ...) STYLES Obligatorio Lista de estilos separados por coma. Si no hay estilo se puede dejar en blanco SRS o CRS Obligatorio C\u00f3digo ESPG del sistema de referencia BBOX Obligatorio Caja de coordenadas del mapa (minx,miny,maxx,maxy) WIDTH Obligatorio N\u00famero p\u00edxeles del ancho de la im\u00e1gen HEIGHT Obligatorio N\u00famero p\u00edxeles del alto de la im\u00e1gen QUERY_LAYERS Obligatorio Lista de nombres de las capas que se quieren consultar separadas por coma X o I Obligatorio Valor del p\u00edxel a consultar Y o J Obligatorio Valor del p\u00edxel a consultar INFO_FORMAT Opcional Formato de la respuesta (por defecto text/xml) FEATURE_COUNT Opcional N\u00famero m\u00e1ximo de elementos a devolver EXCEPTIONS Opcional Formato excepciones Ejemplo: http://geoserveis.icc.cat/icgc_bm5m/wms/service?REQUEST=GetFeatureInfo&SERVICE=WMS&VERSION=1.1.1&LAYERS=10_MUNICIPI_PC&QUERY_LAYERS=10_MUNICIPI_PC&INFO_FORMAT=text/html&STYLES=&SRS=EPSG:25831&BBOX=257904,4484796,680304,4907196&WIDTH=768&HEIGHT=768&X=295&Y=580 GetLegendGraphic Petici\u00f3n que devuelve una imagen de la imagen de la leyenda del mapa de una capa, proporcionando una gu\u00eda visual de los elementos del mapa. Par\u00e1metro Obligatoriedad Descripci\u00f3n VERSION Obligatorio Versi\u00f3n de la especificaci\u00f3n OGC (1.0.0, 1.1.0, 1.1.1, 1.3.0) SERVICE Obligatorio Tipo de servicio al que va dirigida la petici\u00f3n ( WMS ) REQUEST Obligatorio Nombre de la operaci\u00f3n ( GetLegendGraphic ) LAYER Obligatorio Nombre de la capa FORMAT Obligatorio Formato de salida de la imagen. (image/png, image/jpeg, ...) WIDTH Opcional N\u00famero p\u00edxeles del ancho de la im\u00e1gen HEIGHT Opcional N\u00famero p\u00edxeles del alto de la im\u00e1gen Ejemplo: http://wms.guifi.net/cgi-bin/mapserv?map=/home/guifi/maps.guifi.net/guifimaps/GMap.map&version=1.3.0&service=WMS&request=GetLegendGraphic&sld_version=1.1.0&layer=Nodes&format=image/png&STYLE=default Aspector pr\u00e1cticos WMS Principales diferencias entre las versiones 1.1.1 y 1.3.0 En la operaci\u00f3n GetMap, el par\u00e1metro SRS se llama CRS en 1.3.0 En la operaci\u00f3n GetFeatureInfo, los par\u00e1metros X e Y se llaman I y J en 1.3.0. En 1.1.1, los sistemas de coordenadas geogr\u00e1ficas especificados con el espacio de nombres EPSG se definen para tener un orden de ejes de longitud / latitud. En 1.3.0 el orden es la latitud / longitud. Por ejemplo, considere la solicitud WMS 1.1 utilizando el SRS WGS84 (EPSG: 4326): 1 server/wms?VERSION=1.1.1&REQUEST=GetMap&SRS=epsg:4326&BBOX=-180,-90,180,90&... La solicitud equivalente WMS 1.3.0 es: 1 server/wms?VERSION=1.3.0&REQUEST=GetMap&CRS=epsg:4326&BBOX=-90,-180,90,180&... Problemas comunes Tama\u00f1o de la imagen (pantallas grandes y/o de mucha resoluci\u00f3n) Capas no visibles por el control de escala Capas no consultables Formato de salida del GetFeatureInfo No est\u00e1n pensados para peticiones teseladas (velocidad) No tienen cach\u00e9. Las im\u00e1genes se generan al vuelo Lista restringida de SRS soportados En software de escritorio el onlineResource (QGis tiene la opci\u00f3n de ignorar el onlineResource ) Modificar el estilo (SLD poco soportado) SLD dif\u00edcil de entender y hacer WMTS Un WMTS es un servicio que permite almacenar los datos recientemente le\u00eddos, por tanto agilizar la carga de los mismos en caso de que estos vuelvan a ser solicitados (cach\u00e9). Este servicio usa un modelo de teselas (Tiling Model) parametrizado de tal manera que un cliente puede hacer peticiones de un conjunto discreto de valores y recibir r\u00e1pidamente del servidor fragmentos de im\u00e1genes prerenderizadas (Tiles), que generalmente ya no requieren de ninguna manipulaci\u00f3n posterior para ser mostrados en pantalla. Cada una de las capas (layers) de un servidor WMTS sigue una o diversas estructuras piramidales de escalas (Tile Matrix sets o conjunto de Matrices de Teselas), en la que cada escala o nivel de la pir\u00e1mide (Tile Matrix o Matriz de Teselas), es una r\u00e1sterizaci\u00f3n y fragmentaci\u00f3n regular de los datos geogr\u00e1ficos a una escala o tama\u00f1o de p\u00edxel concreto. Por ello, una capa puede estar disponible en varios sistemas de coordenadas, y tener diferente \u00e1mbito en funci\u00f3n de \u00e9stos. El WMTS de OGC proporciona un enfoque complementario al WMS; a diferencia del WMS que fue concebido para poder compartir por renderizado mapas personalizados y se adopt\u00f3 como una soluci\u00f3n ideal para mostrar datos din\u00e1micos, el WMTS renuncia a la personalizaci\u00f3n de estos mapas para obtener una mayor escalabilidad, sirviendo datos prerenderizados donde la envolvente y las escalas han sido restringidas a un conjunto discreto de teselas que siguen una geometr\u00eda de malla regular. Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/wmts Una especificaci\u00f3n anterior para esto es el Tile Map Service (TMS). Es m\u00e1s simple que WMTS. Fue desarrollado por miembros de OSGeo y no est\u00e1 respaldada por un organismo oficial de est\u00e1ndares. Tambi\u00e9n existe la especificaci\u00f3n ZXY o \"slippy map\" que es igual que TMS pero la Y empieza por arriba a la izquierda. Esta especificaci\u00f3n tampoco est\u00e1 respaldada por un organismo oficial de est\u00e1ndares. Para cargar la im\u00e1genes se ulitza una llamada HTTP rest d\u00f3nde se especifica; https://.../.../z/x/y.format Z= Nivel de zoom X=coordenada X Y=coordenada Y Formato Raster: Im\u00e1gen png o JPEG http://a.tile.openstreetmap.org/3/2/4.png Protocolos TMS (Tile Map Service): X Y coordenadas empiezan de debajo a la izquierda (t\u00edpico eje cartesiano de coordenadas) WMTS (Web Map Tile Service): OGC estandard , corrdenadas empiezan de arriba a la izquierda. ZXY o \"slippy map\": Igual que TMS pero la Y empieza por arriba a la izquierda WFS El WFS (Web Feature Service) es una especificaci\u00f3n que sirve para lanzar consultas sobre objetos geogr\u00e1ficos. Los WFS implementan tambi\u00e9n la especificaci\u00f3n OGC FILTER encoding que permite dotar a WFS de un gran potencial ya que le permite realizar tanto consultas alfanum\u00e9ricas y espaciales. WFS b\u00e1sico permite hacer consultas y recuperaci\u00f3n de elementos geogr\u00e1ficos. Por el contrario WFS-T (Web Feature Service Transactional) permite adem\u00e1s la creaci\u00f3n, eliminaci\u00f3n y actualizaci\u00f3n de estos elementos geogr\u00e1ficos del mapa. Para realizar estas operaciones se utiliza el lenguaje GML (Geography Markup Language) que deriva del XML, que es el est\u00e1ndar a trav\u00e9s del que se transmiten las \u00f3rdenes WFS. el GML Tambi\u00e9n es el formato de retorno de las consultas. Operadores espaciales Operadores l\u00f3gicos BBOX LessThan Intersects LessThanEqualTo Within GreaterThanEqualTo Beyond NotEqualTo Equals Like Disjoint GreaterThan Touches EqualTo Crosses Between Contains Overlaps Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/wfs Tipos de peticiones WFS GetCapabilities Nos permite descubrir cuales son las capacidades del servidor. Como respuesta va a obtener un archivo en formato xml d\u00f3nde podremos saber cuales son las caracter\u00edsticas del servicio, las versiones de WFS soportadas por el servidor, las operaciones que soporta, cual es su sistema de referencia, sus coordenadas y metadatos de las capas de informaci\u00f3n que contiene. Par\u00e1metros del GetCapabilities Par\u00e1metro Obligatoriedad Descripci\u00f3n VERSION Obligatorio Versi\u00f3n de la especificaci\u00f3n OGC (1.0.0, 1.1.0, 1.1.3, 2.0, 2.0.2) SERVICE Obligatorio Tipo de servicio al que va dirigida la petici\u00f3n ( WFS ) REQUEST Obligatorio Nombre de la operaci\u00f3n ( GetCapabilities ) Ejemplo: http://www.juntadeandalucia.es/institutodeestadisticaycartografia/geoserver-ieca/grid/wfs?REQUEST=GetCapabilities&SERVICE=WFS&VERSION=2.0.0 DescribeFeatureType Devuelve la descripci\u00f3n de los tipos de objetos geogr\u00e1ficos (XML schema de los feature types) que el servicio puede ofrecer. El servidor devuelve como respuesta un archivo XML. En la descripci\u00f3n del tipo de objeto geogr\u00e1fico se indica c\u00f3mo hay que codificar los objetos geogr\u00e1ficos para enviarlos como datos de entrada en operaciones de inserci\u00f3n, actualizaci\u00f3n o sustituci\u00f3n, y c\u00f3mo se codifican cuando son datos de salida (en las respuestas de las operaciones GetPropertyValue, GetFeature o GetFeatureWithLock). Es una operaci\u00f3n obligatoria. Par\u00e1metros del DescribeFeatureType Par\u00e1metro Obligatoriedad Descripci\u00f3n VERSION Obligatorio Versi\u00f3n de la especificaci\u00f3n OGC (1.0.0, 1.1.0, 1.1.1, 1.3.0) SERVICE Obligatorio Tipo de servicio al que va dirigida la petici\u00f3n ( WFS ) REQUEST Obligatorio Nombre de la operaci\u00f3n ( GetLegendGraphic ) TYPENAME Opcional Lista los nombres de los tipos de objeto geogr\u00e1fico que se van a describir, separados por comas. Si no se indica ninguno, devuelve la descripci\u00f3n de todos los tipos. OUTPUTFORMAT Opcional Formato de salida para describir los tipos de objetos. Por defecto GML3.2 (text/xml;subt ype=gml/3.2) Ejemplo: http://www.ign.es/wfs/redes-geodesicas?REQUEST=DescribeFeatureType&SERVICE=WFS&VERSION=1.1.0&TYPENAME=RED_ROI GetFeature Esta operaci\u00f3n devuelve una selecci\u00f3n de objetos geogr\u00e1ficos en formato GML. Adem\u00e1s, debe ser posible realizar un filtro en funci\u00f3n de sus propiedades para obtener los objetos geogr\u00e1ficos que desea y de realizar tanto consultas espaciales como no espaciales. Es una operaci\u00f3n obligatoria. Para definir el tipo de objeto geogr\u00e1fico a consultar, qu\u00e9 propiedades obtener y las restricciones a aplicar se utilizan el elemento Query Para ver m\u00e1s operaciones y ejemplos https://www.idee.es/resources/documentos/RD_wfs_v2_0.pdf Par\u00e1metros del GetFeature Par\u00e1metro Obligatoriedad Descripci\u00f3n VERSION Obligatorio Versi\u00f3n de la especificaci\u00f3n OGC (1.0.0, 1.1.0, 1.1.1, 1.3.0) SERVICE Obligatorio Tipo de servicio al que va dirigida la petici\u00f3n ( WFS ) REQUEST Obligatorio Nombre de la operaci\u00f3n ( GetLegendGraphic ) TYPENAME Obligatorio Lista los nombres de los tipos de objeto geogr\u00e1fico que se van a describir, separados por comas. (Excepto cuando el par\u00e1metro RESOURCE_ID es especificado) RESOURCEID Opcional Lista los identificadores \u00fanicos de los objetos geogr\u00e1ficos que se quieren obtener. Mutuamente excluyente con FILTER y BBOX. FILTER Opcional Describe un conjunto de caracter\u00edsticas sobre las que operar. Se debe establecer un filtro por cada tipo de objeto geogr\u00e1fico listado en el par\u00e1metro TYPENAME BBOX Opcional Solicitud mediante una bounding box (rect\u00e1ngulo envolvente). Mutuamente excluyente con RESOURCEID y FILTER. SORTBY Opcional Indica los nombres de las propiedades cuyos valores se van a utilizar para ordenar el resultado de la consulta. Se puede indicar si el orden es ascendente o descendente, valor ASC o DESC (Valor por defecto: orden descendente DESC). Ejemplo: SORTBY=Apellido ASC,Nota DESC FILTER_LANGUAGE Opcional Indica el lenguaje que se emplea para codificar la expresi\u00f3n (valor de FILTER). Valor por defecto urn:ogc:def:queryLanguage:OGC-FES:Filter. SRSNAME Opcional Sistema de referencia que debe aplicarse en la geometr\u00eda de los objetos geogr\u00e1ficos resultantes de la petici\u00f3n. Si no se indica, el servicio devuelve las geometr\u00edas en el sistema que posea por defecto. El servidor debe ser capaz de transformar las geometr\u00edas en los distintos sistemas de referencia que soporta. Ejemplos: Solicitud para obtener todos los v\u00e9rtices geod\u00e9sicos entre los paralelos 38 y 39 entre las latitudes 0 y 2 (par\u00e1metro BBOX) de la Red de Orden Inferior (par\u00e1metro typeName) del servicio de redes geod\u00e9sicas del Instituto Geogr\u00e1fico Nacional. Los resultados los pedimos en proyecci\u00f3n UTM huso 30 (par\u00e1metro srsNAME) y en el formato XML (par\u00e1metro outputFormat) http://www.ign.es/wfs/redes-geodesicas?SERVICE=WFS&REQUEST=GetFeature&TYPENAME=RED_ROI&srsNAME=urn:ogc:def:crs:EPSG::25830&BBOX=38,0,39,2&outputFormat=text/xml;%20subtype=gml/3.1.1 Solicitud del objeto geogr\u00e1fico denominado \u201cTeide\u201d del Nomencl\u00e1tor Geogr\u00e1fico B\u00e1sico de Espa\u00f1a usando el par\u00e1metro FILTER http://www.ign.es/wfs-inspire/ngbe?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&COUNT=10&TYPENAME=gn:NamedPlace&FILTER=%3cFilter%20xmlns:gn=%22http://inspire.ec.europa.eu/schemas/gn/4.0%22%3e%3cPropertyIsEqualTo%3e%3cValueReference%3egn:name/gn:GeographicalName/gn:spelling/gn:SpellingOfName/gn:text%3c/ValueReference%3e%3cLiteral%3eTeide%3c/Literal%3e%3c/PropertyIsEqualTo%3e%3c/Filter%3e GML El GML (Geography Markup Language) es una codificaci\u00f3n basada en XML, pensada para la descarga, transporte , almacenaje y intercambio, de la informaci\u00f3n geogr\u00e1fica sobre Internet, pero no de presentaci\u00f3n final. GML contempla la descripci\u00f3n de entidades geom\u00e9tricas y topol\u00f3gicas as\u00ed como sus relaciones y atributos alfanum\u00e9ricos mediante esquemas XML (XSD). Esto permite a cada usuario o instituci\u00f3n crear sus propios esquemas para describir de forma compleja objetos geogr\u00e1ficos para despu\u00e9s poderla compartir o vincular con otros esquemas Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/gml <?xml version=\"1.0\" encoding=\"utf-8\"?> <!--Parcela Catastral de la D.G. del Catastro.--> <!--La precisi\u00f3n es la que corresponde nominalmente a la escala de captura de la cartograf\u00eda--> <FeatureCollection xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns:gml= \"http://www.opengis.net/gml/3.2\" xmlns:xlink= \"http://www.w3.org/1999/xlink\" xmlns:cp= \"http://inspire.ec.europa.eu/schemas/cp/4.0\" xmlns:gmd= \"http://www.isotc211.org/2005/gmd\" xsi:schemaLocation= \"http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd http://inspire.ec.europa.eu/schemas/cp/4.0 http://inspire.ec.europa.eu/schemas/cp/4.0/CadastralParcels.xsd\" xmlns= \"http://www.opengis.net/wfs/2.0\" timeStamp= \"2020-09-23T10:21:02\" numberMatched= \"1\" numberReturned= \"1\" > <member> <cp:CadastralParcel gml:id= \"ES.SDGC.CP.5049611DF2954G\" > <cp:areaValue uom= \"m2\" > 1978612 </cp:areaValue> <cp:beginLifespanVersion> 2011-05-31T00:00:00 </cp:beginLifespanVersion> <cp:endLifespanVersion xsi:nil= \"true\" nilReason= \"http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated\" ></cp:endLifespanVersion> <cp:geometry> <gml:MultiSurface gml:id= \"MultiSurface_ES.SDGC.CP.5049611DF2954G\" srsName= \"http://www.opengis.net/def/crs/EPSG/0/25831\" > <gml:surfaceMember> <gml:Surface gml:id= \"Surface_ES.SDGC.CP.5049611DF2954G.1\" srsName= \"http://www.opengis.net/def/crs/EPSG/0/25831\" > <gml:patches> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing> <gml:posList srsDimension= \"2\" count= \"578\" > 423887.57 4594331.7 423879.49 4594342.66 423876.58 4594346.6 423873.49 4594350.78 423872.41 4594352.25 423870.09 4594355.38 423869.68 4594355.94 423867.24 4594359.32 423864.4 4594363.27 423860.33 4594368.9 423865.29 4594376.37 423876.45 4594393.45 423886.62 4594408.85 423905.97 4594438.33 423907.38 4594440.74 423909.5 4594444.1 423911.68 4594447.42 423913.93 4594450.7 423916.25 4594453.94 423932.58 4594478.69 423948.65 4594503.23 423951.61 4594507.73 423976.85 4594545.72 423982.82 4594554.82 423993.71 4594571.16 423998.25 4594577.9 424036.06 4594616.5 424078.88 4594625.36 424075.73 4594669.91 424085.01 4594691.54 424094 4594712.51 424104.21 4594736.09 424105.05 4594737.36 424104.82 4594737.52 424110.27 4594750.11 424134.12 4594785.62 424138.65 4594787.74 424140.95 4594788.81 424144.78 4594790.6 424145.25 4594797.71 424146.29 4594799.26 424150.53 4594805.79 424154.69 4594812.37 424160.14 4594821.16 424167.82 4594833.59 424175.95 4594846.95 424182.96 4594858.59 424184.8 4594861.62 424188.66 4594868.06 424192.44 4594874.53 424196.16 4594881.05 424199.8 4594887.61 424203.38 4594894.21 424206.89 4594900.85 424212.48 4594911.31 424219.21 4594924.05 424225.88 4594936.83 424228.35 4594941.74 424232.66 4594950.39 424237.5 4594960.35 424242.12 4594969.95 424243.72 4594973.38 424246.56 4594979.65 424248.84 4594984.82 424251.3 4594990.58 424253.66 4594996.38 424256.3 4595003.06 424258.21 4595008.06 424260.48 4595014.28 424264.21 4595024.69 424266.18 4595030.32 424280.88 4595050.89 424281.25 4595051.41 424274.5 4595053.71 424280.52 4595072.07 424283.32 4595076.98 424284.62 4595087.72 424287.03 4595096.14 424288.48 4595101.48 424290.95 4595110.89 424292.7 4595117.8 424297.57 4595137.68 424299.72 4595146.87 424301.73 4595155.79 424304.68 4595169.4 424305.74 4595174.81 424306.67 4595179.93 424307 4595181.92 424307.93 4595182.69 424307.83 4595185.48 424307.79 4595186.45 424309.11 4595193.75 424310.32 4595200.89 424311.45 4595208.05 424312.5 4595215.21 424313.71 4595224.24 424314.92 4595233.61 424316.05 4595242.99 424316.17 4595244.13 424327.72 4595282.51 424322.66 4595295.73 424320.91 4595305.68 424321.21 4595311.98 424321.65 4595327.76 424322.03 4595343.77 424322.2 4595358 424322.09 4595374.14 424322.02 4595378.04 424323.43 4595383.08 424328.16 4595405.5 424328.91 4595413.1 424324.24 4595418.96 424323.21 4595429.76 424325.59 4595479.2 424326.47 4595478.7 424329.96 4595476.41 424332.82 4595474.32 424336.08 4595472.46 424348.54 4595473.35 424349.53 4595473.24 424350.3 4595473.7 424350.73 4595474.38 424351.21 4595475.94 424351.15 4595476.92 424350.99 4595478.16 424350.53 4595479.47 424349.99 4595480.65 424349.53 4595481.84 424348.7 4595482.82 424347.94 4595485.78 424347.12 4595488.79 424346.2 4595493.1 424345.4 4595497.52 424343.86 4595501.58 424342.45 4595504.95 424341.15 4595508.81 424340.04 4595512.04 424338.96 4595515.64 424337.76 4595519.93 424336.65 4595525.65 424335.43 4595529.95 424334.35 4595534.66 424333.2 4595539.53 424331.35 4595544.52 424330.17 4595549.26 424329.2 4595554.21 424328.51 4595557.02 424326.86 4595559.74 424324.06 4595563.45 424321.77 4595566.24 424320 4595569.12 424318.33 4595572.4 424317.69 4595575.56 424317.62 4595577.85 424317.79 4595580.28 424317.18 4595583.93 424317.55 4595585.89 424317.8 4595587.2 424318.75 4595588.69 424320.04 4595589.92 424320.92 4595590.5 424322.07 4595591.97 424323.47 4595593.13 424324.89 4595594.54 424324.4 4595595.06 424315.91 4595594.8 424316.28 4595597.59 424354.31 4595599.77 424385.47 4595601.77 424405.98 4595602.83 424428.51 4595604.36 424455.19 4595606.11 424478.53 4595607.66 424533.62 4595611.48 424559.82 4595613.33 424609.2 4595616.7 424642.23 4595618.94 424686.42 4595621.89 424726.78 4595624.75 424733.47 4595625.3 424740.76 4595625.82 424748.06 4595626.27 424755.36 4595626.64 424762.66 4595626.92 424765.67 4595627.02 424771.52 4595627.12 424777.37 4595627.14 424783.23 4595627.08 424789.08 4595626.94 424794.93 4595626.72 424800.78 4595626.43 424806.62 4595626.05 424809.84 4595625.81 424815.31 4595625.33 424820.77 4595624.77 424826.23 4595624.13 424831.68 4595623.41 424837.11 4595622.61 424842.54 4595621.74 424849.38 4595620.52 424853.97 4595619.77 424858.56 4595618.95 424867.92 4595617.1 424876.74 4595614.89 424881.24 4595613.68 424883.28 4595613.11 424889.77 4595611.23 424896.24 4595609.28 424902.68 4595607.25 424905.98 4595606.05 424910.09 4595604.72 424916.75 4595602.42 424924.54 4595599.58 424932.57 4595596.45 424938.94 4595593.89 424946.92 4595590.48 424955.73 4595586.54 424964.52 4595582.28 424973.82 4595577.46 424984.17 4595571.94 424992.29 4595567.24 424998.97 4595563.16 425006.27 4595558.56 425012.1 4595554.68 425018.65 4595550.23 425025.19 4595545.71 425058.87 4595519.69 425059.74 4595519.09 425080.25 4595504.06 425080.72 4595503.73 425092.73 4595494.92 425104.59 4595486.24 425264.54 4595344.88 425326.37 4595290.22 425405.98 4595219.9 425420.57 4595207.2 425446.98 4595184.41 425472.87 4595162.17 425499.68 4595139.03 425500.15 4595138.64 425526.08 4595116.29 425551.07 4595094.32 425554.21 4595091.52 425576 4595072.22 425590.98 4595059.09 425606.57 4595045.54 425612.83 4595040.17 425623.24 4595031.26 425631.83 4595023.8 425656.07 4595002.93 425660.88 4594998.77 425671.18 4594989.83 425689.45 4594974.17 425725.2 4594943.65 425743.15 4594928.5 425761.16 4594913.44 425770.83 4594905.47 425783.26 4594895.08 425787.7 4594891.43 425795.95 4594884.67 425803.39 4594878.37 425813.94 4594869.33 425821.61 4594862.72 425831.67 4594853.93 425837.35 4594848.94 425849.42 4594837.82 425861.44 4594826.66 425876.7 4594812.38 425882.31 4594807.04 425887.86 4594801.64 425893.83 4594795.71 425905.98 4594784.29 425925.47 4594766.23 425949.17 4594743.85 425973.97 4594720.57 426007.79 4594688.95 426033.66 4594664.52 426068.66 4594631.72 426075.92 4594624.96 426082.92 4594618.38 426096.18 4594605.97 426103.5 4594599.14 426120.58 4594582.9 426126.84 4594577.15 426124.24 4594556.33 426123.12 4594547.27 426122.92 4594545.7 426122.52 4594543.93 426121.51 4594539.48 426120.87 4594536.51 426120.67 4594535.56 426120.32 4594534.08 426119.76 4594531.66 426118.77 4594527.78 426117.7 4594523.92 426116.55 4594520.08 426115.33 4594516.27 426114.03 4594512.48 426112.83 4594509.16 426111.21 4594505.07 426109.51 4594501.01 426107.74 4594496.99 426105.9 4594493 426103.99 4594489.04 426102.01 4594485.12 426099.95 4594481.22 426099.44 4594480.28 426096.9 4594476.04 426094.29 4594471.86 426091.62 4594467.72 426088.88 4594463.62 426086.07 4594459.56 426083.2 4594455.54 426080.26 4594451.58 426077.26 4594447.68 426074.4 4594444.06 426066.49 4594434.5 426062.26 4594429.46 426058.53 4594425 426057.07 4594423.28 426050.5 4594415.57 426048.61 4594413.36 426045.97 4594410.28 426042.72 4594406.47 426036.78 4594399.64 426030.78 4594392.88 426028.91 4594390.8 426026.55 4594388.18 426025.19 4594386.68 426018.5 4594379.24 426011.76 4594371.86 426004.97 4594364.54 426004.32 4594363.85 426001.13 4594360.47 425998.11 4594357.27 425997.33 4594356.45 425991.92 4594350.66 425991.67 4594350.39 425990.67 4594349.35 425988 4594346.55 425986.45 4594344.93 425982.92 4594341.3 425980.93 4594339.26 425975.61 4594333.9 425975.44 4594333.72 425975.35 4594333.64 425971.47 4594329.81 425969.71 4594328.08 425968.89 4594327.28 425961.04 4594319.56 425958.02 4594316.59 425950.69 4594309.44 425947.1 4594305.95 425941.58 4594300.63 425940.44 4594299.52 425936.46 4594295.71 425927.14 4594288.17 425923.86 4594285.53 425915.62 4594278.92 425915.57 4594278.88 425914.5 4594278.03 425912.25 4594276.25 425905.97 4594271.28 425899.47 4594266.35 425887.9 4594257.53 425880.64 4594252.26 425877.18 4594249.75 425869.52 4594243.88 425861.1 4594237.44 425855.08 4594232.92 425851.41 4594230.18 425844.07 4594224.83 425841.77 4594223.16 425831.53 4594216.03 425822.22 4594209.24 425812.25 4594202.33 425802.5 4594195.8 425801.32 4594194.99 425790.89 4594187.86 425779.76 4594180.65 425774.04 4594176.98 425766.47 4594172.13 425753.27 4594163.54 425744.21 4594157.89 425733.48 4594151.31 425720.93 4594143.62 425707.6 4594135.95 425704.76 4594134.28 425694.6 4594128.3 425686.47 4594123.74 425681.68 4594121.06 425673.77 4594116.7 425669.64 4594114.43 425659.8 4594109.32 425653.7 4594106.06 425646.3 4594102.1 425634 4594095.89 425632.78 4594095.28 425623.29 4594090.57 425616.71 4594087.49 425616.48 4594087.38 425610.57 4594084.62 425602.32 4594080.84 425595.36 4594077.66 425593.45 4594076.78 425585.69 4594073.21 425585.68 4594094.89 425581.46 4594094.07 425570.58 4594095.39 425555.97 4594100.78 425539.69 4594102.19 425533.42 4594103.46 425523.85 4594105.4 425507.6 4594108.62 425490.45 4594111.96 425473.31 4594115.39 425455.86 4594118.53 425436.8 4594121.3 425418.23 4594123.77 425401.29 4594126.9 425388.61 4594128.35 425378.15 4594130.45 425371.79 4594130.58 425366.94 4594130.68 425358.13 4594130.25 425347.27 4594127.96 425335.62 4594125.59 425327.84 4594121.94 425319.74 4594117 425313.14 4594111.94 425307.52 4594106.14 425298.39 4594099.53 425288.55 4594093.02 425280.84 4594087.48 425272.75 4594083.03 425264.07 4594079.41 425252.54 4594073.33 425243.29 4594070.72 425235.62 4594067.47 425227.06 4594064.54 425216.59 4594061.55 425204.88 4594056.17 425197.27 4594051.03 425189.1 4594047.19 425179.1 4594042.79 425169.75 4594040.37 425160.72 4594039.35 425153.61 4594038.98 425142.93 4594040.3 425131.55 4594041.82 425118.4 4594044.68 425104.67 4594048.94 425095.12 4594051.23 425085.96 4594054.31 425081.56 4594059.49 425080.99 4594050.6 425080.17 4594039.33 425079.66 4594036.48 425078.38 4594029.37 425075.23 4594022.03 425071.69 4594009.71 425068.16 4593998.67 425068.5 4593990.27 425067.24 4593977.01 425067.98 4593963.19 425062.71 4593970.09 425056.44 4593972.22 425048.98 4593974.46 425041.42 4593976.51 425031.21 4593976.9 425021.62 4593977.2 425013.81 4593977.05 425006.98 4593975.98 425002.17 4593975.48 424993.24 4593973.55 424986.89 4593971.18 424980.97 4593970.7 424976.59 4593971.48 424974.98 4593976.11 424975.02 4593988.51 424973.1 4594003.14 424972.69 4594017.75 424972.72 4594029.34 424973.16 4594038.19 424973.38 4594042.62 424973.7 4594059.01 424973.83 4594075.81 424974.84 4594091.98 424974.82 4594105.87 424973.7 4594115.2 424972.53 4594119.69 424971.84 4594122.32 424969.33 4594126.97 424964.88 4594129.76 424959.35 4594132.97 424949.94 4594138.65 424941.6 4594141.71 424932.39 4594146.29 424922.3 4594147.59 424909.87 4594151.03 424901.1 4594153.3 424895.65 4594156.01 424889.03 4594160.33 424884.22 4594165.03 424884.91 4594159.21 424884.8 4594153.33 424886.75 4594145.89 424890.96 4594137.24 424849.56 4594148.8 424806.93 4594162.72 424764.95 4594178.5 424723.7 4594196.1 424689.25 4594212.01 424655.39 4594229.18 424622.17 4594247.54 424600.99 4594260.08 424580.12 4594273.11 424559.55 4594286.63 424526.26 4594310.03 424493.84 4594334.61 424462.33 4594360.34 424442.77 4594376.71 424423.35 4594393.25 424404.08 4594409.96 424329.55 4594479.57 424326.05 4594483.2 424322.41 4594486.67 424318.61 4594489.98 424314.67 4594493.12 424310.6 4594496.08 424306.41 4594498.87 424302.09 4594501.47 424297.67 4594503.88 424293.15 4594506.09 424287.34 4594508.63 424281.61 4594494.73 424265.84 4594501.36 424250.17 4594508.22 424234.61 4594515.32 424225.23 4594519.65 424215.9 4594524.09 424206.62 4594528.66 424212.89 4594541.18 424213.33 4594542.07 424184.81 4594557.05 424156.91 4594573.14 424129.67 4594590.32 423960.4 4594367.67 423963.7 4594366.83 423961.46 4594363.71 423960.34 4594362.14 423958.5 4594359.58 423957.23 4594357.81 423955.07 4594354.8 423953.57 4594352.71 423952.41 4594351.08 423951.62 4594349.97 423949.72 4594347.33 423947.95 4594344.85 423946.46 4594342.78 423944.35 4594339.84 423941.96 4594336.51 423939.9 4594333.63 423937.45 4594330.21 423936.35 4594328.68 423936.74 4594328.4 423936.32 4594328.14 423935.62 4594327.62 423934.96 4594327.03 423934.37 4594326.39 423933.93 4594325.84 423920.3 4594328.91 423913.82 4594329.92 423909.26 4594330.45 423905.97 4594330.72 423900.23 4594330.95 423890.44 4594331.67 423887.57 4594331.7 </gml:posList> </gml:LinearRing> </gml:exterior> <gml:interior> <gml:LinearRing> <gml:posList srsDimension= \"2\" count= \"73\" > 425164.92 4594241.97 425176.47 4594233.04 425206.28 4594209.61 425210.27 4594206.39 425247.32 4594176.49 425254.64 4594171.69 425262.15 4594167.2 425268.7 4594163.65 425269.85 4594163.02 425277.82 4594159.33 425283.08 4594157.23 425285.98 4594156.08 425294.3 4594153.27 425302.76 4594150.92 425325.43 4594146.87 425345.25 4594143.8 425354.86 4594144.35 425364.42 4594145.52 425373.88 4594147.31 425404.81 4594155.47 425407.44 4594158.31 425412.66 4594163.97 425413.72 4594165.39 425418.78 4594170.92 425420.11 4594172.37 425429.1 4594164.38 425431.05 4594163.76 425432 4594163.85 425448.4 4594169 425512.26 4594189.58 425514.25 4594190.22 425522.73 4594192.81 425530.84 4594195.91 425538.81 4594199.39 425546.97 4594202.76 425575.79 4594216.63 425580.9 4594219.28 425586.12 4594222.4 425591.44 4594225.8 425593.45 4594227.09 425595.44 4594228.83 425596.91 4594231.03 425597.76 4594233.54 425597.92 4594236.19 425597.85 4594238.98 425597.24 4594241.71 425596.12 4594244.27 425594.25 4594247.97 425594.07 4594248.2 425592.79 4594249.83 425591.09 4594251.48 425587.96 4594254.1 425518.23 4594315.26 425517.96 4594314.97 425513.43 4594310.16 425511.88 4594311.31 425507.28 4594314.74 425505.67 4594315.93 425510.62 4594321.48 425510.82 4594321.71 425473.11 4594354.38 425461.28 4594364.63 425445.9 4594348.78 425443.73 4594350.77 425422.24 4594370.4 425421.72 4594369.82 425355.43 4594296.39 425352.17 4594292.78 425272.84 4594364.58 425271.56 4594363.17 425251.64 4594341.15 425163.12 4594243.36 425164.92 4594241.97 </gml:posList> </gml:LinearRing> </gml:interior> <gml:interior> <gml:LinearRing> <gml:posList srsDimension= \"2\" count= \"41\" > 425085.7 4595246.71 425094.8 4595257.19 425120.04 4595286.19 425123.63 4595283.05 425123.72 4595282.97 425124.2 4595283.52 425136.06 4595297.12 425136.08 4595297.14 425129.26 4595303.1 425128.56 4595303.7 425132.45 4595308.18 425134.1 4595310.09 425133.15 4595310.86 425119.56 4595321.77 425096.25 4595342.29 425067.15 4595367.89 425064.54 4595370.18 425059.33 4595374.74 425055.65 4595377.98 425049.86 4595383.3 425046.86 4595386.37 425042.18 4595392.13 425037.81 4595398.51 425034.69 4595404.03 425032.44 4595408.98 425031.68 4595410.95 425029.23 4595408.07 425003.04 4595377.27 425002.68 4595364.56 425011.69 4595357 425002.58 4595346.38 425021.82 4595300.95 425009.6 4595285.81 424995.92 4595267.45 425001.5 4595252.92 425026.85 4595239.43 425022.51 4595229.52 425032.52 4595213.68 425041.87 4595206.63 425072.28 4595231.29 425085.7 4595246.71 </gml:posList> </gml:LinearRing> </gml:interior> <gml:interior> <gml:LinearRing> <gml:posList srsDimension= \"2\" count= \"47\" > 425067.16 4595383.1 425064.7 4595380.3 425067.27 4595378.08 425070.23 4595375.4 425071.97 4595374.02 425076.03 4595370.45 425085.55 4595362.09 425097.32 4595351.67 425107.89 4595342.35 425116.26 4595334.99 425121.18 4595330.61 425128.12 4595324.49 425131.4 4595321.64 425136.68 4595317.3 425142.27 4595313.58 425146.95 4595311.08 425148.66 4595310.24 425149.46 4595309.85 425155.13 4595307.71 425161.16 4595305.99 425167.67 4595304.75 425175.08 4595304.08 425180.68 4595304.09 425186.2 4595304.48 425192.87 4595305.46 425199.84 4595307.02 425205.26 4595308.64 425209.65 4595310.29 425209.95 4595310.43 425215.74 4595313.13 425221.33 4595316.48 425225.98 4595319.76 425230.16 4595323.39 425230.51 4595323.69 425231.27 4595324.46 425231.58 4595324.77 425110.83 4595432.94 425084.24 4595402.59 425083.67 4595401.94 425079.25 4595396.9 425078.31 4595395.83 425077.68 4595395.11 425075.62 4595392.76 425071.98 4595388.6 425071.01 4595387.5 425067.51 4595383.51 425067.16 4595383.1 </gml:posList> </gml:LinearRing> </gml:interior> <gml:interior> <gml:LinearRing> <gml:posList srsDimension= \"2\" count= \"7\" > 425536.49 4594331.99 425604.7 4594272.14 425649.55 4594323.25 425581.34 4594383.1 425558.8 4594357.42 425554.29 4594352.3 425536.49 4594331.99 </gml:posList> </gml:LinearRing> </gml:interior> <gml:interior> <gml:LinearRing> <gml:posList srsDimension= \"2\" count= \"25\" > 425527.13 4594340.22 425612.61 4594438.61 425578.76 4594484.34 425569.02 4594466.89 425516.34 4594372.51 425513.75 4594373.84 425512.18 4594371.6 425510.79 4594369.27 425510.25 4594368.26 425509.79 4594367.01 425509.6 4594366.22 425509.52 4594365.71 425509.45 4594364.38 425509.49 4594362.47 425509.72 4594360.57 425509.8 4594360.19 425510.16 4594358.71 425510.81 4594356.81 425511.52 4594355.22 425511.64 4594354.99 425512.65 4594353.25 425513.25 4594352.55 425513.78 4594351.92 425524.73 4594342.32 425527.13 4594340.22 </gml:posList> </gml:LinearRing> </gml:interior> <gml:interior> <gml:LinearRing> <gml:posList srsDimension= \"2\" count= \"8\" > 425908.55 4594760.46 425824.5 4594834.58 425804.49 4594811.89 425804.73 4594808.38 425887.23 4594736.14 425888.74 4594737.57 425904.41 4594755.64 425908.55 4594760.46 </gml:posList> </gml:LinearRing> </gml:interior> </gml:PolygonPatch> </gml:patches> </gml:Surface> </gml:surfaceMember> </gml:MultiSurface> </cp:geometry> <cp:inspireId> <Identifier xmlns= \"http://inspire.ec.europa.eu/schemas/base/3.3\" > <localId> 5049611DF2954G </localId> <namespace> ES.SDGC.CP </namespace> </Identifier> </cp:inspireId> <cp:label> 11 </cp:label> <cp:nationalCadastralReference> 5049611DF2954G </cp:nationalCadastralReference> <cp:referencePoint> <gml:Point gml:id= \"ReferencePoint_ES.SDGC.CP.5049611DF2954G\" srsName= \"http://www.opengis.net/def/crs/EPSG/0/25831\" > <gml:pos> 425003.4 4594786.65 </gml:pos> </gml:Point> </cp:referencePoint> </cp:CadastralParcel> </member> </FeatureCollection> SLD EL SLD (Style Layer Descriptor) es una codificaci\u00f3n xml para permitir al usuario ampliar las especificaciones (WMS) y definir s\u00edmbolos de objetos. El usuario puede aplicar estilos a los objetos de forma diferentes de c\u00f3mo han sido configurados en el servidor. Los servidores WMS que soportan SLD permiten a\u00f1adir los par\u00e1metros SLD d\u00f3nde como valor se describe la url d\u00f3nde se encuentra el documento xml o SLDBODY, d\u00f3nde se pasan los valores SLD de forma directa (m\u00e9todo poco recomendado) a las peticiones WMS GetMap. Ejemplos: Petici\u00f3n sin SLD http://servicios.idee.es/wms-inspire/hidrografia?VERSION=1.1.1&SERVICE=WMS&REQUEST=GetMap&SRS=EPSG:25830&FORMAT=image/png&BBOX=419685.23094987,4082028.7934849,582245.81538657,4201830.8601227&WIDTH=1247&HEIGHT=919&LAYERS=HY.Network Petici\u00f3n con SLD http://servicios.idee.es/wms-inspire/hidrografia?VERSION=1.3.0&SERVICE=WMS&REQUEST=GetMap&CRS=EPSG:4258&FORMAT=image/png&BBOX=40.277646164396,-2.9977199809325,40.363845924834,-2.8768703715575&WIDTH=1408&HEIGHT=1004&SLD=https://direccionpublica/prueba.xml Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/sld SOS Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/sos CSW Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/cat Otros est\u00e1ndares OGC Web Map Context (WMC) Especifica como describir en un fichero XML, para crear un proyecto que contenga un mapa creado a partir de dos o m\u00e1s conexiones WMS. Permite: * Crear vistas predefinidas, mapas tem\u00e1ticos * Guardar Y/o cargar on-line estas vistas Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/wmc Keyhole Markup Language (KML) Es un lenguaje XML centrado en la descripci\u00f3n y visualizaci\u00f3n de la geoinformaci\u00f3n en actuales y futuras aplicaciones webs de gesti\u00f3n de mapas (2d y 3d). Este lenguaje fue presentado por Google al OGC con el objetivo de incoroporarlo como un est\u00e1ndar. Actualmente OGC y Google trabajan en colaboraci\u00f3n para asegurar este proceso. Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/kml Web Coverage Service(WCS) Ampl\u00eda la interfaz Web Map Server para permitir el acceso a \"coberturas\" geoespaciales que representen valores o propiedades de localizaciones geogr\u00e1ficas; m\u00e1s que los mapas generados por WMS (im\u00e1genes). La diferencia principal con el WMS es que el servicio WCS proporciona los datos junto con su descripci\u00f3n detallada, define peticiones con una sintaxis rica para obtener esos datos y devuelve la informaci\u00f3n con su sem\u00e1ntica original, lo cual permite que puedan ser interpretados, extrapolados, etc., y no s\u00f3lo representados de forma est\u00e1tica. B\u00e1sicamente sirve para descargar archivos raster a escala 1 a 1 y preparados para poder trabajarlos en un sig raster. Princpales inerfaces: * GetCapabilities * DescribeCoverage * GetCoverage Web Processing Service (WPS) Servicio de publicaci\u00f3n de procesos geoespaciales en la Web. Se entiende por procesos cualquier algoritmo, c\u00e1lculo o modelo, que opere sobre datos espacialmente referenciados tanto en formato raster como vectorial, de este modo un WPS puede ofrecer cualquier tipo de funcionalidad GIS a trav\u00e9s de una red. Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/wps Recursos https://www.ogc.org/standards/ https://www.idee.es/web/guest/rincon-del-desarrollador","title":"2. Est\u00e1ndares OCG"},{"location":"2_estandares_OCG/#estandares-ocg","text":"","title":"Est\u00e1ndares OCG"},{"location":"2_estandares_OCG/#que-es-ogc","text":"El OGC (Open Geospatial Consortium fu\u00e9 creada en 1994 y est\u00e1 formada por m\u00e1s de 500 empresas, agencias gubernamentales y universidades. Es una organizaci\u00f3n internacional sin \u00e1nimo de lucro comprometida con la elaboraci\u00f3n de est\u00e1ndares abiertos e interoperables de calidad para la comunidad geoespacial global. Estos est\u00e1ndares se elaboran a trav\u00e9s de un proceso de consenso y est\u00e1n disponibles de forma gratuita para que cualquier persona pueda utilizarlos para mejorar el intercambio de los datos geoespaciales del mundo. Estas especificaciones tienen como objetivo, fomentar la interoperabilidad geoespacial. El \u00e9xito de estas especificaciones radica en el hecho de que son impulsadas y creadas por las mismas empresas, que despu\u00e9s las implementan en sus productos comerciales.","title":"Qu\u00e9 es OGC?"},{"location":"2_estandares_OCG/#interoperabilidad","text":"Se puede definir la interoperabilidad como la habilidad de dos o m\u00e1s sistemas para intercambiar informaci\u00f3n y poderla utilizar, sin ning\u00fan esfuerzo por parte del usuario. Las modalidades de interoperatividad dependen de los agentes que interaccionan. Dicho de otra manera, los datos producidos en un entorno operativo tienen que poder ser le\u00eddos e interpretados por otro entorno sin que el usuario tenga que hacer una conversi\u00f3n de formatos. La interoperabilidad permite: Acceder a m\u00e1s y mejor informaci\u00f3n (topogr\u00e1ficos, ortoim\u00e1genes, callejeros, catastro, medio ambiente...), sin tener que disponer de un software espec\u00edfico o directamente desde el navegador. Esto permite que el usuario pueda acceder a cartograf\u00eda de varias fuentes, con arquitecturas diferentes, de una forma f\u00e1cil y transparente. Facilita el acceso a geoservicios.","title":"Interoperabilidad"},{"location":"2_estandares_OCG/#estandares-ogc","text":"Un est\u00e1ndar es un modelo, un patr\u00f3n que tiene como finalidad la fijaci\u00f3n de unas normas comunes para garantizar la homogeneidad en el proceso de producci\u00f3n. Pero para que tenga \u00e9xito tiene que tener un uso mayoritario. Est\u00e1ndares Para conseguir que, tanto la documentaci\u00f3n de los datos como la creaci\u00f3n de servicios sea comprensible y accesible para todo el mundo, es decir, para hacer que todos \u201chablemos el mismo idioma\u201d, se han dise\u00f1ado est\u00e1ndares de metadatos y de servicios que pretenden poner en com\u00fan los puntos de vista de los diferentes productores. Por lo tanto, la estandarizaci\u00f3n consiste en hacer que, tanto la documentaci\u00f3n de datos como la creaci\u00f3n de geoservicios, as\u00ed como su acceso, se hagan conforme a unas norma previamente establecidas. Los est\u00e1ndares de la OGC son documentos de car\u00e1cter t\u00e9cnico d\u00f3nde se describen las interfaces de comunicaci\u00f3n entre servidores y la forma de implementarlos. En estas especificaciones no se menciona ni la arquitectura, plataforma o lenguajes de programaci\u00f3n a utilizar. Los documentos, antes de ser consideradas como una OpenGIS Implementation Specification, son elaborados y probados por diferentes grupos de trabajo dentro de OGC y finalmente sometidas a votaci\u00f3n. Los servicios de cartograf\u00eda online o web de OGC (OWS) son est\u00e1ndares de OGC creados para su uso en aplicaciones de la World Wide Web (WWW). Estos permiten formular petiones al servidor para: enviar preguntas, obtener datos vectoriales o r\u00e1ster, hacer geoprocesos, etc. Todos los est\u00e1ndares creados por OGC se pueden consultar en https://www.ogc.org/docs/is Evoluci\u00f3n de servicios OWS","title":"Est\u00e1ndares OGC"},{"location":"2_estandares_OCG/#wms","text":"La intenci\u00f3n de WMS (Web Map Service) es la de permitir la superposici\u00f3n visual de informaci\u00f3n geogr\u00e1fica compleja y distribuida en diferentes servidores. Un cliente puede hacer peticiones a otros servidores tambi\u00e9n basados en esta especificaci\u00f3n para descubrir informaci\u00f3n geogr\u00e1fica deseada. Una vez encontrada el cliente puede recurrir a ella de forma simult\u00e1nea y puede visualizar diferentes datos geogr\u00e1ficos de diferentes servidores en un mismo entorno. Cada petici\u00f3n est\u00e1 compuesta por unos par\u00e1metros concretos definidos por la especificaci\u00f3n WMS y que es entendida por todos los servidores de mapas que cumplen con la especificaci\u00f3n. Por lo tanto, cuando se dice que un Servidor de Mapas es est\u00e1ndar y cumple con WMS, significa que es capaz de dar respuesta a estas peticiones. El est\u00e1ndar WMS proporciona una interfaz HTTP simple para solicitar im\u00e1genes de mapas georegistrados desde una o m\u00e1s bases de datos geoespaciales distribuidas. Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/wms","title":"WMS"},{"location":"2_estandares_OCG/#tipos-de-peticiones-wms","text":"","title":"Tipos de peticiones WMS"},{"location":"2_estandares_OCG/#getcapabilities","text":"Nos permite descubrir cuales son las capacidades del servidor. Como respuesta va a obtener un archivo en formato xml d\u00f3nde podremos saber cuales son las caracter\u00edsticas del servicio, las versiones de WMS soportadas por el servidor, las operaciones que soporta, cual es su sistema de referencia, sus coordenadas, que formato de imagen soporta y metadatos de las capas de informaci\u00f3n que contiene.","title":"GetCapabilities"},{"location":"2_estandares_OCG/#parametros-del-getcapabilities","text":"Par\u00e1metro Obligatoriedad Descripci\u00f3n VERSION Obligatorio Versi\u00f3n de la especificaci\u00f3n OGC (1.0.0, 1.1.0, 1.1.1, 1.3.0) SERVICE Obligatorio Tipo de servicio al que va dirigida la petici\u00f3n ( WMS ) REQUEST Obligatorio Nombre de la operaci\u00f3n ( GetCapabilities ) LANGUAGE Opcional Se obtiene el fichero de salida en el idioma solicidado FORMAT Opcional Formato de salida del metadato del servicio. (Por defecto text/xml) Ejemplos: http://www.ign.es/wms-inspire/ign-base?VERSION=1.3.0&REQUEST=GetCapabilities&SERVICE=WMS http://geoserveis.icc.cat/icc_bt5m/wms/service?REQUEST=GetCapabilities&SERVICE=WMS","title":"Par\u00e1metros del GetCapabilities"},{"location":"2_estandares_OCG/#aspectos-practicos","text":"","title":"Aspectos pr\u00e1cticos"},{"location":"2_estandares_OCG/#tamano-maximo-de-la-imagen","text":"Si se pide una imagen mayor que el tama\u00f1o m\u00e1ximo permitodo retornar\u00e1 un error <Service> <Name> icc_bt5m </Name> <Title> ICC - Base topogr\u00e0fica de Catalunya 1:5 000 (BT-5M) - Capes WMS 96dpi (p\u00edxel 0,26458333 mm) </Title> ... <MaxWidth> 2048 </MaxWidth> <MaxHeight> 2048 </MaxHeight> </Service>","title":"Tama\u00f1o m\u00e1ximo de la im\u00e1gen"},{"location":"2_estandares_OCG/#onlineresource","text":"En algunos software de escritorio utiliza esta url para hacer las peticiones de las operaciones GetMap. <GetMap> <Format> image/jp2;subtype=\"gmljp2\" </Format> <Format> image/gif </Format> <Format> image/png </Format> <Format> image/bmp </Format> <Format> image/jpeg </Format> <Format> image/tiff </Format> <DCPType> <HTTP> <Get> <OnlineResource xmlns:xlink= \"http://www.w3.org/1999/xlink\" xlink:href= \"http://shagrat.icc.cat/lizardtech/iserv/ows\" xlink:type= \"simple\" /> </Get> </HTTP> </DCPType> </GetMap>","title":"OnlineResource"},{"location":"2_estandares_OCG/#layer","text":"El atributo queryable indica si la capa es consultable (1 = consultable, 0 = no consultable) Name es indentificador de la capa. Es el valor que se debe usar en el par\u00e1metro LAYERS de las peticiones GetMap Title es nombre descriptivo de la capa LegendURL hace referencia a una url de una imagen externa que contiene la leyenda de la capa Min y Max(ScaleDenominator) factor de escala. Limita la visualizaci\u00f3n de la capa a estas escalas. Si se pide una capa fuera de esa escala retorna en blanco. <Layer queryable= \"1\" > <Name> 02_ALTI_PA </Name> <Title> [BT5M] (02) (x) ALTIMETRIA: talussos, marges (\u00e0rees) </Title> <Abstract> 02_ALTI_PA </Abstract> <CRS> EPSG:25831 </CRS> <CRS> EPSG:4326 </CRS> <BoundingBox CRS= \"EPSG:25831\" minx= \"254904.96\" miny= \"4484796.89\" maxx= \"530907.30\" maxy= \"4749795.10\" /> ... <Style> ... <LegendURL width= \"328\" height= \"64\" > <Format> image/png </Format> <OnlineResource xmlns:xlink= \"http://www.w3.org/1999/xlink\" xlink:href= \"http://geoserveis.icc.cat/icc_bt5m/wms/service?request=GetLegendGraphic%26version=1.3.0%26format=image/png%26layer=02_ALTI_PA\" xlink:type= \"simple\" /> </LegendURL> </Style> <MinScaleDenominator> 472.470238 </MinScaleDenominator> <MaxScaleDenominator> 7087.053571 </MaxScaleDenominator> </Layer>","title":"Layer"},{"location":"2_estandares_OCG/#getfeatureinfo","text":"Formatos de salida de la consulta <GetFeatureInfo> <Format> application/vnd.esri.wms_raw_xml </Format> <Format> application/vnd.esri.wms_featureinfo_xml </Format> <Format> application/vnd.ogc.wms_xml </Format> <Format> text/xml </Format> <Format> text/html </Format> <Format> text/plain </Format> <DCPType> <HTTP> <Get> <OnlineResource xmlns:xlink= \"http://www.w3.org/1999/xlink\" xlink:type= \"simple\" xlink:href= \"http://geoserveis.icc.cat/icc_bt5m/wms/service?\" /> </Get> </HTTP> </DCPType> </GetFeatureInfo>","title":"GetFeatureInfo"},{"location":"2_estandares_OCG/#getmap","text":"Petici\u00f3n GetMap devolver\u00e1 un mapa en formato imagen, ya sea un PNG, JPEG, GIF, etc.","title":"GetMap"},{"location":"2_estandares_OCG/#parametros-del-getmap","text":"Par\u00e1metro Obligatoriedad Descripci\u00f3n VERSION Obligatorio Versi\u00f3n de la especificaci\u00f3n OGC (1.0.0, 1.1.0, 1.1.1, 1.3.0) SERVICE Obligatorio Tipo de servicio al que va dirigida la petici\u00f3n ( WMS ) REQUEST Obligatorio Nombre de la operaci\u00f3n ( GetMap ) LAYERS Obligatorio Lista de nombres de las capas separadas por coma FORMAT Obligatorio Formato de salida de la imagen. (image/png, image/jpeg, ...) STYLES Obligatorio Lista de estilos separados por coma. Si no hay estilo se puede dejar en blanco SRS o CRS Obligatorio C\u00f3digo ESPG del sistema de referencia BBOX Obligatorio Caja de coordenadas del mapa (minx,miny,maxx,maxy) WIDTH Obligatorio N\u00famero p\u00edxeles del ancho de la im\u00e1gen HEIGHT Obligatorio N\u00famero p\u00edxeles del alto de la im\u00e1gen TRANSPARENT Opcional Indica si el fondo del mapa debe ser transparente (true ,false) BGCOLOR Opcional Color de fondo para la imagen del mapa. El valor est\u00e1 en la formato RRGGBB hexadecimal SLD Opcional Una URL que hace referencia a un archivo XML StyledLayerDescriptor que controla el estilo de las capas de mapa EXCEPTIONS Opcional Formato excepciones Ejemplo: http://www.ign.es/wms-inspire/ign-base?SERVICE=WMS&REQUEST=GetMap&VERSION=1.3.0&LAYERS=IGNBaseTodo&STYLES=&FORMAT=image/png&BGCOLOR=0xFFFFFF&TRANSPARENT=TRUE&SRS=EPSG:4258&BBOX=26.4764705882353,-19,44.5235294117647,5&WIDTH=1020&HEIGHT=767","title":"Par\u00e1metros del GetMap"},{"location":"2_estandares_OCG/#getfeatureinfo_1","text":"Petici\u00f3n GetFeatureInfo sirve para mostrar los atributos de los objetos del mapa, vuelve la informaci\u00f3n en formato de tabla o XML. Si una capa est\u00e1 marcada como \u201cconsultable\u201d (queryable), se puede solicitar datos sobre una coordenada de la imagen del mapa.","title":"GetFeatureInfo"},{"location":"2_estandares_OCG/#parametros-del-getfeatureinfo","text":"Par\u00e1metro Obligatoriedad Descripci\u00f3n VERSION Obligatorio Versi\u00f3n de la especificaci\u00f3n OGC (1.0.0, 1.1.0, 1.1.1, 1.3.0) SERVICE Obligatorio Tipo de servicio al que va dirigida la petici\u00f3n ( WMS ) REQUEST Obligatorio Nombre de la operaci\u00f3n ( GetFeatureInfo ) LAYERS Obligatorio Lista de nombres de las capas separadas por coma FORMAT Obligatorio Formato de salida de la imagen. (image/png, image/jpeg, ...) STYLES Obligatorio Lista de estilos separados por coma. Si no hay estilo se puede dejar en blanco SRS o CRS Obligatorio C\u00f3digo ESPG del sistema de referencia BBOX Obligatorio Caja de coordenadas del mapa (minx,miny,maxx,maxy) WIDTH Obligatorio N\u00famero p\u00edxeles del ancho de la im\u00e1gen HEIGHT Obligatorio N\u00famero p\u00edxeles del alto de la im\u00e1gen QUERY_LAYERS Obligatorio Lista de nombres de las capas que se quieren consultar separadas por coma X o I Obligatorio Valor del p\u00edxel a consultar Y o J Obligatorio Valor del p\u00edxel a consultar INFO_FORMAT Opcional Formato de la respuesta (por defecto text/xml) FEATURE_COUNT Opcional N\u00famero m\u00e1ximo de elementos a devolver EXCEPTIONS Opcional Formato excepciones Ejemplo: http://geoserveis.icc.cat/icgc_bm5m/wms/service?REQUEST=GetFeatureInfo&SERVICE=WMS&VERSION=1.1.1&LAYERS=10_MUNICIPI_PC&QUERY_LAYERS=10_MUNICIPI_PC&INFO_FORMAT=text/html&STYLES=&SRS=EPSG:25831&BBOX=257904,4484796,680304,4907196&WIDTH=768&HEIGHT=768&X=295&Y=580","title":"Par\u00e1metros del GetFeatureInfo"},{"location":"2_estandares_OCG/#getlegendgraphic","text":"Petici\u00f3n que devuelve una imagen de la imagen de la leyenda del mapa de una capa, proporcionando una gu\u00eda visual de los elementos del mapa. Par\u00e1metro Obligatoriedad Descripci\u00f3n VERSION Obligatorio Versi\u00f3n de la especificaci\u00f3n OGC (1.0.0, 1.1.0, 1.1.1, 1.3.0) SERVICE Obligatorio Tipo de servicio al que va dirigida la petici\u00f3n ( WMS ) REQUEST Obligatorio Nombre de la operaci\u00f3n ( GetLegendGraphic ) LAYER Obligatorio Nombre de la capa FORMAT Obligatorio Formato de salida de la imagen. (image/png, image/jpeg, ...) WIDTH Opcional N\u00famero p\u00edxeles del ancho de la im\u00e1gen HEIGHT Opcional N\u00famero p\u00edxeles del alto de la im\u00e1gen Ejemplo: http://wms.guifi.net/cgi-bin/mapserv?map=/home/guifi/maps.guifi.net/guifimaps/GMap.map&version=1.3.0&service=WMS&request=GetLegendGraphic&sld_version=1.1.0&layer=Nodes&format=image/png&STYLE=default","title":"GetLegendGraphic"},{"location":"2_estandares_OCG/#aspector-practicos-wms","text":"","title":"Aspector pr\u00e1cticos WMS"},{"location":"2_estandares_OCG/#principales-diferencias-entre-las-versiones-111-y-130","text":"En la operaci\u00f3n GetMap, el par\u00e1metro SRS se llama CRS en 1.3.0 En la operaci\u00f3n GetFeatureInfo, los par\u00e1metros X e Y se llaman I y J en 1.3.0. En 1.1.1, los sistemas de coordenadas geogr\u00e1ficas especificados con el espacio de nombres EPSG se definen para tener un orden de ejes de longitud / latitud. En 1.3.0 el orden es la latitud / longitud. Por ejemplo, considere la solicitud WMS 1.1 utilizando el SRS WGS84 (EPSG: 4326): 1 server/wms?VERSION=1.1.1&REQUEST=GetMap&SRS=epsg:4326&BBOX=-180,-90,180,90&... La solicitud equivalente WMS 1.3.0 es: 1 server/wms?VERSION=1.3.0&REQUEST=GetMap&CRS=epsg:4326&BBOX=-90,-180,90,180&...","title":"Principales diferencias entre las versiones 1.1.1 y 1.3.0"},{"location":"2_estandares_OCG/#problemas-comunes","text":"Tama\u00f1o de la imagen (pantallas grandes y/o de mucha resoluci\u00f3n) Capas no visibles por el control de escala Capas no consultables Formato de salida del GetFeatureInfo No est\u00e1n pensados para peticiones teseladas (velocidad) No tienen cach\u00e9. Las im\u00e1genes se generan al vuelo Lista restringida de SRS soportados En software de escritorio el onlineResource (QGis tiene la opci\u00f3n de ignorar el onlineResource ) Modificar el estilo (SLD poco soportado) SLD dif\u00edcil de entender y hacer","title":"Problemas comunes"},{"location":"2_estandares_OCG/#wmts","text":"Un WMTS es un servicio que permite almacenar los datos recientemente le\u00eddos, por tanto agilizar la carga de los mismos en caso de que estos vuelvan a ser solicitados (cach\u00e9). Este servicio usa un modelo de teselas (Tiling Model) parametrizado de tal manera que un cliente puede hacer peticiones de un conjunto discreto de valores y recibir r\u00e1pidamente del servidor fragmentos de im\u00e1genes prerenderizadas (Tiles), que generalmente ya no requieren de ninguna manipulaci\u00f3n posterior para ser mostrados en pantalla. Cada una de las capas (layers) de un servidor WMTS sigue una o diversas estructuras piramidales de escalas (Tile Matrix sets o conjunto de Matrices de Teselas), en la que cada escala o nivel de la pir\u00e1mide (Tile Matrix o Matriz de Teselas), es una r\u00e1sterizaci\u00f3n y fragmentaci\u00f3n regular de los datos geogr\u00e1ficos a una escala o tama\u00f1o de p\u00edxel concreto. Por ello, una capa puede estar disponible en varios sistemas de coordenadas, y tener diferente \u00e1mbito en funci\u00f3n de \u00e9stos. El WMTS de OGC proporciona un enfoque complementario al WMS; a diferencia del WMS que fue concebido para poder compartir por renderizado mapas personalizados y se adopt\u00f3 como una soluci\u00f3n ideal para mostrar datos din\u00e1micos, el WMTS renuncia a la personalizaci\u00f3n de estos mapas para obtener una mayor escalabilidad, sirviendo datos prerenderizados donde la envolvente y las escalas han sido restringidas a un conjunto discreto de teselas que siguen una geometr\u00eda de malla regular. Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/wmts Una especificaci\u00f3n anterior para esto es el Tile Map Service (TMS). Es m\u00e1s simple que WMTS. Fue desarrollado por miembros de OSGeo y no est\u00e1 respaldada por un organismo oficial de est\u00e1ndares. Tambi\u00e9n existe la especificaci\u00f3n ZXY o \"slippy map\" que es igual que TMS pero la Y empieza por arriba a la izquierda. Esta especificaci\u00f3n tampoco est\u00e1 respaldada por un organismo oficial de est\u00e1ndares. Para cargar la im\u00e1genes se ulitza una llamada HTTP rest d\u00f3nde se especifica; https://.../.../z/x/y.format Z= Nivel de zoom X=coordenada X Y=coordenada Y Formato Raster: Im\u00e1gen png o JPEG http://a.tile.openstreetmap.org/3/2/4.png","title":"WMTS"},{"location":"2_estandares_OCG/#protocolos","text":"TMS (Tile Map Service): X Y coordenadas empiezan de debajo a la izquierda (t\u00edpico eje cartesiano de coordenadas) WMTS (Web Map Tile Service): OGC estandard , corrdenadas empiezan de arriba a la izquierda. ZXY o \"slippy map\": Igual que TMS pero la Y empieza por arriba a la izquierda","title":"Protocolos"},{"location":"2_estandares_OCG/#wfs","text":"El WFS (Web Feature Service) es una especificaci\u00f3n que sirve para lanzar consultas sobre objetos geogr\u00e1ficos. Los WFS implementan tambi\u00e9n la especificaci\u00f3n OGC FILTER encoding que permite dotar a WFS de un gran potencial ya que le permite realizar tanto consultas alfanum\u00e9ricas y espaciales. WFS b\u00e1sico permite hacer consultas y recuperaci\u00f3n de elementos geogr\u00e1ficos. Por el contrario WFS-T (Web Feature Service Transactional) permite adem\u00e1s la creaci\u00f3n, eliminaci\u00f3n y actualizaci\u00f3n de estos elementos geogr\u00e1ficos del mapa. Para realizar estas operaciones se utiliza el lenguaje GML (Geography Markup Language) que deriva del XML, que es el est\u00e1ndar a trav\u00e9s del que se transmiten las \u00f3rdenes WFS. el GML Tambi\u00e9n es el formato de retorno de las consultas. Operadores espaciales Operadores l\u00f3gicos BBOX LessThan Intersects LessThanEqualTo Within GreaterThanEqualTo Beyond NotEqualTo Equals Like Disjoint GreaterThan Touches EqualTo Crosses Between Contains Overlaps Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/wfs","title":"WFS"},{"location":"2_estandares_OCG/#tipos-de-peticiones-wfs","text":"","title":"Tipos de peticiones WFS"},{"location":"2_estandares_OCG/#getcapabilities_1","text":"Nos permite descubrir cuales son las capacidades del servidor. Como respuesta va a obtener un archivo en formato xml d\u00f3nde podremos saber cuales son las caracter\u00edsticas del servicio, las versiones de WFS soportadas por el servidor, las operaciones que soporta, cual es su sistema de referencia, sus coordenadas y metadatos de las capas de informaci\u00f3n que contiene.","title":"GetCapabilities"},{"location":"2_estandares_OCG/#parametros-del-getcapabilities_1","text":"Par\u00e1metro Obligatoriedad Descripci\u00f3n VERSION Obligatorio Versi\u00f3n de la especificaci\u00f3n OGC (1.0.0, 1.1.0, 1.1.3, 2.0, 2.0.2) SERVICE Obligatorio Tipo de servicio al que va dirigida la petici\u00f3n ( WFS ) REQUEST Obligatorio Nombre de la operaci\u00f3n ( GetCapabilities ) Ejemplo: http://www.juntadeandalucia.es/institutodeestadisticaycartografia/geoserver-ieca/grid/wfs?REQUEST=GetCapabilities&SERVICE=WFS&VERSION=2.0.0","title":"Par\u00e1metros del GetCapabilities"},{"location":"2_estandares_OCG/#describefeaturetype","text":"Devuelve la descripci\u00f3n de los tipos de objetos geogr\u00e1ficos (XML schema de los feature types) que el servicio puede ofrecer. El servidor devuelve como respuesta un archivo XML. En la descripci\u00f3n del tipo de objeto geogr\u00e1fico se indica c\u00f3mo hay que codificar los objetos geogr\u00e1ficos para enviarlos como datos de entrada en operaciones de inserci\u00f3n, actualizaci\u00f3n o sustituci\u00f3n, y c\u00f3mo se codifican cuando son datos de salida (en las respuestas de las operaciones GetPropertyValue, GetFeature o GetFeatureWithLock). Es una operaci\u00f3n obligatoria.","title":"DescribeFeatureType"},{"location":"2_estandares_OCG/#parametros-del-describefeaturetype","text":"Par\u00e1metro Obligatoriedad Descripci\u00f3n VERSION Obligatorio Versi\u00f3n de la especificaci\u00f3n OGC (1.0.0, 1.1.0, 1.1.1, 1.3.0) SERVICE Obligatorio Tipo de servicio al que va dirigida la petici\u00f3n ( WFS ) REQUEST Obligatorio Nombre de la operaci\u00f3n ( GetLegendGraphic ) TYPENAME Opcional Lista los nombres de los tipos de objeto geogr\u00e1fico que se van a describir, separados por comas. Si no se indica ninguno, devuelve la descripci\u00f3n de todos los tipos. OUTPUTFORMAT Opcional Formato de salida para describir los tipos de objetos. Por defecto GML3.2 (text/xml;subt ype=gml/3.2) Ejemplo: http://www.ign.es/wfs/redes-geodesicas?REQUEST=DescribeFeatureType&SERVICE=WFS&VERSION=1.1.0&TYPENAME=RED_ROI","title":"Par\u00e1metros del DescribeFeatureType"},{"location":"2_estandares_OCG/#getfeature","text":"Esta operaci\u00f3n devuelve una selecci\u00f3n de objetos geogr\u00e1ficos en formato GML. Adem\u00e1s, debe ser posible realizar un filtro en funci\u00f3n de sus propiedades para obtener los objetos geogr\u00e1ficos que desea y de realizar tanto consultas espaciales como no espaciales. Es una operaci\u00f3n obligatoria. Para definir el tipo de objeto geogr\u00e1fico a consultar, qu\u00e9 propiedades obtener y las restricciones a aplicar se utilizan el elemento Query Para ver m\u00e1s operaciones y ejemplos https://www.idee.es/resources/documentos/RD_wfs_v2_0.pdf","title":"GetFeature"},{"location":"2_estandares_OCG/#parametros-del-getfeature","text":"Par\u00e1metro Obligatoriedad Descripci\u00f3n VERSION Obligatorio Versi\u00f3n de la especificaci\u00f3n OGC (1.0.0, 1.1.0, 1.1.1, 1.3.0) SERVICE Obligatorio Tipo de servicio al que va dirigida la petici\u00f3n ( WFS ) REQUEST Obligatorio Nombre de la operaci\u00f3n ( GetLegendGraphic ) TYPENAME Obligatorio Lista los nombres de los tipos de objeto geogr\u00e1fico que se van a describir, separados por comas. (Excepto cuando el par\u00e1metro RESOURCE_ID es especificado) RESOURCEID Opcional Lista los identificadores \u00fanicos de los objetos geogr\u00e1ficos que se quieren obtener. Mutuamente excluyente con FILTER y BBOX. FILTER Opcional Describe un conjunto de caracter\u00edsticas sobre las que operar. Se debe establecer un filtro por cada tipo de objeto geogr\u00e1fico listado en el par\u00e1metro TYPENAME BBOX Opcional Solicitud mediante una bounding box (rect\u00e1ngulo envolvente). Mutuamente excluyente con RESOURCEID y FILTER. SORTBY Opcional Indica los nombres de las propiedades cuyos valores se van a utilizar para ordenar el resultado de la consulta. Se puede indicar si el orden es ascendente o descendente, valor ASC o DESC (Valor por defecto: orden descendente DESC). Ejemplo: SORTBY=Apellido ASC,Nota DESC FILTER_LANGUAGE Opcional Indica el lenguaje que se emplea para codificar la expresi\u00f3n (valor de FILTER). Valor por defecto urn:ogc:def:queryLanguage:OGC-FES:Filter. SRSNAME Opcional Sistema de referencia que debe aplicarse en la geometr\u00eda de los objetos geogr\u00e1ficos resultantes de la petici\u00f3n. Si no se indica, el servicio devuelve las geometr\u00edas en el sistema que posea por defecto. El servidor debe ser capaz de transformar las geometr\u00edas en los distintos sistemas de referencia que soporta. Ejemplos: Solicitud para obtener todos los v\u00e9rtices geod\u00e9sicos entre los paralelos 38 y 39 entre las latitudes 0 y 2 (par\u00e1metro BBOX) de la Red de Orden Inferior (par\u00e1metro typeName) del servicio de redes geod\u00e9sicas del Instituto Geogr\u00e1fico Nacional. Los resultados los pedimos en proyecci\u00f3n UTM huso 30 (par\u00e1metro srsNAME) y en el formato XML (par\u00e1metro outputFormat) http://www.ign.es/wfs/redes-geodesicas?SERVICE=WFS&REQUEST=GetFeature&TYPENAME=RED_ROI&srsNAME=urn:ogc:def:crs:EPSG::25830&BBOX=38,0,39,2&outputFormat=text/xml;%20subtype=gml/3.1.1 Solicitud del objeto geogr\u00e1fico denominado \u201cTeide\u201d del Nomencl\u00e1tor Geogr\u00e1fico B\u00e1sico de Espa\u00f1a usando el par\u00e1metro FILTER http://www.ign.es/wfs-inspire/ngbe?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetFeature&COUNT=10&TYPENAME=gn:NamedPlace&FILTER=%3cFilter%20xmlns:gn=%22http://inspire.ec.europa.eu/schemas/gn/4.0%22%3e%3cPropertyIsEqualTo%3e%3cValueReference%3egn:name/gn:GeographicalName/gn:spelling/gn:SpellingOfName/gn:text%3c/ValueReference%3e%3cLiteral%3eTeide%3c/Literal%3e%3c/PropertyIsEqualTo%3e%3c/Filter%3e","title":"Par\u00e1metros del GetFeature"},{"location":"2_estandares_OCG/#gml","text":"El GML (Geography Markup Language) es una codificaci\u00f3n basada en XML, pensada para la descarga, transporte , almacenaje y intercambio, de la informaci\u00f3n geogr\u00e1fica sobre Internet, pero no de presentaci\u00f3n final. GML contempla la descripci\u00f3n de entidades geom\u00e9tricas y topol\u00f3gicas as\u00ed como sus relaciones y atributos alfanum\u00e9ricos mediante esquemas XML (XSD). Esto permite a cada usuario o instituci\u00f3n crear sus propios esquemas para describir de forma compleja objetos geogr\u00e1ficos para despu\u00e9s poderla compartir o vincular con otros esquemas Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/gml <?xml version=\"1.0\" encoding=\"utf-8\"?> <!--Parcela Catastral de la D.G. del Catastro.--> <!--La precisi\u00f3n es la que corresponde nominalmente a la escala de captura de la cartograf\u00eda--> <FeatureCollection xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns:gml= \"http://www.opengis.net/gml/3.2\" xmlns:xlink= \"http://www.w3.org/1999/xlink\" xmlns:cp= \"http://inspire.ec.europa.eu/schemas/cp/4.0\" xmlns:gmd= \"http://www.isotc211.org/2005/gmd\" xsi:schemaLocation= \"http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd http://inspire.ec.europa.eu/schemas/cp/4.0 http://inspire.ec.europa.eu/schemas/cp/4.0/CadastralParcels.xsd\" xmlns= \"http://www.opengis.net/wfs/2.0\" timeStamp= \"2020-09-23T10:21:02\" numberMatched= \"1\" numberReturned= \"1\" > <member> <cp:CadastralParcel gml:id= \"ES.SDGC.CP.5049611DF2954G\" > <cp:areaValue uom= \"m2\" > 1978612 </cp:areaValue> <cp:beginLifespanVersion> 2011-05-31T00:00:00 </cp:beginLifespanVersion> <cp:endLifespanVersion xsi:nil= \"true\" nilReason= \"http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated\" ></cp:endLifespanVersion> <cp:geometry> <gml:MultiSurface gml:id= \"MultiSurface_ES.SDGC.CP.5049611DF2954G\" srsName= \"http://www.opengis.net/def/crs/EPSG/0/25831\" > <gml:surfaceMember> <gml:Surface gml:id= \"Surface_ES.SDGC.CP.5049611DF2954G.1\" srsName= \"http://www.opengis.net/def/crs/EPSG/0/25831\" > <gml:patches> <gml:PolygonPatch> <gml:exterior> <gml:LinearRing> <gml:posList srsDimension= \"2\" count= \"578\" > 423887.57 4594331.7 423879.49 4594342.66 423876.58 4594346.6 423873.49 4594350.78 423872.41 4594352.25 423870.09 4594355.38 423869.68 4594355.94 423867.24 4594359.32 423864.4 4594363.27 423860.33 4594368.9 423865.29 4594376.37 423876.45 4594393.45 423886.62 4594408.85 423905.97 4594438.33 423907.38 4594440.74 423909.5 4594444.1 423911.68 4594447.42 423913.93 4594450.7 423916.25 4594453.94 423932.58 4594478.69 423948.65 4594503.23 423951.61 4594507.73 423976.85 4594545.72 423982.82 4594554.82 423993.71 4594571.16 423998.25 4594577.9 424036.06 4594616.5 424078.88 4594625.36 424075.73 4594669.91 424085.01 4594691.54 424094 4594712.51 424104.21 4594736.09 424105.05 4594737.36 424104.82 4594737.52 424110.27 4594750.11 424134.12 4594785.62 424138.65 4594787.74 424140.95 4594788.81 424144.78 4594790.6 424145.25 4594797.71 424146.29 4594799.26 424150.53 4594805.79 424154.69 4594812.37 424160.14 4594821.16 424167.82 4594833.59 424175.95 4594846.95 424182.96 4594858.59 424184.8 4594861.62 424188.66 4594868.06 424192.44 4594874.53 424196.16 4594881.05 424199.8 4594887.61 424203.38 4594894.21 424206.89 4594900.85 424212.48 4594911.31 424219.21 4594924.05 424225.88 4594936.83 424228.35 4594941.74 424232.66 4594950.39 424237.5 4594960.35 424242.12 4594969.95 424243.72 4594973.38 424246.56 4594979.65 424248.84 4594984.82 424251.3 4594990.58 424253.66 4594996.38 424256.3 4595003.06 424258.21 4595008.06 424260.48 4595014.28 424264.21 4595024.69 424266.18 4595030.32 424280.88 4595050.89 424281.25 4595051.41 424274.5 4595053.71 424280.52 4595072.07 424283.32 4595076.98 424284.62 4595087.72 424287.03 4595096.14 424288.48 4595101.48 424290.95 4595110.89 424292.7 4595117.8 424297.57 4595137.68 424299.72 4595146.87 424301.73 4595155.79 424304.68 4595169.4 424305.74 4595174.81 424306.67 4595179.93 424307 4595181.92 424307.93 4595182.69 424307.83 4595185.48 424307.79 4595186.45 424309.11 4595193.75 424310.32 4595200.89 424311.45 4595208.05 424312.5 4595215.21 424313.71 4595224.24 424314.92 4595233.61 424316.05 4595242.99 424316.17 4595244.13 424327.72 4595282.51 424322.66 4595295.73 424320.91 4595305.68 424321.21 4595311.98 424321.65 4595327.76 424322.03 4595343.77 424322.2 4595358 424322.09 4595374.14 424322.02 4595378.04 424323.43 4595383.08 424328.16 4595405.5 424328.91 4595413.1 424324.24 4595418.96 424323.21 4595429.76 424325.59 4595479.2 424326.47 4595478.7 424329.96 4595476.41 424332.82 4595474.32 424336.08 4595472.46 424348.54 4595473.35 424349.53 4595473.24 424350.3 4595473.7 424350.73 4595474.38 424351.21 4595475.94 424351.15 4595476.92 424350.99 4595478.16 424350.53 4595479.47 424349.99 4595480.65 424349.53 4595481.84 424348.7 4595482.82 424347.94 4595485.78 424347.12 4595488.79 424346.2 4595493.1 424345.4 4595497.52 424343.86 4595501.58 424342.45 4595504.95 424341.15 4595508.81 424340.04 4595512.04 424338.96 4595515.64 424337.76 4595519.93 424336.65 4595525.65 424335.43 4595529.95 424334.35 4595534.66 424333.2 4595539.53 424331.35 4595544.52 424330.17 4595549.26 424329.2 4595554.21 424328.51 4595557.02 424326.86 4595559.74 424324.06 4595563.45 424321.77 4595566.24 424320 4595569.12 424318.33 4595572.4 424317.69 4595575.56 424317.62 4595577.85 424317.79 4595580.28 424317.18 4595583.93 424317.55 4595585.89 424317.8 4595587.2 424318.75 4595588.69 424320.04 4595589.92 424320.92 4595590.5 424322.07 4595591.97 424323.47 4595593.13 424324.89 4595594.54 424324.4 4595595.06 424315.91 4595594.8 424316.28 4595597.59 424354.31 4595599.77 424385.47 4595601.77 424405.98 4595602.83 424428.51 4595604.36 424455.19 4595606.11 424478.53 4595607.66 424533.62 4595611.48 424559.82 4595613.33 424609.2 4595616.7 424642.23 4595618.94 424686.42 4595621.89 424726.78 4595624.75 424733.47 4595625.3 424740.76 4595625.82 424748.06 4595626.27 424755.36 4595626.64 424762.66 4595626.92 424765.67 4595627.02 424771.52 4595627.12 424777.37 4595627.14 424783.23 4595627.08 424789.08 4595626.94 424794.93 4595626.72 424800.78 4595626.43 424806.62 4595626.05 424809.84 4595625.81 424815.31 4595625.33 424820.77 4595624.77 424826.23 4595624.13 424831.68 4595623.41 424837.11 4595622.61 424842.54 4595621.74 424849.38 4595620.52 424853.97 4595619.77 424858.56 4595618.95 424867.92 4595617.1 424876.74 4595614.89 424881.24 4595613.68 424883.28 4595613.11 424889.77 4595611.23 424896.24 4595609.28 424902.68 4595607.25 424905.98 4595606.05 424910.09 4595604.72 424916.75 4595602.42 424924.54 4595599.58 424932.57 4595596.45 424938.94 4595593.89 424946.92 4595590.48 424955.73 4595586.54 424964.52 4595582.28 424973.82 4595577.46 424984.17 4595571.94 424992.29 4595567.24 424998.97 4595563.16 425006.27 4595558.56 425012.1 4595554.68 425018.65 4595550.23 425025.19 4595545.71 425058.87 4595519.69 425059.74 4595519.09 425080.25 4595504.06 425080.72 4595503.73 425092.73 4595494.92 425104.59 4595486.24 425264.54 4595344.88 425326.37 4595290.22 425405.98 4595219.9 425420.57 4595207.2 425446.98 4595184.41 425472.87 4595162.17 425499.68 4595139.03 425500.15 4595138.64 425526.08 4595116.29 425551.07 4595094.32 425554.21 4595091.52 425576 4595072.22 425590.98 4595059.09 425606.57 4595045.54 425612.83 4595040.17 425623.24 4595031.26 425631.83 4595023.8 425656.07 4595002.93 425660.88 4594998.77 425671.18 4594989.83 425689.45 4594974.17 425725.2 4594943.65 425743.15 4594928.5 425761.16 4594913.44 425770.83 4594905.47 425783.26 4594895.08 425787.7 4594891.43 425795.95 4594884.67 425803.39 4594878.37 425813.94 4594869.33 425821.61 4594862.72 425831.67 4594853.93 425837.35 4594848.94 425849.42 4594837.82 425861.44 4594826.66 425876.7 4594812.38 425882.31 4594807.04 425887.86 4594801.64 425893.83 4594795.71 425905.98 4594784.29 425925.47 4594766.23 425949.17 4594743.85 425973.97 4594720.57 426007.79 4594688.95 426033.66 4594664.52 426068.66 4594631.72 426075.92 4594624.96 426082.92 4594618.38 426096.18 4594605.97 426103.5 4594599.14 426120.58 4594582.9 426126.84 4594577.15 426124.24 4594556.33 426123.12 4594547.27 426122.92 4594545.7 426122.52 4594543.93 426121.51 4594539.48 426120.87 4594536.51 426120.67 4594535.56 426120.32 4594534.08 426119.76 4594531.66 426118.77 4594527.78 426117.7 4594523.92 426116.55 4594520.08 426115.33 4594516.27 426114.03 4594512.48 426112.83 4594509.16 426111.21 4594505.07 426109.51 4594501.01 426107.74 4594496.99 426105.9 4594493 426103.99 4594489.04 426102.01 4594485.12 426099.95 4594481.22 426099.44 4594480.28 426096.9 4594476.04 426094.29 4594471.86 426091.62 4594467.72 426088.88 4594463.62 426086.07 4594459.56 426083.2 4594455.54 426080.26 4594451.58 426077.26 4594447.68 426074.4 4594444.06 426066.49 4594434.5 426062.26 4594429.46 426058.53 4594425 426057.07 4594423.28 426050.5 4594415.57 426048.61 4594413.36 426045.97 4594410.28 426042.72 4594406.47 426036.78 4594399.64 426030.78 4594392.88 426028.91 4594390.8 426026.55 4594388.18 426025.19 4594386.68 426018.5 4594379.24 426011.76 4594371.86 426004.97 4594364.54 426004.32 4594363.85 426001.13 4594360.47 425998.11 4594357.27 425997.33 4594356.45 425991.92 4594350.66 425991.67 4594350.39 425990.67 4594349.35 425988 4594346.55 425986.45 4594344.93 425982.92 4594341.3 425980.93 4594339.26 425975.61 4594333.9 425975.44 4594333.72 425975.35 4594333.64 425971.47 4594329.81 425969.71 4594328.08 425968.89 4594327.28 425961.04 4594319.56 425958.02 4594316.59 425950.69 4594309.44 425947.1 4594305.95 425941.58 4594300.63 425940.44 4594299.52 425936.46 4594295.71 425927.14 4594288.17 425923.86 4594285.53 425915.62 4594278.92 425915.57 4594278.88 425914.5 4594278.03 425912.25 4594276.25 425905.97 4594271.28 425899.47 4594266.35 425887.9 4594257.53 425880.64 4594252.26 425877.18 4594249.75 425869.52 4594243.88 425861.1 4594237.44 425855.08 4594232.92 425851.41 4594230.18 425844.07 4594224.83 425841.77 4594223.16 425831.53 4594216.03 425822.22 4594209.24 425812.25 4594202.33 425802.5 4594195.8 425801.32 4594194.99 425790.89 4594187.86 425779.76 4594180.65 425774.04 4594176.98 425766.47 4594172.13 425753.27 4594163.54 425744.21 4594157.89 425733.48 4594151.31 425720.93 4594143.62 425707.6 4594135.95 425704.76 4594134.28 425694.6 4594128.3 425686.47 4594123.74 425681.68 4594121.06 425673.77 4594116.7 425669.64 4594114.43 425659.8 4594109.32 425653.7 4594106.06 425646.3 4594102.1 425634 4594095.89 425632.78 4594095.28 425623.29 4594090.57 425616.71 4594087.49 425616.48 4594087.38 425610.57 4594084.62 425602.32 4594080.84 425595.36 4594077.66 425593.45 4594076.78 425585.69 4594073.21 425585.68 4594094.89 425581.46 4594094.07 425570.58 4594095.39 425555.97 4594100.78 425539.69 4594102.19 425533.42 4594103.46 425523.85 4594105.4 425507.6 4594108.62 425490.45 4594111.96 425473.31 4594115.39 425455.86 4594118.53 425436.8 4594121.3 425418.23 4594123.77 425401.29 4594126.9 425388.61 4594128.35 425378.15 4594130.45 425371.79 4594130.58 425366.94 4594130.68 425358.13 4594130.25 425347.27 4594127.96 425335.62 4594125.59 425327.84 4594121.94 425319.74 4594117 425313.14 4594111.94 425307.52 4594106.14 425298.39 4594099.53 425288.55 4594093.02 425280.84 4594087.48 425272.75 4594083.03 425264.07 4594079.41 425252.54 4594073.33 425243.29 4594070.72 425235.62 4594067.47 425227.06 4594064.54 425216.59 4594061.55 425204.88 4594056.17 425197.27 4594051.03 425189.1 4594047.19 425179.1 4594042.79 425169.75 4594040.37 425160.72 4594039.35 425153.61 4594038.98 425142.93 4594040.3 425131.55 4594041.82 425118.4 4594044.68 425104.67 4594048.94 425095.12 4594051.23 425085.96 4594054.31 425081.56 4594059.49 425080.99 4594050.6 425080.17 4594039.33 425079.66 4594036.48 425078.38 4594029.37 425075.23 4594022.03 425071.69 4594009.71 425068.16 4593998.67 425068.5 4593990.27 425067.24 4593977.01 425067.98 4593963.19 425062.71 4593970.09 425056.44 4593972.22 425048.98 4593974.46 425041.42 4593976.51 425031.21 4593976.9 425021.62 4593977.2 425013.81 4593977.05 425006.98 4593975.98 425002.17 4593975.48 424993.24 4593973.55 424986.89 4593971.18 424980.97 4593970.7 424976.59 4593971.48 424974.98 4593976.11 424975.02 4593988.51 424973.1 4594003.14 424972.69 4594017.75 424972.72 4594029.34 424973.16 4594038.19 424973.38 4594042.62 424973.7 4594059.01 424973.83 4594075.81 424974.84 4594091.98 424974.82 4594105.87 424973.7 4594115.2 424972.53 4594119.69 424971.84 4594122.32 424969.33 4594126.97 424964.88 4594129.76 424959.35 4594132.97 424949.94 4594138.65 424941.6 4594141.71 424932.39 4594146.29 424922.3 4594147.59 424909.87 4594151.03 424901.1 4594153.3 424895.65 4594156.01 424889.03 4594160.33 424884.22 4594165.03 424884.91 4594159.21 424884.8 4594153.33 424886.75 4594145.89 424890.96 4594137.24 424849.56 4594148.8 424806.93 4594162.72 424764.95 4594178.5 424723.7 4594196.1 424689.25 4594212.01 424655.39 4594229.18 424622.17 4594247.54 424600.99 4594260.08 424580.12 4594273.11 424559.55 4594286.63 424526.26 4594310.03 424493.84 4594334.61 424462.33 4594360.34 424442.77 4594376.71 424423.35 4594393.25 424404.08 4594409.96 424329.55 4594479.57 424326.05 4594483.2 424322.41 4594486.67 424318.61 4594489.98 424314.67 4594493.12 424310.6 4594496.08 424306.41 4594498.87 424302.09 4594501.47 424297.67 4594503.88 424293.15 4594506.09 424287.34 4594508.63 424281.61 4594494.73 424265.84 4594501.36 424250.17 4594508.22 424234.61 4594515.32 424225.23 4594519.65 424215.9 4594524.09 424206.62 4594528.66 424212.89 4594541.18 424213.33 4594542.07 424184.81 4594557.05 424156.91 4594573.14 424129.67 4594590.32 423960.4 4594367.67 423963.7 4594366.83 423961.46 4594363.71 423960.34 4594362.14 423958.5 4594359.58 423957.23 4594357.81 423955.07 4594354.8 423953.57 4594352.71 423952.41 4594351.08 423951.62 4594349.97 423949.72 4594347.33 423947.95 4594344.85 423946.46 4594342.78 423944.35 4594339.84 423941.96 4594336.51 423939.9 4594333.63 423937.45 4594330.21 423936.35 4594328.68 423936.74 4594328.4 423936.32 4594328.14 423935.62 4594327.62 423934.96 4594327.03 423934.37 4594326.39 423933.93 4594325.84 423920.3 4594328.91 423913.82 4594329.92 423909.26 4594330.45 423905.97 4594330.72 423900.23 4594330.95 423890.44 4594331.67 423887.57 4594331.7 </gml:posList> </gml:LinearRing> </gml:exterior> <gml:interior> <gml:LinearRing> <gml:posList srsDimension= \"2\" count= \"73\" > 425164.92 4594241.97 425176.47 4594233.04 425206.28 4594209.61 425210.27 4594206.39 425247.32 4594176.49 425254.64 4594171.69 425262.15 4594167.2 425268.7 4594163.65 425269.85 4594163.02 425277.82 4594159.33 425283.08 4594157.23 425285.98 4594156.08 425294.3 4594153.27 425302.76 4594150.92 425325.43 4594146.87 425345.25 4594143.8 425354.86 4594144.35 425364.42 4594145.52 425373.88 4594147.31 425404.81 4594155.47 425407.44 4594158.31 425412.66 4594163.97 425413.72 4594165.39 425418.78 4594170.92 425420.11 4594172.37 425429.1 4594164.38 425431.05 4594163.76 425432 4594163.85 425448.4 4594169 425512.26 4594189.58 425514.25 4594190.22 425522.73 4594192.81 425530.84 4594195.91 425538.81 4594199.39 425546.97 4594202.76 425575.79 4594216.63 425580.9 4594219.28 425586.12 4594222.4 425591.44 4594225.8 425593.45 4594227.09 425595.44 4594228.83 425596.91 4594231.03 425597.76 4594233.54 425597.92 4594236.19 425597.85 4594238.98 425597.24 4594241.71 425596.12 4594244.27 425594.25 4594247.97 425594.07 4594248.2 425592.79 4594249.83 425591.09 4594251.48 425587.96 4594254.1 425518.23 4594315.26 425517.96 4594314.97 425513.43 4594310.16 425511.88 4594311.31 425507.28 4594314.74 425505.67 4594315.93 425510.62 4594321.48 425510.82 4594321.71 425473.11 4594354.38 425461.28 4594364.63 425445.9 4594348.78 425443.73 4594350.77 425422.24 4594370.4 425421.72 4594369.82 425355.43 4594296.39 425352.17 4594292.78 425272.84 4594364.58 425271.56 4594363.17 425251.64 4594341.15 425163.12 4594243.36 425164.92 4594241.97 </gml:posList> </gml:LinearRing> </gml:interior> <gml:interior> <gml:LinearRing> <gml:posList srsDimension= \"2\" count= \"41\" > 425085.7 4595246.71 425094.8 4595257.19 425120.04 4595286.19 425123.63 4595283.05 425123.72 4595282.97 425124.2 4595283.52 425136.06 4595297.12 425136.08 4595297.14 425129.26 4595303.1 425128.56 4595303.7 425132.45 4595308.18 425134.1 4595310.09 425133.15 4595310.86 425119.56 4595321.77 425096.25 4595342.29 425067.15 4595367.89 425064.54 4595370.18 425059.33 4595374.74 425055.65 4595377.98 425049.86 4595383.3 425046.86 4595386.37 425042.18 4595392.13 425037.81 4595398.51 425034.69 4595404.03 425032.44 4595408.98 425031.68 4595410.95 425029.23 4595408.07 425003.04 4595377.27 425002.68 4595364.56 425011.69 4595357 425002.58 4595346.38 425021.82 4595300.95 425009.6 4595285.81 424995.92 4595267.45 425001.5 4595252.92 425026.85 4595239.43 425022.51 4595229.52 425032.52 4595213.68 425041.87 4595206.63 425072.28 4595231.29 425085.7 4595246.71 </gml:posList> </gml:LinearRing> </gml:interior> <gml:interior> <gml:LinearRing> <gml:posList srsDimension= \"2\" count= \"47\" > 425067.16 4595383.1 425064.7 4595380.3 425067.27 4595378.08 425070.23 4595375.4 425071.97 4595374.02 425076.03 4595370.45 425085.55 4595362.09 425097.32 4595351.67 425107.89 4595342.35 425116.26 4595334.99 425121.18 4595330.61 425128.12 4595324.49 425131.4 4595321.64 425136.68 4595317.3 425142.27 4595313.58 425146.95 4595311.08 425148.66 4595310.24 425149.46 4595309.85 425155.13 4595307.71 425161.16 4595305.99 425167.67 4595304.75 425175.08 4595304.08 425180.68 4595304.09 425186.2 4595304.48 425192.87 4595305.46 425199.84 4595307.02 425205.26 4595308.64 425209.65 4595310.29 425209.95 4595310.43 425215.74 4595313.13 425221.33 4595316.48 425225.98 4595319.76 425230.16 4595323.39 425230.51 4595323.69 425231.27 4595324.46 425231.58 4595324.77 425110.83 4595432.94 425084.24 4595402.59 425083.67 4595401.94 425079.25 4595396.9 425078.31 4595395.83 425077.68 4595395.11 425075.62 4595392.76 425071.98 4595388.6 425071.01 4595387.5 425067.51 4595383.51 425067.16 4595383.1 </gml:posList> </gml:LinearRing> </gml:interior> <gml:interior> <gml:LinearRing> <gml:posList srsDimension= \"2\" count= \"7\" > 425536.49 4594331.99 425604.7 4594272.14 425649.55 4594323.25 425581.34 4594383.1 425558.8 4594357.42 425554.29 4594352.3 425536.49 4594331.99 </gml:posList> </gml:LinearRing> </gml:interior> <gml:interior> <gml:LinearRing> <gml:posList srsDimension= \"2\" count= \"25\" > 425527.13 4594340.22 425612.61 4594438.61 425578.76 4594484.34 425569.02 4594466.89 425516.34 4594372.51 425513.75 4594373.84 425512.18 4594371.6 425510.79 4594369.27 425510.25 4594368.26 425509.79 4594367.01 425509.6 4594366.22 425509.52 4594365.71 425509.45 4594364.38 425509.49 4594362.47 425509.72 4594360.57 425509.8 4594360.19 425510.16 4594358.71 425510.81 4594356.81 425511.52 4594355.22 425511.64 4594354.99 425512.65 4594353.25 425513.25 4594352.55 425513.78 4594351.92 425524.73 4594342.32 425527.13 4594340.22 </gml:posList> </gml:LinearRing> </gml:interior> <gml:interior> <gml:LinearRing> <gml:posList srsDimension= \"2\" count= \"8\" > 425908.55 4594760.46 425824.5 4594834.58 425804.49 4594811.89 425804.73 4594808.38 425887.23 4594736.14 425888.74 4594737.57 425904.41 4594755.64 425908.55 4594760.46 </gml:posList> </gml:LinearRing> </gml:interior> </gml:PolygonPatch> </gml:patches> </gml:Surface> </gml:surfaceMember> </gml:MultiSurface> </cp:geometry> <cp:inspireId> <Identifier xmlns= \"http://inspire.ec.europa.eu/schemas/base/3.3\" > <localId> 5049611DF2954G </localId> <namespace> ES.SDGC.CP </namespace> </Identifier> </cp:inspireId> <cp:label> 11 </cp:label> <cp:nationalCadastralReference> 5049611DF2954G </cp:nationalCadastralReference> <cp:referencePoint> <gml:Point gml:id= \"ReferencePoint_ES.SDGC.CP.5049611DF2954G\" srsName= \"http://www.opengis.net/def/crs/EPSG/0/25831\" > <gml:pos> 425003.4 4594786.65 </gml:pos> </gml:Point> </cp:referencePoint> </cp:CadastralParcel> </member> </FeatureCollection>","title":"GML"},{"location":"2_estandares_OCG/#sld","text":"EL SLD (Style Layer Descriptor) es una codificaci\u00f3n xml para permitir al usuario ampliar las especificaciones (WMS) y definir s\u00edmbolos de objetos. El usuario puede aplicar estilos a los objetos de forma diferentes de c\u00f3mo han sido configurados en el servidor. Los servidores WMS que soportan SLD permiten a\u00f1adir los par\u00e1metros SLD d\u00f3nde como valor se describe la url d\u00f3nde se encuentra el documento xml o SLDBODY, d\u00f3nde se pasan los valores SLD de forma directa (m\u00e9todo poco recomendado) a las peticiones WMS GetMap. Ejemplos: Petici\u00f3n sin SLD http://servicios.idee.es/wms-inspire/hidrografia?VERSION=1.1.1&SERVICE=WMS&REQUEST=GetMap&SRS=EPSG:25830&FORMAT=image/png&BBOX=419685.23094987,4082028.7934849,582245.81538657,4201830.8601227&WIDTH=1247&HEIGHT=919&LAYERS=HY.Network Petici\u00f3n con SLD http://servicios.idee.es/wms-inspire/hidrografia?VERSION=1.3.0&SERVICE=WMS&REQUEST=GetMap&CRS=EPSG:4258&FORMAT=image/png&BBOX=40.277646164396,-2.9977199809325,40.363845924834,-2.8768703715575&WIDTH=1408&HEIGHT=1004&SLD=https://direccionpublica/prueba.xml Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/sld","title":"SLD"},{"location":"2_estandares_OCG/#sos","text":"Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/sos","title":"SOS"},{"location":"2_estandares_OCG/#csw","text":"Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/cat","title":"CSW"},{"location":"2_estandares_OCG/#otros-estandares-ogc","text":"","title":"Otros est\u00e1ndares OGC"},{"location":"2_estandares_OCG/#web-map-context-wmc","text":"Especifica como describir en un fichero XML, para crear un proyecto que contenga un mapa creado a partir de dos o m\u00e1s conexiones WMS. Permite: * Crear vistas predefinidas, mapas tem\u00e1ticos * Guardar Y/o cargar on-line estas vistas Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/wmc","title":"Web Map Context (WMC)"},{"location":"2_estandares_OCG/#keyhole-markup-language-kml","text":"Es un lenguaje XML centrado en la descripci\u00f3n y visualizaci\u00f3n de la geoinformaci\u00f3n en actuales y futuras aplicaciones webs de gesti\u00f3n de mapas (2d y 3d). Este lenguaje fue presentado por Google al OGC con el objetivo de incoroporarlo como un est\u00e1ndar. Actualmente OGC y Google trabajan en colaboraci\u00f3n para asegurar este proceso. Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/kml","title":"Keyhole Markup Language (KML)"},{"location":"2_estandares_OCG/#web-coverage-servicewcs","text":"Ampl\u00eda la interfaz Web Map Server para permitir el acceso a \"coberturas\" geoespaciales que representen valores o propiedades de localizaciones geogr\u00e1ficas; m\u00e1s que los mapas generados por WMS (im\u00e1genes). La diferencia principal con el WMS es que el servicio WCS proporciona los datos junto con su descripci\u00f3n detallada, define peticiones con una sintaxis rica para obtener esos datos y devuelve la informaci\u00f3n con su sem\u00e1ntica original, lo cual permite que puedan ser interpretados, extrapolados, etc., y no s\u00f3lo representados de forma est\u00e1tica. B\u00e1sicamente sirve para descargar archivos raster a escala 1 a 1 y preparados para poder trabajarlos en un sig raster. Princpales inerfaces: * GetCapabilities * DescribeCoverage * GetCoverage","title":"Web Coverage Service(WCS)"},{"location":"2_estandares_OCG/#web-processing-service-wps","text":"Servicio de publicaci\u00f3n de procesos geoespaciales en la Web. Se entiende por procesos cualquier algoritmo, c\u00e1lculo o modelo, que opere sobre datos espacialmente referenciados tanto en formato raster como vectorial, de este modo un WPS puede ofrecer cualquier tipo de funcionalidad GIS a trav\u00e9s de una red. Se puede ver la especificaci\u00f3n en https://www.ogc.org/standards/wps","title":"Web Processing Service (WPS)"},{"location":"2_estandares_OCG/#recursos","text":"https://www.ogc.org/standards/ https://www.idee.es/web/guest/rincon-del-desarrollador","title":"Recursos"},{"location":"3_conceptos_vector_tiles/","text":"Conceptos Vector Tiles Vector Tiles es un formato para almacenar datos geogr\u00e1ficos en formato binario (Google Protobuf) y pensados para la visualizaci\u00f3n en navegadores web modernos que soporten webGL. Una tesela vectorial (vector tiles) contiene datos vectoriales georreferenciados (puede contener m\u00faltiples capas), recortados en teselas para facilitar su recuperaci\u00f3n. Son equivalentes a las teselas raster tradicionales (XYZ,WMTS, TMS) pero retornan datos vectoriales en lugar de una imagen. Cada conjunto de teselas vectoriales tiene su propio esquema. Un esquema consiste en nombres de capas, atributos, selecci\u00f3n de elementos. Contexto En 2005 GoogleMaps introdujo una \"nueva\" forma de mostrar datos geogr\u00e1ficos por la web, pregenerando el mapa por niveles de zoom y tiles (teselas) de 256x256 pixeles. Tambi\u00e9n cre\u00f3 una nueva proyecci\u00f3n basada en mercator, llamada pseude-mercator o web mercator , cuyo c\u00f3digo EPSG es 3857 Despu\u00e9s de GoogleMaps, otros proveedores o plataformas c\u00f3mo OpenStreetMap siguen esta misma forma de organizar la geoinformaci\u00f3n. Protocolos Para cargar la im\u00e1genes se ulitza una llamada HTTP rest d\u00f3nde se especifica; https://.../.../z/x/y.format Z= Nivel de zoom X=coordenada X Y=coordenada Y Formato Raster: Im\u00e1gen png o JPEG Vector: (pbf o mvt) Protocolos Existen tres especificaciones para servir tiles TMS (Tile Map Service): X Y coordenadas empiezan de debajo izquierda (t\u00edpico eje cartesiano de coordenadas) WMTS (Web Map Tile Service): OGC estandard , corrdenadas empiezan de arriba izquierda. ZXY o \"slippy map\": Igual que TMS pero la Y empieza por arriba izquierda Caracteristicas Las teselas vectoriales han sido utilizadas por el cliente Android de Google Maps desde diciembre de 2010 y en el cliente de escritorio desde 2013. Las teselas vectoriales para renderizar los datos de OpenStreetMap se propusieron por primera vez en marzo de 2013 y est\u00e1n soportadas por Mapnik, el renderizador de datos de OpenStreetMap m\u00e1s utilizado. Mapbox, proveedor comercial de herramientas de cartograf\u00eda personalizada y de hosting, es el m\u00e1xini impulsor de esta tecnologia y ha centrado su herramienta de cartograf\u00eda, Mapbox Studio, en torno a las teselas vectoriales. Cada tile es un contenedor de datos vectores y atributos Los Tiles no tienen estilo, el estilo se aplica en cliente Soporta rotaci\u00f3n y orientaci\u00f3n Soporta extrusi\u00f3n y 3D Herramientas y recursos Fuente: https://github.com/mapbox/awesome-vector-tiles Parsers & Generators vector-tile-js - Parses vector tiles with JavaScript. mapnik-vector-tile - C++ vector tile read/write implementation on top of Mapnik. mbtiles-cpp - C++ library for decoding of mbtiles and vector data into function callbacks. vector-tile-py - Python tool to convert a Mapnik vector tile to GeoJSON node-mapnik - Node.js API for vector tiles which depends on mapnik-vector-tile vector-tile-cs - Parses vector tiles with C# (native C# implementation, no dependencies). mapbox-vector-tile-cs - Parses vector tiles with C# (uses protobuf-net). tilelive-bridge - Implements Tilelive API for creating vector tiles from traditional Mapnik datasources in Node.js. tilelive-vector - Implements Tilelive API for reading vector tiles and rendering to image tiles in Node.js. mapbox-vector-tile is a Python package for vector tile encoding. Used in Mapzen's vector tile service tileserver and TileStache. :warning: Only support V1 Tile spec and not V2, no longer maintained geojson-vt - Slice GeoJSON into vector tiles on the fly in the browser. java-vector-tile - A java encoder and decoder for vector tiles. mapbox-vector-tile-java - Encode and decode v2.1 Mapbox Vector Tiles. Convert JTS Geometry to and from MVT features, including simple user data support. Utility functions for converting world coordinates to MVT coordinates and clipping to a tile envelope. cached-vector-tile - An alternative implementation of the vector-tile-js interface, backed by plain JS objects/arrays rather than parsed-on-demand protobuf data. Trades away memory efficiency for faster feature.loadGeometry() calls. tilegrinder - A helper library for applying a data altering function on each vector tile in an MBTiles, using the native protobuf wrapper for de- and encoding, recompressing the results and storing them either in an MBTiles or as single files. SwiftVectorTiles - A Swift encoder for vector tiles according to the Mapbox vector tile spec. orb - A Go geometry library with mvt <-> geojson support. Clients Mapbox GL Native - C++/OpenGL vector maps library with native SDKs for Android, iOS, Node.js, macOS, and Qt Mapbox GL JS - JavaScript/WebGL vector maps library. OpenLayers 3 - JavaScript vector & raster library. WhirlyGlobe/Maply - Objective C code that is able to read and render vector tiles(and style with mapnik xml) on iOS devices. Leaflet.MapboxVectorTile is able to read PBF MapboxVectorTiles from a REST endpoint and render them as a TileLayer on a Leaflet Map. Use this option if you want to utilize vector tiles on a standard Leaflet web map without needing WebGL. CARTO Mobile SDK - C++ maps library focused on offline features, for iOS, Android, Windows Phone and Xamarin with bindings for Java, Objective-C and C#. Based on Nutiteq Maps SDK , but open source and uses CartoCSS. Mapzen Tangram - JavaScript library for rendering 2D & 3D maps live in a web browser with WebGL, supports MVT, GeoJSON, TopoJSON Mapzen Tangram-es - C++ library for rendering 2D and 3D maps using OpenGL ES 2 with custom styling and interactions mapbox-gl-leaflet - Create Mapbox GL layers in Leaflet react-native-mapbox-gl - Render Mapbox GL maps from React applications hoverboard - Render vector tiles on canvas with Leaflet 0.7.x (supports GeoJSON, TopoJSON, and protobuf) :warning: no longer maintained Leaflet.VectorGrid - Display gridded vector data (sliced GeoJSON, TopoJSON or Mapbox Vector Tiles) in Leaflet 1.0.0 ArcGIS API for JavaScript - Draw vector tile layers as part of your web map. Rendering done via mapbox-gl-js integration. mapscii - A Vector Tile to Braille and ASCII renderer for xterm-compatible terminals Unofficial Mapbox GL Native bindings for Qt QML - Qt QML bindings for Qt 5.6 and higher. Mapbox-vector-tiles-basic-js-renderer - A fork of mapbox-gl-js giving you full control over rendering of specific tiles, also provides vector tile overlay for google maps. Applications / Command line tools Mapbox Studio - Web design studio for creating and styling vector tiles. Mapbox Studio Classic - Desktop design studio for both creating vector tiles from raw geodata and for rendering them on-the-fly into image tiles. Internally uses tilelive.js modules to handle vector tiles (see tilelive-bridge and tilelive-vector ) :warning: use Mapbox Studio instead. kosmtik - Design maps with CartoCSS and Mapnik. ArcGIS Pro - Generate vector tiles from maps authored in ArcGIS Pro or imported from ArcMap. MVT Styler - map style editor for vector tiles. Maputnik - A visual style editor for the Mapbox GL style specification. QGIS Vector Tiles Reader - QGIS Python plugin which reads Mapbox Vector Tiles from local MBTiles file or remote mapbox-gl-inspect - Plugin for Mapbox GL JS to view the view and inspect VT features. CLI Utilities mbview - Watch MBTiles in your localhost. View tiles in a basic Mapbox GL JS webapp locally tippecanoe - Build vector tilesets from large collections of GeoJSON features. tilemaker - Command line tool to produce vector tiles directly from an .osm.pbf extract without an intermediate database. mapbox-filter - Filter MBTiles according to Mapbox GL JS styles, shrink MBTiles directly, serve locally over http, publish to S3-compatibile storage vector-tiles-producer Command line tool in C++ to creates vector tiles for a given area at chosen zoom levels using a Mapnik XML. :warning: no longer maintained vt-geojson - decodes vector tiles to GeoJSON FeatureCollections tl - An alternate command line interface to tilelive tileshrink - Reduce the layer extent and simplify the resulting geometries of all vector tiles in an MBTiles tiler @GeoVation - Command line tool for converting GeoJSON, Shapefiles or PostGIS layer to raw Vector Tiles (or MBTiles) tiler @thomersch - Command line tool to convert GeoJSON to Vector Tiles (written in Go language). geojson2mvt - npm package for building a static vector tile tree for given xyz bounds from a geojson file (uses geojson-vt ) OGR MVT and MBTiles - The GDAL/OGR MVT and MBTILES drivers can be used to read and write vector tiles, respectively as tileset on the filesystem or in a mbtiles container (GDAL >= 2.3.0) MBUtil - Import and export MBTiles to disk :warning: no longer maintained Datamaps C application that can be used to create vector tiles and store them in an mbtiles. See the render-vector command. :warning: no longer maintained, use tippecanoe instead Mapbox GL JS Plugins gl-draw - Adds support for drawing and editing features on Mapbox GL JS maps Servers tessera - Supports serving and rendering vector tiles. Uses the same core libraries as Mapbox Studio. tessella - lightweight Node.js Mapbox Vector Tiles server. Inspired by tessera. tilestrata - with tilestrata-vt, it can generate Mapnik Vector Tiles; with tilestrata-postgismvt , it can serve Mapbox Vector Tiles from a PostGIS db Utilery Server to generate vector tiles from PostGIS queries. Python based :warning: no longer maintained tileserver Mapzen Vector Tile Service. TileStache added support for Mapbox Vector tiles via .pbf extension requests. Kartotherian Wikipedia tile server with Tilerator backend tile pre-generator ArcGIS Online - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript Portal for ArcGIS - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript tilesplash - A light and quick nodejs webserver for serving topojson or mapbox vector tiles from a postgis backend go-vtile-example - An example server written in Go Tegola - A MVT server written in pure Go that supports serving tiles from a PostGIS data provider. t-rex - MVT server in a single executable written in Rust. Serves tiles from PostGIS supporting custom tile grids. OSM Scout Server - Maps server providing vector and raster tiles, geocoder, and router. Designed to be used on Linux (mobile and PC) to provide offline maps; written in C++ postserve - A small Python based tileserver using ST_AsMVT and ST_AsMVTGeom to generate vector tiles on the fly. Designed for use with PostGIS 2.4 and the OpenMapTiles project SpatialServer (PGRestAPI) - A multi-purpose GeoSpatial NodeJS web server created at SpatialDev that not only serves MBTiles stuffed with vector tiles, it can also cut vector tiles on the fly from a PostGIS database. :warning: No longer maintained. OpenMapTiles - Set of open-source tools for self-hosting of OpenStreetMap maps in more than 50 languages. It provides both raster as well as vector tiles, WMS and WMTS services for GIS programs, support for JavaScript viewers and mobile SDK. Hastile - Haskell web server using PostGIS to deliver vector tiles. MapServer - Open Source platform for publishing spatial data and interactive mapping applications to the web. MVT output available in 7.2 Low-level utilities vt-pbf serialize JavaScript objects representing vector tiles into binary Protocol Buffer encodings of vector tiles vtzero - minimalist vector tile decoder and encoder in C++ mvt-fixtures - a suite of valid and invalid test fixtures according to the Mapbox Vector Tile spec versions. Includes simplified unit test fixtures and real-world fixtures to test your encoders and decoders. zellige - command line utility written to convert GeoJSON to MVT. mapbox-gl-function - Mapbox GL style function evaluator :warning: now maintained as party of mapbox-gl-js mapbox-gl-filter-simplify - Simplifies and complexifies filters in Mapbox GL Styles :warning: removed Articles Vector tiles remixed - guide to using tilemaker to generating vector tiles Build Your Own Static Vector Tile Pipeline - guide transforming, encoding and hosting tiles in the cloud; using ogr2ogr + tippecanoe + Mapbox GL JS Using the new MVT function in PostGIS - Building a vector tile service with PostGIS, express, and pg-promise. License","title":"Conceptos Vector Tiles"},{"location":"3_conceptos_vector_tiles/#conceptos-vector-tiles","text":"Vector Tiles es un formato para almacenar datos geogr\u00e1ficos en formato binario (Google Protobuf) y pensados para la visualizaci\u00f3n en navegadores web modernos que soporten webGL. Una tesela vectorial (vector tiles) contiene datos vectoriales georreferenciados (puede contener m\u00faltiples capas), recortados en teselas para facilitar su recuperaci\u00f3n. Son equivalentes a las teselas raster tradicionales (XYZ,WMTS, TMS) pero retornan datos vectoriales en lugar de una imagen. Cada conjunto de teselas vectoriales tiene su propio esquema. Un esquema consiste en nombres de capas, atributos, selecci\u00f3n de elementos.","title":"Conceptos Vector Tiles"},{"location":"3_conceptos_vector_tiles/#contexto","text":"En 2005 GoogleMaps introdujo una \"nueva\" forma de mostrar datos geogr\u00e1ficos por la web, pregenerando el mapa por niveles de zoom y tiles (teselas) de 256x256 pixeles. Tambi\u00e9n cre\u00f3 una nueva proyecci\u00f3n basada en mercator, llamada pseude-mercator o web mercator , cuyo c\u00f3digo EPSG es 3857 Despu\u00e9s de GoogleMaps, otros proveedores o plataformas c\u00f3mo OpenStreetMap siguen esta misma forma de organizar la geoinformaci\u00f3n.","title":"Contexto"},{"location":"3_conceptos_vector_tiles/#protocolos","text":"Para cargar la im\u00e1genes se ulitza una llamada HTTP rest d\u00f3nde se especifica; https://.../.../z/x/y.format Z= Nivel de zoom X=coordenada X Y=coordenada Y Formato Raster: Im\u00e1gen png o JPEG Vector: (pbf o mvt)","title":"Protocolos"},{"location":"3_conceptos_vector_tiles/#protocolos_1","text":"Existen tres especificaciones para servir tiles TMS (Tile Map Service): X Y coordenadas empiezan de debajo izquierda (t\u00edpico eje cartesiano de coordenadas) WMTS (Web Map Tile Service): OGC estandard , corrdenadas empiezan de arriba izquierda. ZXY o \"slippy map\": Igual que TMS pero la Y empieza por arriba izquierda","title":"Protocolos"},{"location":"3_conceptos_vector_tiles/#caracteristicas","text":"Las teselas vectoriales han sido utilizadas por el cliente Android de Google Maps desde diciembre de 2010 y en el cliente de escritorio desde 2013. Las teselas vectoriales para renderizar los datos de OpenStreetMap se propusieron por primera vez en marzo de 2013 y est\u00e1n soportadas por Mapnik, el renderizador de datos de OpenStreetMap m\u00e1s utilizado. Mapbox, proveedor comercial de herramientas de cartograf\u00eda personalizada y de hosting, es el m\u00e1xini impulsor de esta tecnologia y ha centrado su herramienta de cartograf\u00eda, Mapbox Studio, en torno a las teselas vectoriales. Cada tile es un contenedor de datos vectores y atributos Los Tiles no tienen estilo, el estilo se aplica en cliente Soporta rotaci\u00f3n y orientaci\u00f3n Soporta extrusi\u00f3n y 3D","title":"Caracteristicas"},{"location":"3_conceptos_vector_tiles/#herramientas-y-recursos","text":"Fuente: https://github.com/mapbox/awesome-vector-tiles","title":"Herramientas y recursos"},{"location":"3_conceptos_vector_tiles/#parsers-generators","text":"vector-tile-js - Parses vector tiles with JavaScript. mapnik-vector-tile - C++ vector tile read/write implementation on top of Mapnik. mbtiles-cpp - C++ library for decoding of mbtiles and vector data into function callbacks. vector-tile-py - Python tool to convert a Mapnik vector tile to GeoJSON node-mapnik - Node.js API for vector tiles which depends on mapnik-vector-tile vector-tile-cs - Parses vector tiles with C# (native C# implementation, no dependencies). mapbox-vector-tile-cs - Parses vector tiles with C# (uses protobuf-net). tilelive-bridge - Implements Tilelive API for creating vector tiles from traditional Mapnik datasources in Node.js. tilelive-vector - Implements Tilelive API for reading vector tiles and rendering to image tiles in Node.js. mapbox-vector-tile is a Python package for vector tile encoding. Used in Mapzen's vector tile service tileserver and TileStache. :warning: Only support V1 Tile spec and not V2, no longer maintained geojson-vt - Slice GeoJSON into vector tiles on the fly in the browser. java-vector-tile - A java encoder and decoder for vector tiles. mapbox-vector-tile-java - Encode and decode v2.1 Mapbox Vector Tiles. Convert JTS Geometry to and from MVT features, including simple user data support. Utility functions for converting world coordinates to MVT coordinates and clipping to a tile envelope. cached-vector-tile - An alternative implementation of the vector-tile-js interface, backed by plain JS objects/arrays rather than parsed-on-demand protobuf data. Trades away memory efficiency for faster feature.loadGeometry() calls. tilegrinder - A helper library for applying a data altering function on each vector tile in an MBTiles, using the native protobuf wrapper for de- and encoding, recompressing the results and storing them either in an MBTiles or as single files. SwiftVectorTiles - A Swift encoder for vector tiles according to the Mapbox vector tile spec. orb - A Go geometry library with mvt <-> geojson support.","title":"Parsers &amp; Generators"},{"location":"3_conceptos_vector_tiles/#clients","text":"Mapbox GL Native - C++/OpenGL vector maps library with native SDKs for Android, iOS, Node.js, macOS, and Qt Mapbox GL JS - JavaScript/WebGL vector maps library. OpenLayers 3 - JavaScript vector & raster library. WhirlyGlobe/Maply - Objective C code that is able to read and render vector tiles(and style with mapnik xml) on iOS devices. Leaflet.MapboxVectorTile is able to read PBF MapboxVectorTiles from a REST endpoint and render them as a TileLayer on a Leaflet Map. Use this option if you want to utilize vector tiles on a standard Leaflet web map without needing WebGL. CARTO Mobile SDK - C++ maps library focused on offline features, for iOS, Android, Windows Phone and Xamarin with bindings for Java, Objective-C and C#. Based on Nutiteq Maps SDK , but open source and uses CartoCSS. Mapzen Tangram - JavaScript library for rendering 2D & 3D maps live in a web browser with WebGL, supports MVT, GeoJSON, TopoJSON Mapzen Tangram-es - C++ library for rendering 2D and 3D maps using OpenGL ES 2 with custom styling and interactions mapbox-gl-leaflet - Create Mapbox GL layers in Leaflet react-native-mapbox-gl - Render Mapbox GL maps from React applications hoverboard - Render vector tiles on canvas with Leaflet 0.7.x (supports GeoJSON, TopoJSON, and protobuf) :warning: no longer maintained Leaflet.VectorGrid - Display gridded vector data (sliced GeoJSON, TopoJSON or Mapbox Vector Tiles) in Leaflet 1.0.0 ArcGIS API for JavaScript - Draw vector tile layers as part of your web map. Rendering done via mapbox-gl-js integration. mapscii - A Vector Tile to Braille and ASCII renderer for xterm-compatible terminals Unofficial Mapbox GL Native bindings for Qt QML - Qt QML bindings for Qt 5.6 and higher. Mapbox-vector-tiles-basic-js-renderer - A fork of mapbox-gl-js giving you full control over rendering of specific tiles, also provides vector tile overlay for google maps.","title":"Clients"},{"location":"3_conceptos_vector_tiles/#applications-command-line-tools","text":"Mapbox Studio - Web design studio for creating and styling vector tiles. Mapbox Studio Classic - Desktop design studio for both creating vector tiles from raw geodata and for rendering them on-the-fly into image tiles. Internally uses tilelive.js modules to handle vector tiles (see tilelive-bridge and tilelive-vector ) :warning: use Mapbox Studio instead. kosmtik - Design maps with CartoCSS and Mapnik. ArcGIS Pro - Generate vector tiles from maps authored in ArcGIS Pro or imported from ArcMap. MVT Styler - map style editor for vector tiles. Maputnik - A visual style editor for the Mapbox GL style specification. QGIS Vector Tiles Reader - QGIS Python plugin which reads Mapbox Vector Tiles from local MBTiles file or remote mapbox-gl-inspect - Plugin for Mapbox GL JS to view the view and inspect VT features.","title":"Applications / Command line tools"},{"location":"3_conceptos_vector_tiles/#cli-utilities","text":"mbview - Watch MBTiles in your localhost. View tiles in a basic Mapbox GL JS webapp locally tippecanoe - Build vector tilesets from large collections of GeoJSON features. tilemaker - Command line tool to produce vector tiles directly from an .osm.pbf extract without an intermediate database. mapbox-filter - Filter MBTiles according to Mapbox GL JS styles, shrink MBTiles directly, serve locally over http, publish to S3-compatibile storage vector-tiles-producer Command line tool in C++ to creates vector tiles for a given area at chosen zoom levels using a Mapnik XML. :warning: no longer maintained vt-geojson - decodes vector tiles to GeoJSON FeatureCollections tl - An alternate command line interface to tilelive tileshrink - Reduce the layer extent and simplify the resulting geometries of all vector tiles in an MBTiles tiler @GeoVation - Command line tool for converting GeoJSON, Shapefiles or PostGIS layer to raw Vector Tiles (or MBTiles) tiler @thomersch - Command line tool to convert GeoJSON to Vector Tiles (written in Go language). geojson2mvt - npm package for building a static vector tile tree for given xyz bounds from a geojson file (uses geojson-vt ) OGR MVT and MBTiles - The GDAL/OGR MVT and MBTILES drivers can be used to read and write vector tiles, respectively as tileset on the filesystem or in a mbtiles container (GDAL >= 2.3.0) MBUtil - Import and export MBTiles to disk :warning: no longer maintained Datamaps C application that can be used to create vector tiles and store them in an mbtiles. See the render-vector command. :warning: no longer maintained, use tippecanoe instead","title":"CLI Utilities"},{"location":"3_conceptos_vector_tiles/#mapbox-gl-js-plugins","text":"gl-draw - Adds support for drawing and editing features on Mapbox GL JS maps","title":"Mapbox GL JS Plugins"},{"location":"3_conceptos_vector_tiles/#servers","text":"tessera - Supports serving and rendering vector tiles. Uses the same core libraries as Mapbox Studio. tessella - lightweight Node.js Mapbox Vector Tiles server. Inspired by tessera. tilestrata - with tilestrata-vt, it can generate Mapnik Vector Tiles; with tilestrata-postgismvt , it can serve Mapbox Vector Tiles from a PostGIS db Utilery Server to generate vector tiles from PostGIS queries. Python based :warning: no longer maintained tileserver Mapzen Vector Tile Service. TileStache added support for Mapbox Vector tiles via .pbf extension requests. Kartotherian Wikipedia tile server with Tilerator backend tile pre-generator ArcGIS Online - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript Portal for ArcGIS - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript tilesplash - A light and quick nodejs webserver for serving topojson or mapbox vector tiles from a postgis backend go-vtile-example - An example server written in Go Tegola - A MVT server written in pure Go that supports serving tiles from a PostGIS data provider. t-rex - MVT server in a single executable written in Rust. Serves tiles from PostGIS supporting custom tile grids. OSM Scout Server - Maps server providing vector and raster tiles, geocoder, and router. Designed to be used on Linux (mobile and PC) to provide offline maps; written in C++ postserve - A small Python based tileserver using ST_AsMVT and ST_AsMVTGeom to generate vector tiles on the fly. Designed for use with PostGIS 2.4 and the OpenMapTiles project SpatialServer (PGRestAPI) - A multi-purpose GeoSpatial NodeJS web server created at SpatialDev that not only serves MBTiles stuffed with vector tiles, it can also cut vector tiles on the fly from a PostGIS database. :warning: No longer maintained. OpenMapTiles - Set of open-source tools for self-hosting of OpenStreetMap maps in more than 50 languages. It provides both raster as well as vector tiles, WMS and WMTS services for GIS programs, support for JavaScript viewers and mobile SDK. Hastile - Haskell web server using PostGIS to deliver vector tiles. MapServer - Open Source platform for publishing spatial data and interactive mapping applications to the web. MVT output available in 7.2","title":"Servers"},{"location":"3_conceptos_vector_tiles/#low-level-utilities","text":"vt-pbf serialize JavaScript objects representing vector tiles into binary Protocol Buffer encodings of vector tiles vtzero - minimalist vector tile decoder and encoder in C++ mvt-fixtures - a suite of valid and invalid test fixtures according to the Mapbox Vector Tile spec versions. Includes simplified unit test fixtures and real-world fixtures to test your encoders and decoders. zellige - command line utility written to convert GeoJSON to MVT. mapbox-gl-function - Mapbox GL style function evaluator :warning: now maintained as party of mapbox-gl-js mapbox-gl-filter-simplify - Simplifies and complexifies filters in Mapbox GL Styles :warning: removed","title":"Low-level utilities"},{"location":"3_conceptos_vector_tiles/#articles","text":"Vector tiles remixed - guide to using tilemaker to generating vector tiles Build Your Own Static Vector Tile Pipeline - guide transforming, encoding and hosting tiles in the cloud; using ogr2ogr + tippecanoe + Mapbox GL JS Using the new MVT function in PostGIS - Building a vector tile service with PostGIS, express, and pg-promise.","title":"Articles"},{"location":"3_conceptos_vector_tiles/#license","text":"","title":"License"},{"location":"3_estandares_ISO/","text":"Est\u00e1ndares ISO Para la creaci\u00f3n de metadatos (tanto de datos como de servicios), ISO ha creado los siguientes est\u00e1ndares: ISO 19115, ISO 19119 y ISO 19139; mientras que para el dise\u00f1o de geoservicios, OGC ha dise\u00f1ado los siguientes: WMS, WFS, WCS, GML. Algunos de estos han sido adoptados tambi\u00e9n por ISO, convirti\u00e9ndose as\u00ed en est\u00e1ndares internacionales. Qu\u00e9 es ISO? Familia ISO19x ISO 19115 ISO 19119 ISO 19139 Ejemplos de implementaci\u00f3n de est\u00e1ndares","title":"3. Est\u00e1ndares ISO"},{"location":"3_estandares_ISO/#estandares-iso","text":"Para la creaci\u00f3n de metadatos (tanto de datos como de servicios), ISO ha creado los siguientes est\u00e1ndares: ISO 19115, ISO 19119 y ISO 19139; mientras que para el dise\u00f1o de geoservicios, OGC ha dise\u00f1ado los siguientes: WMS, WFS, WCS, GML. Algunos de estos han sido adoptados tambi\u00e9n por ISO, convirti\u00e9ndose as\u00ed en est\u00e1ndares internacionales. Qu\u00e9 es ISO? Familia ISO19x ISO 19115 ISO 19119 ISO 19139 Ejemplos de implementaci\u00f3n de est\u00e1ndares","title":"Est\u00e1ndares ISO"},{"location":"4_visualizacion_kepler/","text":"Visualizaci\u00f3n con Kepler.gl Kepler.gl desrrollada por Uber, en u principio para uso interno, para analizar y visualizar sus propios datos. Es una aplicaci\u00f3n basada en web GL de alto rendimiento y agn\u00f3stica de datos para la exploraci\u00f3n visual de conjuntos de datos de geolocalizaci\u00f3n a gran escala. Construido en la parte superior de deck.gl, kepler.gl puede representar millones de puntos que representan miles de viajes y realizar agregaciones espaciales sobre la marcha. Ejercicio de visualizaci\u00f3n con Kepler.gl Tip Queremos ver d\u00f3nde hay m\u00e1s accidentes Descargamos dataset CSV de OpenData BCN Vamos a http://kepler.gl/#/demo A\u00f1adimos csv Add Layer: Type Hexbin Columns: Latitud Longuitud Color: Scale Quantize Hexagon radius 0.1 Coverage 0.75 Info Continuamos a\u00f1adiendo m\u00e1s capas y mapas bases","title":"4. Visualizaci\u00f3n con Kepler.gl"},{"location":"4_visualizacion_kepler/#visualizacion-con-keplergl","text":"Kepler.gl desrrollada por Uber, en u principio para uso interno, para analizar y visualizar sus propios datos. Es una aplicaci\u00f3n basada en web GL de alto rendimiento y agn\u00f3stica de datos para la exploraci\u00f3n visual de conjuntos de datos de geolocalizaci\u00f3n a gran escala. Construido en la parte superior de deck.gl, kepler.gl puede representar millones de puntos que representan miles de viajes y realizar agregaciones espaciales sobre la marcha.","title":"Visualizaci\u00f3n con Kepler.gl"},{"location":"4_visualizacion_kepler/#ejercicio-de-visualizacion-con-keplergl","text":"Tip Queremos ver d\u00f3nde hay m\u00e1s accidentes Descargamos dataset CSV de OpenData BCN Vamos a http://kepler.gl/#/demo A\u00f1adimos csv Add Layer: Type Hexbin Columns: Latitud Longuitud Color: Scale Quantize Hexagon radius 0.1 Coverage 0.75 Info Continuamos a\u00f1adiendo m\u00e1s capas y mapas bases","title":"Ejercicio de visualizaci\u00f3n con Kepler.gl"},{"location":"5_herramientas_visualizacion_datos/","text":"Herramientas de visualizaci\u00f3n de datos Librer\u00edas Debido a que los datos que podemos encotrar en un portal de Opendata pueden variar mucho tanto en formato como en el tipo; lo mejor para visualizarlos es utilizar librer\u00edas gen\u00e9ricas de visualizaci\u00f3n de datos. Entre las principales tenemos: https://d3js.org/ https://vega.github.io/vega/ https://p5js.org/examples/ http://www.chartjs.org/ https://www.highcharts.com/products/highcharts/ Servicios Aparte de estas librer\u00edas que nos permiten desarrollar nuestras aplicaciones de visualizaci\u00f3n de datos tambi\u00e9n existen algunos servicios conocidos como BI (Business Intelligence) que aparte de mostrar los datos tambi\u00e9n nos permiten hacer ciertos an\u00e1lisis. Algunos de los principales servicios son: https://www.tableau.com/ https://www.qlik.com/es-es http://www.pentaho.com/ https://powerbi.microsoft.com/es-es/","title":"5. Herramientas de visualizaci\u00f3n de datos"},{"location":"5_herramientas_visualizacion_datos/#herramientas-de-visualizacion-de-datos","text":"","title":"Herramientas de visualizaci\u00f3n de datos"},{"location":"5_herramientas_visualizacion_datos/#librerias","text":"Debido a que los datos que podemos encotrar en un portal de Opendata pueden variar mucho tanto en formato como en el tipo; lo mejor para visualizarlos es utilizar librer\u00edas gen\u00e9ricas de visualizaci\u00f3n de datos. Entre las principales tenemos: https://d3js.org/ https://vega.github.io/vega/ https://p5js.org/examples/ http://www.chartjs.org/ https://www.highcharts.com/products/highcharts/","title":"Librer\u00edas"},{"location":"5_herramientas_visualizacion_datos/#servicios","text":"Aparte de estas librer\u00edas que nos permiten desarrollar nuestras aplicaciones de visualizaci\u00f3n de datos tambi\u00e9n existen algunos servicios conocidos como BI (Business Intelligence) que aparte de mostrar los datos tambi\u00e9n nos permiten hacer ciertos an\u00e1lisis. Algunos de los principales servicios son: https://www.tableau.com/ https://www.qlik.com/es-es http://www.pentaho.com/ https://powerbi.microsoft.com/es-es/","title":"Servicios"},{"location":"6_conceptos_geoservicios/","text":"Conceptos b\u00e1sicos de Geoservicios Recursos La mayor\u00edas de los conceptos son sacados del Libro libre SIG de Victor Olaya http://volaya.github.io/libro-sig/ Geoservicio Un geoservicio es un servidor que ofrece alg\u00fan servicio relacionado con el \u00e1mbito SIG, su principal funci\u00f3n es acceder a informaci\u00f3n geoespacial existente en diferentes formatos y servir dicha informaci\u00f3n a clientes a trav\u00e9s de protocolos est\u00e1ndares. El servidor es el elemento encargado de ofrecer el servicio como tal, respondiendo a las peticiones del cliente. A medida que los clientes se hacen m\u00e1s complejos y presentan mayor n\u00famero de funcionalidades, tambi\u00e9n los servidores deben ser capaces de proporcionar servicios m\u00e1s elaborados. Las capacidades fundamentales a las que responden los servidores dentro del \u00e1mbito SIG pueden dividirse en los siguientes grupos: Servir representaciones de los datos. Los servicios de cartograf\u00eda Web, tanto en sus or\u00edgenes como en la actualidad, son eminentemente gr\u00e1ficos, y en \u00faltima instancia lo que la aplicaci\u00f3n Web correspondiente va a hacer es mostrarnos alg\u00fan tipo de imagen con un mapa formado a partir de una serie de datos geogr\u00e1ficos. Ejemplo WMS El servidor puede responder directamente a este tipo de necesidades, preparando una imagen a partir de los datos geogr\u00e1ficos de los que dispone. En el caso de que estos sean ya im\u00e1genes \u2014por ejemplo, im\u00e1genes de sat\u00e9lite u ortofotos\u2014, bastar\u00e1 servir estas, transmitiendo una versi\u00f3n escalada de las dimensiones exactas que el cliente necesite para representar en pantalla. En caso de que los datos sean de tipo vectorial, o bien r\u00e1ster sin una forma de representaci\u00f3n impl\u00edcita \u2014por ejemplo, un Modelo Digital del Terreno\u2014 es necesario emplear alg\u00fan m\u00e9todo para asignarles dicha representaci\u00f3n. Este puede ser asignado por defecto por el servidor, que establecer\u00e1 una simbolog\u00eda fija, o bien ofrecer un servicio m\u00e1s complejo en el que el cliente no solo pide una representaci\u00f3n gr\u00e1fica de una serie de datos para una zona dada, sino que adem\u00e1s puede especificar c\u00f3mo crear esa representaci\u00f3n (v\u00eda SLD). Servir los datos directamente. Una opci\u00f3n m\u00e1s flexible que lo anterior es que el servidor provea directamente los datos geogr\u00e1ficos y sea despu\u00e9s el cliente quien los utilice como corresponda, bien sea simplemente represent\u00e1ndolos \u2014en cuyo caso deber\u00eda ser el propio cliente quien establezca la simbolog\u00eda, ya que esta tarea ya no queda en manos del servidor\u2014 o bien trabajando con ellos de cualquier otra forma, como por ejemplo analiz\u00e1ndolos. Ejemplo WFS Aunque las posibilidades son mayores en este caso, se requieren por parte del cliente unas capacidades mayores, ya que mientras que representar una imagen es algo sumamente sencillo desde el punto de vista t\u00e9cnico, crear esta a partir de los datos geogr\u00e1ficos es m\u00e1s complejo. Servir consultas. Un paso m\u00e1s all\u00e1 en la funcionalidad que puede ofrecer el servidor es responder a preguntas realizadas por el cliente relativas a los datos, ya sean estas relativas a la parte espacial de dichos datos, o bien a su componente tem\u00e1tica. El servidor puede ofrecer como respuesta conjuntos reducidos de los datos de los que dispone, o valores que describan a estos. Estas consultas pueden ser \u00fatiles, por ejemplo, para establecer filtros previos cuando se dispone de un conjunto amplio de or\u00edgenes de datos. Un cliente Web puede obtener datos de distintos servidores, y puede consultar si, para un zona dada, estos servidores disponen de informaci\u00f3n, sin m\u00e1s que consultar la extensi\u00f3n cubierta por los datos de cada uno de ellos y comprobar si se interseca con la regi\u00f3n de inter\u00e9s. En funci\u00f3n de la respuesta, puede o no realizarse posteriormente el acceso a los datos en s\u00ed. Ejemplo CSW Servir procesos. Por \u00faltimo, un servidor puede ofrecer nuevos datos, espaciales o no espaciales, resultantes de alg\u00fan tipo de proceso o c\u00e1lculo a partir de datos espaciales. En este caso, el proceso constituye en s\u00ed el servicio ofrecido por el servidor, y el cliente debe definir los par\u00e1metros de entrada de este y los posibles par\u00e1metros de ajuste que resulten necesarios. Los datos con los que se trabaja pueden ser proporcionados por el cliente, incorpor\u00e1ndolos a su propia petici\u00f3n, o bien pueden residir en el propio servidor. En este \u00faltimo caso, el servidor ofrece tanto los datos, como la posibilidad de extraer resultados a partir de ellos, es decir, los datos y una herramienta para explotarlos. Tambi\u00e9n pueden emplearse datos en un servidor distinto, a los que el servidor de procesos puede acceder si estos est\u00e1n disponibles, convirti\u00e9ndose en cliente de ese segundo servidor. Ejemplo WPS Las posibilidades que estos servicios brindan son muy numerosas. Por una parte, pueden a\u00f1adirse funcionalidades avanzadas a interfaces Web, llevando a estas las capacidades propias de los SIG de escritorio. Por otra, la difusi\u00f3n de algoritmos de an\u00e1lisis geogr\u00e1fico resulta m\u00e1s sencilla, pudiendo ofrecerse estos a todo tipo de usuarios sin necesidad de ning\u00fan software especializado. Y por \u00faltimo, en ciertos casos pueden rebajarse los tiempos de proceso, ya que, en el caso de operaciones complejas, la mayor potencia del servidor respecto al cliente puede resultar en un mayor rendimiento. El reparto de tareas entre varios servidores (computaci\u00f3n distribuida) es otra de las posibilidades que pueden a su vez ampliar la eficiencia de los procesos. Referencias Libro libre SIG de Victor Olaya http://volaya.github.io/libro-sig/","title":"6. Conceptos b\u00e1sicos de Geoservicios"},{"location":"6_conceptos_geoservicios/#conceptos-basicos-de-geoservicios","text":"Recursos La mayor\u00edas de los conceptos son sacados del Libro libre SIG de Victor Olaya http://volaya.github.io/libro-sig/","title":"Conceptos b\u00e1sicos de Geoservicios"},{"location":"6_conceptos_geoservicios/#geoservicio","text":"Un geoservicio es un servidor que ofrece alg\u00fan servicio relacionado con el \u00e1mbito SIG, su principal funci\u00f3n es acceder a informaci\u00f3n geoespacial existente en diferentes formatos y servir dicha informaci\u00f3n a clientes a trav\u00e9s de protocolos est\u00e1ndares. El servidor es el elemento encargado de ofrecer el servicio como tal, respondiendo a las peticiones del cliente. A medida que los clientes se hacen m\u00e1s complejos y presentan mayor n\u00famero de funcionalidades, tambi\u00e9n los servidores deben ser capaces de proporcionar servicios m\u00e1s elaborados. Las capacidades fundamentales a las que responden los servidores dentro del \u00e1mbito SIG pueden dividirse en los siguientes grupos: Servir representaciones de los datos. Los servicios de cartograf\u00eda Web, tanto en sus or\u00edgenes como en la actualidad, son eminentemente gr\u00e1ficos, y en \u00faltima instancia lo que la aplicaci\u00f3n Web correspondiente va a hacer es mostrarnos alg\u00fan tipo de imagen con un mapa formado a partir de una serie de datos geogr\u00e1ficos. Ejemplo WMS El servidor puede responder directamente a este tipo de necesidades, preparando una imagen a partir de los datos geogr\u00e1ficos de los que dispone. En el caso de que estos sean ya im\u00e1genes \u2014por ejemplo, im\u00e1genes de sat\u00e9lite u ortofotos\u2014, bastar\u00e1 servir estas, transmitiendo una versi\u00f3n escalada de las dimensiones exactas que el cliente necesite para representar en pantalla. En caso de que los datos sean de tipo vectorial, o bien r\u00e1ster sin una forma de representaci\u00f3n impl\u00edcita \u2014por ejemplo, un Modelo Digital del Terreno\u2014 es necesario emplear alg\u00fan m\u00e9todo para asignarles dicha representaci\u00f3n. Este puede ser asignado por defecto por el servidor, que establecer\u00e1 una simbolog\u00eda fija, o bien ofrecer un servicio m\u00e1s complejo en el que el cliente no solo pide una representaci\u00f3n gr\u00e1fica de una serie de datos para una zona dada, sino que adem\u00e1s puede especificar c\u00f3mo crear esa representaci\u00f3n (v\u00eda SLD). Servir los datos directamente. Una opci\u00f3n m\u00e1s flexible que lo anterior es que el servidor provea directamente los datos geogr\u00e1ficos y sea despu\u00e9s el cliente quien los utilice como corresponda, bien sea simplemente represent\u00e1ndolos \u2014en cuyo caso deber\u00eda ser el propio cliente quien establezca la simbolog\u00eda, ya que esta tarea ya no queda en manos del servidor\u2014 o bien trabajando con ellos de cualquier otra forma, como por ejemplo analiz\u00e1ndolos. Ejemplo WFS Aunque las posibilidades son mayores en este caso, se requieren por parte del cliente unas capacidades mayores, ya que mientras que representar una imagen es algo sumamente sencillo desde el punto de vista t\u00e9cnico, crear esta a partir de los datos geogr\u00e1ficos es m\u00e1s complejo. Servir consultas. Un paso m\u00e1s all\u00e1 en la funcionalidad que puede ofrecer el servidor es responder a preguntas realizadas por el cliente relativas a los datos, ya sean estas relativas a la parte espacial de dichos datos, o bien a su componente tem\u00e1tica. El servidor puede ofrecer como respuesta conjuntos reducidos de los datos de los que dispone, o valores que describan a estos. Estas consultas pueden ser \u00fatiles, por ejemplo, para establecer filtros previos cuando se dispone de un conjunto amplio de or\u00edgenes de datos. Un cliente Web puede obtener datos de distintos servidores, y puede consultar si, para un zona dada, estos servidores disponen de informaci\u00f3n, sin m\u00e1s que consultar la extensi\u00f3n cubierta por los datos de cada uno de ellos y comprobar si se interseca con la regi\u00f3n de inter\u00e9s. En funci\u00f3n de la respuesta, puede o no realizarse posteriormente el acceso a los datos en s\u00ed. Ejemplo CSW Servir procesos. Por \u00faltimo, un servidor puede ofrecer nuevos datos, espaciales o no espaciales, resultantes de alg\u00fan tipo de proceso o c\u00e1lculo a partir de datos espaciales. En este caso, el proceso constituye en s\u00ed el servicio ofrecido por el servidor, y el cliente debe definir los par\u00e1metros de entrada de este y los posibles par\u00e1metros de ajuste que resulten necesarios. Los datos con los que se trabaja pueden ser proporcionados por el cliente, incorpor\u00e1ndolos a su propia petici\u00f3n, o bien pueden residir en el propio servidor. En este \u00faltimo caso, el servidor ofrece tanto los datos, como la posibilidad de extraer resultados a partir de ellos, es decir, los datos y una herramienta para explotarlos. Tambi\u00e9n pueden emplearse datos en un servidor distinto, a los que el servidor de procesos puede acceder si estos est\u00e1n disponibles, convirti\u00e9ndose en cliente de ese segundo servidor. Ejemplo WPS Las posibilidades que estos servicios brindan son muy numerosas. Por una parte, pueden a\u00f1adirse funcionalidades avanzadas a interfaces Web, llevando a estas las capacidades propias de los SIG de escritorio. Por otra, la difusi\u00f3n de algoritmos de an\u00e1lisis geogr\u00e1fico resulta m\u00e1s sencilla, pudiendo ofrecerse estos a todo tipo de usuarios sin necesidad de ning\u00fan software especializado. Y por \u00faltimo, en ciertos casos pueden rebajarse los tiempos de proceso, ya que, en el caso de operaciones complejas, la mayor potencia del servidor respecto al cliente puede resultar en un mayor rendimiento. El reparto de tareas entre varios servidores (computaci\u00f3n distribuida) es otra de las posibilidades que pueden a su vez ampliar la eficiencia de los procesos.","title":"Geoservicio"},{"location":"6_conceptos_geoservicios/#referencias","text":"Libro libre SIG de Victor Olaya http://volaya.github.io/libro-sig/","title":"Referencias"},{"location":"7_ejemplo_servicio_wms/","text":"Ejemplo servicio WMS Acceso al servicio WMS La manera m\u00e1s f\u00e1cil de encontrar las url de los servicios WMS es buscando en la IDE correspondiente o si conocemos al proveedor del servicio buscando en su p\u00e1gina web. En el portal del PNOA podemos encontrar los diferentes productos y servicios que ofrece. Otro ejemplo tambi\u00e9n ser\u00eda la web del Institut Cartogr\u00e0fic i Geol\u00f2gic de Catalunya (ICGC) La url del servicio WMS de Ortofotos del PNOA es: http://www.ign.es/wms-inspire/pnoa-ma?request=GetCapabilities&service=WMS Para ver las capacidades y descripci\u00f3n del servicio tenemos que hacer una consulta GetCapabilities http://www.ign.es/wms-inspire/pnoa-ma?request=GetCapabilities&service=WMS . Al abrir la consulta en nuestro navegador vemos un XML donde se describe el servicio y donde podremos sacar los par\u00e1metros necesarios para poder visualizar el servicio en nuestro visor de mapas. Para ver los datos de este servicio sobre un mapa crearemos un visor utilizando Leaflet. 1 Creaci\u00f3n de un visor Crear una carpeta con el nombre de visor-wms . Crear un archivo con el nombre de index.html dentro de la carpeta Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < title > Servicio de WMS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" integrity = \"sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==\" crossorigin = \"\" /> < style > # mapid { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"mapid\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" integrity = \"sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew==\" crossorigin = \"\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'mapid' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para ver que carga un mapa centrado en Barcelona. Agregar la capa WMS del PNOA <!DOCTYPE html> < html > < head > < title > Servicio de WMS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" integrity = \"sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==\" crossorigin = \"\" /> < style > # mapid { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"mapid\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" integrity = \"sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew==\" crossorigin = \"\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'mapid' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var pnoa = L . tileLayer . wms ( \"http://www.ign.es/wms-inspire/pnoa-ma?SERVICE=WMS&\" , { layers : 'OI.OrthoimageCoverage' , format : 'image/png' , transparent : true , version : '1.3.0' , //wms version (ver get capabilities) attribution : \"PNOA WMS. Cedido por \u00a9 Instituto Geogr\u00e1fico Nacional de Espa\u00f1a\" }). addTo ( map ); </ script > </ body > </ html > Recargar la p\u00e1gina para visualizar nuestra capa WMS de Ortofotos. Ejercicio Agregar el servicio WMS de Ortofotos del ICGC. URL del servicio http://geoserveis.icc.cat/icc_mapesmultibase/noutm/wms/service ? Para ver el nombre de la capa (layers) hacer un GetCapabilities http://geoserveis.icc.cat/icc_mapesmultibase/noutm/wms/service?SERVICE=WMS&VERSION=1.3.0&REQUEST=Getcapabilities . En el par\u00e1metro attribution de la nueva capa poner \"Institut Cartogr\u00e0fic i Geol\u00f2gic de Catalunya\" Referencias http://leafletjs.com/ \u21a9","title":"7. Ejemplo servicio WMS"},{"location":"7_ejemplo_servicio_wms/#ejemplo-servicio-wms","text":"","title":"Ejemplo servicio WMS"},{"location":"7_ejemplo_servicio_wms/#acceso-al-servicio-wms","text":"La manera m\u00e1s f\u00e1cil de encontrar las url de los servicios WMS es buscando en la IDE correspondiente o si conocemos al proveedor del servicio buscando en su p\u00e1gina web. En el portal del PNOA podemos encontrar los diferentes productos y servicios que ofrece. Otro ejemplo tambi\u00e9n ser\u00eda la web del Institut Cartogr\u00e0fic i Geol\u00f2gic de Catalunya (ICGC) La url del servicio WMS de Ortofotos del PNOA es: http://www.ign.es/wms-inspire/pnoa-ma?request=GetCapabilities&service=WMS Para ver las capacidades y descripci\u00f3n del servicio tenemos que hacer una consulta GetCapabilities http://www.ign.es/wms-inspire/pnoa-ma?request=GetCapabilities&service=WMS . Al abrir la consulta en nuestro navegador vemos un XML donde se describe el servicio y donde podremos sacar los par\u00e1metros necesarios para poder visualizar el servicio en nuestro visor de mapas. Para ver los datos de este servicio sobre un mapa crearemos un visor utilizando Leaflet. 1","title":"Acceso al servicio WMS"},{"location":"7_ejemplo_servicio_wms/#creacion-de-un-visor","text":"Crear una carpeta con el nombre de visor-wms . Crear un archivo con el nombre de index.html dentro de la carpeta Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < title > Servicio de WMS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" integrity = \"sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==\" crossorigin = \"\" /> < style > # mapid { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"mapid\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" integrity = \"sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew==\" crossorigin = \"\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'mapid' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para ver que carga un mapa centrado en Barcelona. Agregar la capa WMS del PNOA <!DOCTYPE html> < html > < head > < title > Servicio de WMS </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" integrity = \"sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==\" crossorigin = \"\" /> < style > # mapid { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"mapid\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" integrity = \"sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew==\" crossorigin = \"\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'mapid' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var pnoa = L . tileLayer . wms ( \"http://www.ign.es/wms-inspire/pnoa-ma?SERVICE=WMS&\" , { layers : 'OI.OrthoimageCoverage' , format : 'image/png' , transparent : true , version : '1.3.0' , //wms version (ver get capabilities) attribution : \"PNOA WMS. Cedido por \u00a9 Instituto Geogr\u00e1fico Nacional de Espa\u00f1a\" }). addTo ( map ); </ script > </ body > </ html > Recargar la p\u00e1gina para visualizar nuestra capa WMS de Ortofotos. Ejercicio Agregar el servicio WMS de Ortofotos del ICGC. URL del servicio http://geoserveis.icc.cat/icc_mapesmultibase/noutm/wms/service ? Para ver el nombre de la capa (layers) hacer un GetCapabilities http://geoserveis.icc.cat/icc_mapesmultibase/noutm/wms/service?SERVICE=WMS&VERSION=1.3.0&REQUEST=Getcapabilities . En el par\u00e1metro attribution de la nueva capa poner \"Institut Cartogr\u00e0fic i Geol\u00f2gic de Catalunya\"","title":"Creaci\u00f3n de un visor"},{"location":"7_ejemplo_servicio_wms/#referencias","text":"http://leafletjs.com/ \u21a9","title":"Referencias"},{"location":"8_consideraciones_servicios_opendata/","text":"Consideraciones sobre servicios Open data Problemas frecuentes al trabajar con servicios Open Data Ausencia de normalizaci\u00f3n u homogeneidad en los portales y servicios. Datos en formatos cerrados o no reutilizables como el pdf. Cambio de las direcciones de los recursos. Por ejemplo, suele ocurrir que cuando se cambia el nombre de un servidor \u00f3 la t\u00e9cnolog\u00eda del portal ocasiona un cambio en las URLs y dejan de funcionar las aplicaciones y servicios que consumen esos datos. Datos poco fiables, err\u00f3neos, inconsistentes. Falta de normalizaci\u00f3n y homogeneidad tambi\u00e9n en los datos. Ejemplo https://analisi.transparenciacatalunya.cat/Urbanisme-infraestructures/Equipaments-de-Catalunya/8gmd-gz7i Ejemplo de buenas pr\u00e1cticas Un buen ejemplo de servicios realtime Open Data son los servicios de notificaci\u00f3n de terremotos de el USGS porque est\u00e1n muy bien documentados, tienen salida en m\u00faltiples formatos, son gratuitos y de libre acceso y ofrecen diferentes niveles de usuarios (programadores y no programadores) https://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php Ejemplo de \"malas\" pr\u00e1cticas En el servicio OpenData de la AEMET http://www.aemet.es/es/datos_abiertos/AEMET_OpenData observamos que nos solicitan una API Key para acceder a los servicios y para obtenerla hay que dar una direcci\u00f3n de email y resolver un captcha, lo que constituye una barrera de entrada. Luego, existe una diferencia clara entre desarrolladores y el acceso general. Y en ninguno de los perfiles de usuarios hay un acceso f\u00e1cil, directo y claro a la informaci\u00f3n. Lo vemos cuando solicitamos un recurso, que nos retorna un json apuntando a otro recurso. Ejemplo https://opendata.aemet.es/opendata/api/prediccion/especifica/municipio/diaria/08001?api_key=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJib2xvc2lnQGdtYWlsLmNvbSIsImp0aSI6ImFkMzFlYjhmLTYxYmQtNGUxMi05Y2E0LTE4MGU4M2UzYzkwNSIsImlzcyI6IkFFTUVUIiwiaWF0IjoxNTExOTgzOTI2LCJ1c2VySWQiOiJhZDMxZWI4Zi02MWJkLTRlMTItOWNhNC0xODBlODNlM2M5MDUiLCJyb2xlIjoiIn0.YYQ93aedA5RM6WTp8XR-gDw3XyMeMxYrCEddDbSpwhU Retorna { \"descripcion\" : \"exito\" , \"estado\" : 200 , \"datos\" : \"https://opendata.aemet.es/opendata/sh/36188a6b\" , \"metadatos\" : \"https://opendata.aemet.es/opendata/sh/dfd88b22\" } Datos https://opendata.aemet.es/opendata/sh/36188a6b Metadatos https://opendata.aemet.es/opendata/sh/dfd88b22","title":"8. Consideraciones sobre servicios Open data"},{"location":"8_consideraciones_servicios_opendata/#consideraciones-sobre-servicios-open-data","text":"","title":"Consideraciones sobre servicios Open data"},{"location":"8_consideraciones_servicios_opendata/#problemas-frecuentes-al-trabajar-con-servicios-open-data","text":"Ausencia de normalizaci\u00f3n u homogeneidad en los portales y servicios. Datos en formatos cerrados o no reutilizables como el pdf. Cambio de las direcciones de los recursos. Por ejemplo, suele ocurrir que cuando se cambia el nombre de un servidor \u00f3 la t\u00e9cnolog\u00eda del portal ocasiona un cambio en las URLs y dejan de funcionar las aplicaciones y servicios que consumen esos datos. Datos poco fiables, err\u00f3neos, inconsistentes. Falta de normalizaci\u00f3n y homogeneidad tambi\u00e9n en los datos. Ejemplo https://analisi.transparenciacatalunya.cat/Urbanisme-infraestructures/Equipaments-de-Catalunya/8gmd-gz7i","title":"Problemas frecuentes al trabajar con servicios Open Data"},{"location":"8_consideraciones_servicios_opendata/#ejemplo-de-buenas-practicas","text":"Un buen ejemplo de servicios realtime Open Data son los servicios de notificaci\u00f3n de terremotos de el USGS porque est\u00e1n muy bien documentados, tienen salida en m\u00faltiples formatos, son gratuitos y de libre acceso y ofrecen diferentes niveles de usuarios (programadores y no programadores) https://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php","title":"Ejemplo de buenas pr\u00e1cticas"},{"location":"8_consideraciones_servicios_opendata/#ejemplo-de-malas-practicas","text":"En el servicio OpenData de la AEMET http://www.aemet.es/es/datos_abiertos/AEMET_OpenData observamos que nos solicitan una API Key para acceder a los servicios y para obtenerla hay que dar una direcci\u00f3n de email y resolver un captcha, lo que constituye una barrera de entrada. Luego, existe una diferencia clara entre desarrolladores y el acceso general. Y en ninguno de los perfiles de usuarios hay un acceso f\u00e1cil, directo y claro a la informaci\u00f3n. Lo vemos cuando solicitamos un recurso, que nos retorna un json apuntando a otro recurso. Ejemplo https://opendata.aemet.es/opendata/api/prediccion/especifica/municipio/diaria/08001?api_key=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJib2xvc2lnQGdtYWlsLmNvbSIsImp0aSI6ImFkMzFlYjhmLTYxYmQtNGUxMi05Y2E0LTE4MGU4M2UzYzkwNSIsImlzcyI6IkFFTUVUIiwiaWF0IjoxNTExOTgzOTI2LCJ1c2VySWQiOiJhZDMxZWI4Zi02MWJkLTRlMTItOWNhNC0xODBlODNlM2M5MDUiLCJyb2xlIjoiIn0.YYQ93aedA5RM6WTp8XR-gDw3XyMeMxYrCEddDbSpwhU Retorna { \"descripcion\" : \"exito\" , \"estado\" : 200 , \"datos\" : \"https://opendata.aemet.es/opendata/sh/36188a6b\" , \"metadatos\" : \"https://opendata.aemet.es/opendata/sh/dfd88b22\" } Datos https://opendata.aemet.es/opendata/sh/36188a6b Metadatos https://opendata.aemet.es/opendata/sh/dfd88b22","title":"Ejemplo de \"malas\" pr\u00e1cticas"},{"location":"9_ejemplo_servicio_bicing_bcn/","text":"Ejemplo servicio bicing Barcelona Acceso al servicio de datos del Bicing de Barcelona En el portal Open data del Ayuntamiento de Barcelona podemos encontrar un dataset (conjunto de datos) que contiene las estaciones del servicio de Bicing Anteriormente ten\u00edan un servicio donde daban toda la informaci\u00f3n de la estaci\u00f3n en tiempo real http://wservice.viabicing.cat/v2/stations . Actualmente lo han separado en dos servicios unos con la informaci\u00f3n de las estaciones (identificador, nombre, coordenadas, etc.) y otro con estado de las estaciones (n\u00famero de bicis disponibles, tipos de bicis, etc) Si bien el Ayuntamiento de Barcelona no ofrece explicitamente el acceso a los datos del Bicing como un servicio, si que tiene un servicio de datos en tiempo real. La url la podemos encontrar presionando el bot\u00f3n de Descargar del recurso json url servicio de bicing Al abrir la url https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information en nuestro navegador observaremos que la respuesta es un archivo json con un conjunto de elementos que tienen las coordenadas de la localizaci\u00f3n de la estaci\u00f3n de bicing, la direcci\u00f3n, la capacidad, etc. Mapa que utiliza este servicio, https://www.bicing.barcelona/es/mapa-de-disponibilidad-provisional El archivo json que retorna el servicio tiene coordenadas pero no es un fichero GeoJSON. 1 Para ver estos datos sobre un mapa crearemos un visor utilizando Leaflet. 2 Creaci\u00f3n de un visor Crear una carpeta con el nombre de visor-bicing . Crear un archivo con el nombre de index.html dentro de la carpeta Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para ver que carga un mapa centrado en Barcelona. Agregar el plugin para cargar datos en tiempo real. Para ellos utilizaremos el plugin Leaflet Realtime 3 . Copiar lo siguiente justo despu\u00e9s de cuando carguemos la libreria de Leaflet. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.2.0/leaflet-realtime.min.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Agregar la capa de realtime del bicing a nuestro mapa. Siguiendo el ejemplo b\u00e1sico del plugin para cagar una capa, copiar lo siguiente al final de nuestro c\u00f3digo de javascript. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.2.0/leaflet-realtime.min.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var realtime = L . realtime ({ url : 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information' , crossOrigin : true , type : 'json' }, { interval : 3 * 1000 }). addTo ( map ); </ script > </ body > </ html > Recargar la p\u00e1gina para visualizar nuestra capa de bicing. Observaremos que no aparece ning\u00fan dato. Abrir la consola de desarrollador del navegador presionando F12 y veremos que cada 3 segundos aparecer\u00e1 un error. El error es Error: Invalid GeoJSON object. . Este error es debido a lo que ya comentamos; la respuesta del servicio de Bicing no es un GeoJSON. Crear una variable llamada geojson que ser\u00e1 la que contendr\u00e1 el GeoJSON resultante de la transformaci\u00f3n, antes de la declaraci\u00f3n de nuestra capa de realtime <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.2.0/leaflet-realtime.min.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojson = { type : 'FeatureCollection' , features : [] }; var realtime = L . realtime ({ url : 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information' , crossOrigin : true , type : 'json' }, { interval : 3 * 1000 }). addTo ( map ); </ script > </ body > </ html > Modificar la aplicaci\u00f3n para transformar la respuesta del bicing en un GeoJSON. Modificar nuestra capa realtime con el siguiente c\u00f3digo <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.2.0/leaflet-realtime.min.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojson = { type : 'FeatureCollection' , features : [] }; var realtime = L . realtime ( function ( success , error ) { fetch ( 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information' ) . then ( function ( response ) { return response . json (); }) . then ( function ( data ) { var stations = data . data . stations ; for ( var i = stations . length - 1 ; i >= 0 ; i -- ) { var station = stations [ i ]; var feature = { type : 'Feature' , properties : { altitude : station . altitude , name : station . name , id : station . station_id , address : station . address , post_code : station . post_code , capacity : station . capacity }, geometry : { type : 'Point' , coordinates : [ station . lon , station . lat ] } }; geojson . features . push ( feature ); } success ( geojson ); }) . catch ( error ); }, { interval : 3 * 1000 }). addTo ( map ); </ script > </ body > </ html > Recargar la aplicaci\u00f3n y veremos los puntos de las estaciones de bicing. Si vamos a la pesta\u00f1a de red (network) en la consola de desarrollador del navegador podremos ver que cada 3 segundos se hace una llamada al servicio. Crear un popup para ver la informaci\u00f3n de la estaci\u00f3n al seleccionarla. Escribir justo despu\u00e9s de donde definimos el intervalo <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.2.0/leaflet-realtime.min.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojson = { type : 'FeatureCollection' , features : [] }; var realtime = L . realtime ( function ( success , error ) { fetch ( 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information' ) . then ( function ( response ) { return response . json (); }) . then ( function ( data ) { var stations = data . data . stations ; for ( var i = stations . length - 1 ; i >= 0 ; i -- ) { var station = stations [ i ]; var feature = { type : 'Feature' , properties : { altitude : station . altitude , name : station . name , id : station . station_id , address : station . address , post_code : station . post_code , capacity : station . capacity }, geometry : { type : 'Point' , coordinates : [ station . lon , station . lat ] } }; geojson . features . push ( feature ); } success ( geojson ); }) . catch ( error ); }, { interval : 3 * 1000 , onEachFeature ( f , l ) { l . bindPopup ( function () { return '<h3>' + f . properties . id + '</h3>' + '<p>' + f . properties . address + '</p>' + '<p>capacity: <strong>' + f . properties . capacity + '</strong></p>' + '<p>c\u00f3digo postal: ' + f . properties . post_code + '</p>' ; }); } }). addTo ( map ); </ script > </ body > </ html > Recargar la p\u00e1gina y hacer click sobre alguna estaci\u00f3n para ver su informaci\u00f3n en tiempo real. mapa de servicio de bicing Referencias https://es.wikipedia.org/wiki/GeoJSON \u21a9 http://leafletjs.com/ \u21a9 https://github.com/perliedman/leaflet-realtime \u21a9","title":"9. Ejemplo servicio bicing Barcelona"},{"location":"9_ejemplo_servicio_bicing_bcn/#ejemplo-servicio-bicing-barcelona","text":"","title":"Ejemplo servicio bicing Barcelona"},{"location":"9_ejemplo_servicio_bicing_bcn/#acceso-al-servicio-de-datos-del-bicing-de-barcelona","text":"En el portal Open data del Ayuntamiento de Barcelona podemos encontrar un dataset (conjunto de datos) que contiene las estaciones del servicio de Bicing Anteriormente ten\u00edan un servicio donde daban toda la informaci\u00f3n de la estaci\u00f3n en tiempo real http://wservice.viabicing.cat/v2/stations . Actualmente lo han separado en dos servicios unos con la informaci\u00f3n de las estaciones (identificador, nombre, coordenadas, etc.) y otro con estado de las estaciones (n\u00famero de bicis disponibles, tipos de bicis, etc) Si bien el Ayuntamiento de Barcelona no ofrece explicitamente el acceso a los datos del Bicing como un servicio, si que tiene un servicio de datos en tiempo real. La url la podemos encontrar presionando el bot\u00f3n de Descargar del recurso json url servicio de bicing Al abrir la url https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information en nuestro navegador observaremos que la respuesta es un archivo json con un conjunto de elementos que tienen las coordenadas de la localizaci\u00f3n de la estaci\u00f3n de bicing, la direcci\u00f3n, la capacidad, etc. Mapa que utiliza este servicio, https://www.bicing.barcelona/es/mapa-de-disponibilidad-provisional El archivo json que retorna el servicio tiene coordenadas pero no es un fichero GeoJSON. 1 Para ver estos datos sobre un mapa crearemos un visor utilizando Leaflet. 2","title":"Acceso al servicio de datos del Bicing de Barcelona"},{"location":"9_ejemplo_servicio_bicing_bcn/#creacion-de-un-visor","text":"Crear una carpeta con el nombre de visor-bicing . Crear un archivo con el nombre de index.html dentro de la carpeta Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Abrir el archivo index.html en el navegador para ver que carga un mapa centrado en Barcelona. Agregar el plugin para cargar datos en tiempo real. Para ellos utilizaremos el plugin Leaflet Realtime 3 . Copiar lo siguiente justo despu\u00e9s de cuando carguemos la libreria de Leaflet. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.2.0/leaflet-realtime.min.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); </ script > </ body > </ html > Agregar la capa de realtime del bicing a nuestro mapa. Siguiendo el ejemplo b\u00e1sico del plugin para cagar una capa, copiar lo siguiente al final de nuestro c\u00f3digo de javascript. <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.2.0/leaflet-realtime.min.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var realtime = L . realtime ({ url : 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information' , crossOrigin : true , type : 'json' }, { interval : 3 * 1000 }). addTo ( map ); </ script > </ body > </ html > Recargar la p\u00e1gina para visualizar nuestra capa de bicing. Observaremos que no aparece ning\u00fan dato. Abrir la consola de desarrollador del navegador presionando F12 y veremos que cada 3 segundos aparecer\u00e1 un error. El error es Error: Invalid GeoJSON object. . Este error es debido a lo que ya comentamos; la respuesta del servicio de Bicing no es un GeoJSON. Crear una variable llamada geojson que ser\u00e1 la que contendr\u00e1 el GeoJSON resultante de la transformaci\u00f3n, antes de la declaraci\u00f3n de nuestra capa de realtime <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.2.0/leaflet-realtime.min.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojson = { type : 'FeatureCollection' , features : [] }; var realtime = L . realtime ({ url : 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information' , crossOrigin : true , type : 'json' }, { interval : 3 * 1000 }). addTo ( map ); </ script > </ body > </ html > Modificar la aplicaci\u00f3n para transformar la respuesta del bicing en un GeoJSON. Modificar nuestra capa realtime con el siguiente c\u00f3digo <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.2.0/leaflet-realtime.min.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojson = { type : 'FeatureCollection' , features : [] }; var realtime = L . realtime ( function ( success , error ) { fetch ( 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information' ) . then ( function ( response ) { return response . json (); }) . then ( function ( data ) { var stations = data . data . stations ; for ( var i = stations . length - 1 ; i >= 0 ; i -- ) { var station = stations [ i ]; var feature = { type : 'Feature' , properties : { altitude : station . altitude , name : station . name , id : station . station_id , address : station . address , post_code : station . post_code , capacity : station . capacity }, geometry : { type : 'Point' , coordinates : [ station . lon , station . lat ] } }; geojson . features . push ( feature ); } success ( geojson ); }) . catch ( error ); }, { interval : 3 * 1000 }). addTo ( map ); </ script > </ body > </ html > Recargar la aplicaci\u00f3n y veremos los puntos de las estaciones de bicing. Si vamos a la pesta\u00f1a de red (network) en la consola de desarrollador del navegador podremos ver que cada 3 segundos se hace una llamada al servicio. Crear un popup para ver la informaci\u00f3n de la estaci\u00f3n al seleccionarla. Escribir justo despu\u00e9s de donde definimos el intervalo <!DOCTYPE html> < html > < head > < title > Servicio de Bicing realtime </ title > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\" /> < style > # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } </ style > </ head > < body > < div id = \"map\" ></ div > < script src = \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.2.0/leaflet-realtime.min.js\" ></ script > < script type = \"text/javascript\" > var map = L . map ( 'map' ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' , { attribution : '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' }). addTo ( map ); var geojson = { type : 'FeatureCollection' , features : [] }; var realtime = L . realtime ( function ( success , error ) { fetch ( 'https://api.bsmsa.eu/ext/api/bsm/gbfs/v2/en/station_information' ) . then ( function ( response ) { return response . json (); }) . then ( function ( data ) { var stations = data . data . stations ; for ( var i = stations . length - 1 ; i >= 0 ; i -- ) { var station = stations [ i ]; var feature = { type : 'Feature' , properties : { altitude : station . altitude , name : station . name , id : station . station_id , address : station . address , post_code : station . post_code , capacity : station . capacity }, geometry : { type : 'Point' , coordinates : [ station . lon , station . lat ] } }; geojson . features . push ( feature ); } success ( geojson ); }) . catch ( error ); }, { interval : 3 * 1000 , onEachFeature ( f , l ) { l . bindPopup ( function () { return '<h3>' + f . properties . id + '</h3>' + '<p>' + f . properties . address + '</p>' + '<p>capacity: <strong>' + f . properties . capacity + '</strong></p>' + '<p>c\u00f3digo postal: ' + f . properties . post_code + '</p>' ; }); } }). addTo ( map ); </ script > </ body > </ html > Recargar la p\u00e1gina y hacer click sobre alguna estaci\u00f3n para ver su informaci\u00f3n en tiempo real. mapa de servicio de bicing","title":"Creaci\u00f3n de un visor"},{"location":"9_ejemplo_servicio_bicing_bcn/#referencias","text":"https://es.wikipedia.org/wiki/GeoJSON \u21a9 http://leafletjs.com/ \u21a9 https://github.com/perliedman/leaflet-realtime \u21a9","title":"Referencias"},{"location":"ejemplos/utilizacion-servicio-opendata/javascripts/vendor/slickgrid/2.2/","text":"Welcome to SlickGrid Find documentation and examples in the wiki . UPDATE: March 5th, 2014 - I have too many things going on in my life right now to really give SlickGrid support and development the time and attention it deserves. I am not stopping it, but I will most likely be unresponsive for some time. Sorry. SlickGrid is an advanced JavaScript grid/spreadsheet component Some highlights: Adaptive virtual scrolling (handle hundreds of thousands of rows with extreme responsiveness) Extremely fast rendering speed Supports jQuery UI Themes Background post-rendering for richer cells Configurable & customizable Full keyboard navigation Column resize/reorder/show/hide Column autosizing & force-fit Pluggable cell formatters & editors Support for editing and creating new rows. Grouping, filtering, custom aggregators, and more! Advanced detached & multi-field editors with undo/redo support. \u201cGlobalEditorLock\u201d to manage concurrent edits in cases where multiple Views on a page can edit the same data. Support for millions of rows","title":"Welcome to SlickGrid"},{"location":"ejemplos/utilizacion-servicio-opendata/javascripts/vendor/slickgrid/2.2/#welcome-to-slickgrid","text":"Find documentation and examples in the wiki . UPDATE: March 5th, 2014 - I have too many things going on in my life right now to really give SlickGrid support and development the time and attention it deserves. I am not stopping it, but I will most likely be unresponsive for some time. Sorry.","title":"Welcome to SlickGrid"},{"location":"ejemplos/utilizacion-servicio-opendata/javascripts/vendor/slickgrid/2.2/#slickgrid-is-an-advanced-javascript-gridspreadsheet-component","text":"Some highlights: Adaptive virtual scrolling (handle hundreds of thousands of rows with extreme responsiveness) Extremely fast rendering speed Supports jQuery UI Themes Background post-rendering for richer cells Configurable & customizable Full keyboard navigation Column resize/reorder/show/hide Column autosizing & force-fit Pluggable cell formatters & editors Support for editing and creating new rows. Grouping, filtering, custom aggregators, and more! Advanced detached & multi-field editors with undo/redo support. \u201cGlobalEditorLock\u201d to manage concurrent edits in cases where multiple Views on a page can edit the same data. Support for millions of rows","title":"SlickGrid is an advanced JavaScript grid/spreadsheet component"}]}